
stm32f411ceu6_fw_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b76c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  0800b90c  0800b90c  0001b90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c274  0800c274  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800c274  0800c274  0001c274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c27c  0800c27c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c27c  0800c27c  0001c27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c280  0800c280  0001c280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800c284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000818  20000088  0800c30c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  0800c30c  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ec5  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000396f  00000000  00000000  00039f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  0003d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  0003e840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a050  00000000  00000000  0003f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019818  00000000  00000000  00059658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d960  00000000  00000000  00072e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001007d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004020  00000000  00000000  00100824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b8f4 	.word	0x0800b8f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800b8f4 	.word	0x0800b8f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <apInit>:




 void apInit(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	 uartOpen(_DEF_UART1, 115200); //UART 개통
 800057c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000580:	2000      	movs	r0, #0
 8000582:	f001 fa3f 	bl	8001a04 <uartOpen>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <fatfsDir>:
}


#ifdef _USE_HW_UART
FRESULT fatfsDir(char* path)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b0d8      	sub	sp, #352	; 0x160
 8000590:	af02      	add	r7, sp, #8
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	6018      	str	r0, [r3, #0]
  FRESULT res;
  DIR dir;
  FILINFO fno;


  res = f_opendir(&dir, path);                       /* Open the directory */
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800059c:	6819      	ldr	r1, [r3, #0]
 800059e:	4610      	mov	r0, r2
 80005a0:	f005 f879 	bl	8005696 <f_opendir>
 80005a4:	4603      	mov	r3, r0
 80005a6:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  if (res == FR_OK)
 80005aa:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d138      	bne.n	8000624 <fatfsDir+0x98>
  {
    for (;;)
    {
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80005b2:	f107 0208 	add.w	r2, r7, #8
 80005b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005ba:	4611      	mov	r1, r2
 80005bc:	4618      	mov	r0, r3
 80005be:	f005 f92e 	bl	800581e <f_readdir>
 80005c2:	4603      	mov	r3, r0
 80005c4:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80005c8:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d124      	bne.n	800061a <fatfsDir+0x8e>
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	7d9b      	ldrb	r3, [r3, #22]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d01f      	beq.n	800061a <fatfsDir+0x8e>
      if (fno.fattrib & AM_DIR)
 80005da:	f107 0308 	add.w	r3, r7, #8
 80005de:	7a1b      	ldrb	r3, [r3, #8]
 80005e0:	f003 0310 	and.w	r3, r3, #16
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d009      	beq.n	80005fc <fatfsDir+0x70>
      {                    				/* It is a directory */
    	uartPrintf(_DEF_UART1," %s/%s \n", path, fno.fname);
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	3316      	adds	r3, #22
 80005ee:	1d3a      	adds	r2, r7, #4
 80005f0:	6812      	ldr	r2, [r2, #0]
 80005f2:	4910      	ldr	r1, [pc, #64]	; (8000634 <fatfsDir+0xa8>)
 80005f4:	2000      	movs	r0, #0
 80005f6:	f001 fc0b 	bl	8001e10 <uartPrintf>
 80005fa:	e7da      	b.n	80005b2 <fatfsDir+0x26>
      }
      else
      {                                      		 /* It is a file. */
        uartPrintf(_DEF_UART1," %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4619      	mov	r1, r3
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	3316      	adds	r3, #22
 800060a:	1d3a      	adds	r2, r7, #4
 800060c:	9100      	str	r1, [sp, #0]
 800060e:	6812      	ldr	r2, [r2, #0]
 8000610:	4909      	ldr	r1, [pc, #36]	; (8000638 <fatfsDir+0xac>)
 8000612:	2000      	movs	r0, #0
 8000614:	f001 fbfc 	bl	8001e10 <uartPrintf>
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000618:	e7cb      	b.n	80005b2 <fatfsDir+0x26>
      }
    }
    f_closedir(&dir);
 800061a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800061e:	4618      	mov	r0, r3
 8000620:	f005 f8d7 	bl	80057d2 <f_closedir>
  }

  return res;
 8000624:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8000628:	4618      	mov	r0, r3
 800062a:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	0800b938 	.word	0x0800b938
 8000638:	0800b944 	.word	0x0800b944

0800063c <apSDCardTest>:
#endif /* _USE_HW_UART */


void apSDCardTest(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	f2ad 4d94 	subw	sp, sp, #1172	; 0x494
 8000642:	af02      	add	r7, sp, #8
    */


    /* SDIO CD Pin을 사용하여 SD카드를 HW적으로 감지수행.. 만약 true(1) 라면 SD 카드가 꼿혀있음을 의미 */

    if (sdIsDetected() == true) //sd card detected
 8000644:	f000 ff60 	bl	8001508 <sdIsDetected>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d004      	beq.n	8000658 <apSDCardTest+0x1c>
    {
        uartPrintf(_DEF_UART1, "sd connected..\n");
 800064e:	49cd      	ldr	r1, [pc, #820]	; (8000984 <apSDCardTest+0x348>)
 8000650:	2000      	movs	r0, #0
 8000652:	f001 fbdd 	bl	8001e10 <uartPrintf>
 8000656:	e003      	b.n	8000660 <apSDCardTest+0x24>
    }

    else //sd card not detected
    {
        uartPrintf(_DEF_UART1, "sd disconnected..\n");
 8000658:	49cb      	ldr	r1, [pc, #812]	; (8000988 <apSDCardTest+0x34c>)
 800065a:	2000      	movs	r0, #0
 800065c:	f001 fbd8 	bl	8001e10 <uartPrintf>
    }


    uartPrintf(_DEF_UART1, "\n========================================\n\n");
 8000660:	49ca      	ldr	r1, [pc, #808]	; (800098c <apSDCardTest+0x350>)
 8000662:	2000      	movs	r0, #0
 8000664:	f001 fbd4 	bl	8001e10 <uartPrintf>


    sd_info_t sd_info;

    /* SD Card의 정보를 출력, Get SD Card information*/
    if (sdGetInfo(&sd_info) == true)
 8000668:	f207 4344 	addw	r3, r7, #1092	; 0x444
 800066c:	4618      	mov	r0, r3
 800066e:	f000 ff61 	bl	8001534 <sdGetInfo>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d053      	beq.n	8000720 <apSDCardTest+0xe4>
    {
    	uartPrintf(_DEF_UART1,"   card_type            : %d\n", sd_info.card_type);
 8000678:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800067c:	461a      	mov	r2, r3
 800067e:	49c4      	ldr	r1, [pc, #784]	; (8000990 <apSDCardTest+0x354>)
 8000680:	2000      	movs	r0, #0
 8000682:	f001 fbc5 	bl	8001e10 <uartPrintf>
    	uartPrintf(_DEF_UART1,"   card_version         : %d\n", sd_info.card_version);
 8000686:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800068a:	461a      	mov	r2, r3
 800068c:	49c1      	ldr	r1, [pc, #772]	; (8000994 <apSDCardTest+0x358>)
 800068e:	2000      	movs	r0, #0
 8000690:	f001 fbbe 	bl	8001e10 <uartPrintf>
    	uartPrintf(_DEF_UART1,"   card_class           : %d\n", sd_info.card_class);
 8000694:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8000698:	461a      	mov	r2, r3
 800069a:	49bf      	ldr	r1, [pc, #764]	; (8000998 <apSDCardTest+0x35c>)
 800069c:	2000      	movs	r0, #0
 800069e:	f001 fbb7 	bl	8001e10 <uartPrintf>
    	uartPrintf(_DEF_UART1,"   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 80006a2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80006a6:	461a      	mov	r2, r3
 80006a8:	49bc      	ldr	r1, [pc, #752]	; (800099c <apSDCardTest+0x360>)
 80006aa:	2000      	movs	r0, #0
 80006ac:	f001 fbb0 	bl	8001e10 <uartPrintf>
    	uartPrintf(_DEF_UART1,"   block_numbers        : %d\n", sd_info.block_numbers);
 80006b0:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80006b4:	461a      	mov	r2, r3
 80006b6:	49ba      	ldr	r1, [pc, #744]	; (80009a0 <apSDCardTest+0x364>)
 80006b8:	2000      	movs	r0, #0
 80006ba:	f001 fba9 	bl	8001e10 <uartPrintf>
    	uartPrintf(_DEF_UART1,"   block_size           : %d\n", sd_info.block_size);
 80006be:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80006c2:	461a      	mov	r2, r3
 80006c4:	49b7      	ldr	r1, [pc, #732]	; (80009a4 <apSDCardTest+0x368>)
 80006c6:	2000      	movs	r0, #0
 80006c8:	f001 fba2 	bl	8001e10 <uartPrintf>
    	uartPrintf(_DEF_UART1,"   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 80006cc:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80006d0:	461a      	mov	r2, r3
 80006d2:	49b5      	ldr	r1, [pc, #724]	; (80009a8 <apSDCardTest+0x36c>)
 80006d4:	2000      	movs	r0, #0
 80006d6:	f001 fb9b 	bl	8001e10 <uartPrintf>
    	uartPrintf(_DEF_UART1,"   log_block_size       : %d\n", sd_info.log_block_size);
 80006da:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80006de:	461a      	mov	r2, r3
 80006e0:	49b2      	ldr	r1, [pc, #712]	; (80009ac <apSDCardTest+0x370>)
 80006e2:	2000      	movs	r0, #0
 80006e4:	f001 fb94 	bl	8001e10 <uartPrintf>
    	uartPrintf(_DEF_UART1,"   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 80006e8:	f8d7 0464 	ldr.w	r0, [r7, #1124]	; 0x464
 80006ec:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80006f0:	0a9c      	lsrs	r4, r3, #10
 80006f2:	f8d7 2464 	ldr.w	r2, [r7, #1124]	; 0x464
 80006f6:	4613      	mov	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	4413      	add	r3, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	0a99      	lsrs	r1, r3, #10
 8000700:	4bab      	ldr	r3, [pc, #684]	; (80009b0 <apSDCardTest+0x374>)
 8000702:	fba3 2301 	umull	r2, r3, r3, r1
 8000706:	08da      	lsrs	r2, r3, #3
 8000708:	4613      	mov	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	1aca      	subs	r2, r1, r3
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	4623      	mov	r3, r4
 8000716:	4602      	mov	r2, r0
 8000718:	49a6      	ldr	r1, [pc, #664]	; (80009b4 <apSDCardTest+0x378>)
 800071a:	2000      	movs	r0, #0
 800071c:	f001 fb78 	bl	8001e10 <uartPrintf>
    }


    uartPrintf(_DEF_UART1, "\n========================================\n\n");
 8000720:	499a      	ldr	r1, [pc, #616]	; (800098c <apSDCardTest+0x350>)
 8000722:	2000      	movs	r0, #0
 8000724:	f001 fb74 	bl	8001e10 <uartPrintf>



    char rx_data;

	uint32_t number = 0; // SD Card의 메모리 정보를 읽을 메모리 블럭 number 설정
 8000728:	2300      	movs	r3, #0
 800072a:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
	uint32_t pre_time;


    while (1)
    {
		if (uartAvailable(_DEF_UART1) > 0)
 800072e:	2000      	movs	r0, #0
 8000730:	f001 fa80 	bl	8001c34 <uartAvailable>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	f000 81ad 	beq.w	8000a96 <apSDCardTest+0x45a>
		{

		    uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n");
 800073c:	499e      	ldr	r1, [pc, #632]	; (80009b8 <apSDCardTest+0x37c>)
 800073e:	2000      	movs	r0, #0
 8000740:	f001 fb66 	bl	8001e10 <uartPrintf>
			uartPrintf(_DEF_UART1, "Select the SD Card Test...\n");
 8000744:	499d      	ldr	r1, [pc, #628]	; (80009bc <apSDCardTest+0x380>)
 8000746:	2000      	movs	r0, #0
 8000748:	f001 fb62 	bl	8001e10 <uartPrintf>
		    uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n");
 800074c:	499a      	ldr	r1, [pc, #616]	; (80009b8 <apSDCardTest+0x37c>)
 800074e:	2000      	movs	r0, #0
 8000750:	f001 fb5e 	bl	8001e10 <uartPrintf>
			uartPrintf(_DEF_UART1, "Option | Description\n");
 8000754:	499a      	ldr	r1, [pc, #616]	; (80009c0 <apSDCardTest+0x384>)
 8000756:	2000      	movs	r0, #0
 8000758:	f001 fb5a 	bl	8001e10 <uartPrintf>
		    uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n");
 800075c:	4996      	ldr	r1, [pc, #600]	; (80009b8 <apSDCardTest+0x37c>)
 800075e:	2000      	movs	r0, #0
 8000760:	f001 fb56 	bl	8001e10 <uartPrintf>
		    uartPrintf(_DEF_UART1, "A,a    | Read physical memory (number 0) information of SD card\n");
 8000764:	4997      	ldr	r1, [pc, #604]	; (80009c4 <apSDCardTest+0x388>)
 8000766:	2000      	movs	r0, #0
 8000768:	f001 fb52 	bl	8001e10 <uartPrintf>
			uartPrintf(_DEF_UART1, "B,b    | Get volume information and print the free space 1\n");
 800076c:	4996      	ldr	r1, [pc, #600]	; (80009c8 <apSDCardTest+0x38c>)
 800076e:	2000      	movs	r0, #0
 8000770:	f001 fb4e 	bl	8001e10 <uartPrintf>
			uartPrintf(_DEF_UART1, "C,c    | Open the directory and Read a directory item or file name & size\n");
 8000774:	4995      	ldr	r1, [pc, #596]	; (80009cc <apSDCardTest+0x390>)
 8000776:	2000      	movs	r0, #0
 8000778:	f001 fb4a 	bl	8001e10 <uartPrintf>
			uartPrintf(_DEF_UART1, "D,d    | Create a HelloWorld.csv file and perform a w/r operation.\n");
 800077c:	4994      	ldr	r1, [pc, #592]	; (80009d0 <apSDCardTest+0x394>)
 800077e:	2000      	movs	r0, #0
 8000780:	f001 fb46 	bl	8001e10 <uartPrintf>
		    uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n");
 8000784:	498c      	ldr	r1, [pc, #560]	; (80009b8 <apSDCardTest+0x37c>)
 8000786:	2000      	movs	r0, #0
 8000788:	f001 fb42 	bl	8001e10 <uartPrintf>

		    uartPrintf(_DEF_UART1, "\n");
 800078c:	4991      	ldr	r1, [pc, #580]	; (80009d4 <apSDCardTest+0x398>)
 800078e:	2000      	movs	r0, #0
 8000790:	f001 fb3e 	bl	8001e10 <uartPrintf>

			rx_data = uartRead(_DEF_UART1);
 8000794:	2000      	movs	r0, #0
 8000796:	f001 fa95 	bl	8001cc4 <uartRead>
 800079a:	4603      	mov	r3, r0
 800079c:	f887 347b 	strb.w	r3, [r7, #1147]	; 0x47b
			uartPrintf(_DEF_UART1,"Option : %c\n", rx_data);
 80007a0:	f897 347b 	ldrb.w	r3, [r7, #1147]	; 0x47b
 80007a4:	461a      	mov	r2, r3
 80007a6:	498c      	ldr	r1, [pc, #560]	; (80009d8 <apSDCardTest+0x39c>)
 80007a8:	2000      	movs	r0, #0
 80007aa:	f001 fb31 	bl	8001e10 <uartPrintf>

		    uartPrintf(_DEF_UART1, "\n");
 80007ae:	4989      	ldr	r1, [pc, #548]	; (80009d4 <apSDCardTest+0x398>)
 80007b0:	2000      	movs	r0, #0
 80007b2:	f001 fb2d 	bl	8001e10 <uartPrintf>

			switch(rx_data)
 80007b6:	f897 347b 	ldrb.w	r3, [r7, #1147]	; 0x47b
 80007ba:	3b61      	subs	r3, #97	; 0x61
 80007bc:	2b03      	cmp	r3, #3
 80007be:	f200 816c 	bhi.w	8000a9a <apSDCardTest+0x45e>
 80007c2:	a201      	add	r2, pc, #4	; (adr r2, 80007c8 <apSDCardTest+0x18c>)
 80007c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c8:	080007d9 	.word	0x080007d9
 80007cc:	0800083f 	.word	0x0800083f
 80007d0:	080008bd 	.word	0x080008bd
 80007d4:	080008e9 	.word	0x080008e9
			{
				case 'a' | 'A':
				    /* SD Card의 메모리 블럭의 정보 읽기 */

					if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 80007d8:	f507 7111 	add.w	r1, r7, #580	; 0x244
 80007dc:	2364      	movs	r3, #100	; 0x64
 80007de:	2201      	movs	r2, #1
 80007e0:	f8d7 047c 	ldr.w	r0, [r7, #1148]	; 0x47c
 80007e4:	f000 ff32 	bl	800164c <sdReadBlocks>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d01e      	beq.n	800082c <apSDCardTest+0x1f0>
				    {
				      for (int i=0; i<512/4; i++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 80007f4:	e015      	b.n	8000822 <apSDCardTest+0x1e6>
				      {
				    	 uartPrintf(_DEF_UART1,"%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 80007f6:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80007fa:	0099      	lsls	r1, r3, #2
 80007fc:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8000800:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
 8000804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	460b      	mov	r3, r1
 800080c:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8000810:	4972      	ldr	r1, [pc, #456]	; (80009dc <apSDCardTest+0x3a0>)
 8000812:	2000      	movs	r0, #0
 8000814:	f001 fafc 	bl	8001e10 <uartPrintf>
				      for (int i=0; i<512/4; i++)
 8000818:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800081c:	3301      	adds	r3, #1
 800081e:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 8000822:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8000826:	2b7f      	cmp	r3, #127	; 0x7f
 8000828:	dde5      	ble.n	80007f6 <apSDCardTest+0x1ba>
 800082a:	e003      	b.n	8000834 <apSDCardTest+0x1f8>
				      }
				    }

				    else
				    {
				    	uartPrintf(_DEF_UART1,"sd read fail...\n");
 800082c:	496c      	ldr	r1, [pc, #432]	; (80009e0 <apSDCardTest+0x3a4>)
 800082e:	2000      	movs	r0, #0
 8000830:	f001 faee 	bl	8001e10 <uartPrintf>
				    }

				    uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n\n");
 8000834:	496b      	ldr	r1, [pc, #428]	; (80009e4 <apSDCardTest+0x3a8>)
 8000836:	2000      	movs	r0, #0
 8000838:	f001 faea 	bl	8001e10 <uartPrintf>
				    break;
 800083c:	e12e      	b.n	8000a9c <apSDCardTest+0x460>

				case 'b' | 'B':
					/* FATFS32 파일시스템 구조를 가지는  첫번째 드라이버 전체 볼륨(크기)과 남아있는 용량 출력 */

					/* Get volume information and free clusters of drive 1 */
					res = f_getfree("", &fre_clust, &fs);
 800083e:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8000842:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8000846:	4619      	mov	r1, r3
 8000848:	4867      	ldr	r0, [pc, #412]	; (80009e8 <apSDCardTest+0x3ac>)
 800084a:	f005 f840 	bl	80058ce <f_getfree>
 800084e:	4603      	mov	r3, r0
 8000850:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
					if (res == FR_OK)
 8000854:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 8000858:	2b00      	cmp	r3, #0
 800085a:	d123      	bne.n	80008a4 <apSDCardTest+0x268>
					{
					    /* Get total sectors and free sectors */
					    tot_sect = (fs->n_fatent - 2) * fs->csize;
 800085c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	3b02      	subs	r3, #2
 8000866:	f507 7210 	add.w	r2, r7, #576	; 0x240
 800086a:	6812      	ldr	r2, [r2, #0]
 800086c:	8952      	ldrh	r2, [r2, #10]
 800086e:	fb02 f303 	mul.w	r3, r2, r3
 8000872:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
					    fre_sect = fre_clust * fs->csize;
 8000876:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	895b      	ldrh	r3, [r3, #10]
 800087e:	461a      	mov	r2, r3
 8000880:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	fb03 f302 	mul.w	r3, r3, r2
 800088a:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468

					    /* Print the free space (assuming 512 bytes/sector) */
					    uartPrintf(_DEF_UART1,"%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
 800088e:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8000892:	085a      	lsrs	r2, r3, #1
 8000894:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	4954      	ldr	r1, [pc, #336]	; (80009ec <apSDCardTest+0x3b0>)
 800089c:	2000      	movs	r0, #0
 800089e:	f001 fab7 	bl	8001e10 <uartPrintf>
 80008a2:	e006      	b.n	80008b2 <apSDCardTest+0x276>
					 }

					else
					{
						uartPrintf(_DEF_UART1," err : %d\n", res);
 80008a4:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 80008a8:	461a      	mov	r2, r3
 80008aa:	4951      	ldr	r1, [pc, #324]	; (80009f0 <apSDCardTest+0x3b4>)
 80008ac:	2000      	movs	r0, #0
 80008ae:	f001 faaf 	bl	8001e10 <uartPrintf>
					}

				    uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n\n");
 80008b2:	494c      	ldr	r1, [pc, #304]	; (80009e4 <apSDCardTest+0x3a8>)
 80008b4:	2000      	movs	r0, #0
 80008b6:	f001 faab 	bl	8001e10 <uartPrintf>
					break;
 80008ba:	e0ef      	b.n	8000a9c <apSDCardTest+0x460>

				case 'c' | 'C':
					/* FATFS32 파일시스템 구조를 가지는  첫번째 드라이버의  root 디렉토리에 있는  폴더 이름 또는 파일 이름과 용량을 출력 */

					/* "/" : root 디렉토리 */
					res = fatfsDir("/");
 80008bc:	484d      	ldr	r0, [pc, #308]	; (80009f4 <apSDCardTest+0x3b8>)
 80008be:	f7ff fe65 	bl	800058c <fatfsDir>
 80008c2:	4603      	mov	r3, r0
 80008c4:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
					if (res != FR_OK)
 80008c8:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d006      	beq.n	80008de <apSDCardTest+0x2a2>
					{
						uartPrintf(_DEF_UART1," err : %d\n", res);
 80008d0:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 80008d4:	461a      	mov	r2, r3
 80008d6:	4946      	ldr	r1, [pc, #280]	; (80009f0 <apSDCardTest+0x3b4>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 fa99 	bl	8001e10 <uartPrintf>
					}

				    uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n\n");
 80008de:	4941      	ldr	r1, [pc, #260]	; (80009e4 <apSDCardTest+0x3a8>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 fa95 	bl	8001e10 <uartPrintf>
					break;
 80008e6:	e0d9      	b.n	8000a9c <apSDCardTest+0x460>


				case'd' | 'D':
					/* HelloWorld.csv 파일 생성 후 HelloWorld.csv 파일에 f_printf()로 쓰고 다시 내용물을 1byte씩 읽어서 출력*/

					pre_time = millis();
 80008e8:	f000 f91a 	bl	8000b20 <millis>
 80008ec:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
					/* Write 동작 */
					res = f_open(&log_file, "HelloWorld.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	220b      	movs	r2, #11
 80008f6:	4940      	ldr	r1, [pc, #256]	; (80009f8 <apSDCardTest+0x3bc>)
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 ff1d 	bl	8004738 <f_open>
 80008fe:	4603      	mov	r3, r0
 8000900:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
//					res = f_open(&log_file, "1.txt", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);

					if (res == FR_OK)
 8000904:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 8000908:	2b00      	cmp	r3, #0
 800090a:	f040 80b0 	bne.w	8000a6e <apSDCardTest+0x432>
					{
					   f_printf(&log_file, "test1, ");
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	493a      	ldr	r1, [pc, #232]	; (80009fc <apSDCardTest+0x3c0>)
 8000914:	4618      	mov	r0, r3
 8000916:	f005 f8ff 	bl	8005b18 <f_printf>
					   f_printf(&log_file, "test2, ");
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	4938      	ldr	r1, [pc, #224]	; (8000a00 <apSDCardTest+0x3c4>)
 8000920:	4618      	mov	r0, r3
 8000922:	f005 f8f9 	bl	8005b18 <f_printf>
					   f_printf(&log_file, "test3, ");
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4936      	ldr	r1, [pc, #216]	; (8000a04 <apSDCardTest+0x3c8>)
 800092c:	4618      	mov	r0, r3
 800092e:	f005 f8f3 	bl	8005b18 <f_printf>
					   f_printf(&log_file, ", ");
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	4934      	ldr	r1, [pc, #208]	; (8000a08 <apSDCardTest+0x3cc>)
 8000938:	4618      	mov	r0, r3
 800093a:	f005 f8ed 	bl	8005b18 <f_printf>
					   f_printf(&log_file, "\n");
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	4924      	ldr	r1, [pc, #144]	; (80009d4 <apSDCardTest+0x398>)
 8000944:	4618      	mov	r0, r3
 8000946:	f005 f8e7 	bl	8005b18 <f_printf>

					   for (int i=0; i<8; i++)
 800094a:	2300      	movs	r3, #0
 800094c:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8000950:	e00c      	b.n	800096c <apSDCardTest+0x330>
					   {
						   f_printf(&log_file, "%d \n", i);
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 800095a:	492c      	ldr	r1, [pc, #176]	; (8000a0c <apSDCardTest+0x3d0>)
 800095c:	4618      	mov	r0, r3
 800095e:	f005 f8db 	bl	8005b18 <f_printf>
					   for (int i=0; i<8; i++)
 8000962:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000966:	3301      	adds	r3, #1
 8000968:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 800096c:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000970:	2b07      	cmp	r3, #7
 8000972:	ddee      	ble.n	8000952 <apSDCardTest+0x316>
					   }

					   f_rewind(&log_file);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f004 fc82 	bl	8005284 <f_lseek>


					   UINT len;
					   uint8_t data;
						/* Read 동작 */
					   while(uartAvailable(_DEF_UART1))
 8000980:	e065      	b.n	8000a4e <apSDCardTest+0x412>
 8000982:	bf00      	nop
 8000984:	0800b958 	.word	0x0800b958
 8000988:	0800b968 	.word	0x0800b968
 800098c:	0800b97c 	.word	0x0800b97c
 8000990:	0800b9a8 	.word	0x0800b9a8
 8000994:	0800b9c8 	.word	0x0800b9c8
 8000998:	0800b9e8 	.word	0x0800b9e8
 800099c:	0800ba08 	.word	0x0800ba08
 80009a0:	0800ba28 	.word	0x0800ba28
 80009a4:	0800ba48 	.word	0x0800ba48
 80009a8:	0800ba68 	.word	0x0800ba68
 80009ac:	0800ba88 	.word	0x0800ba88
 80009b0:	cccccccd 	.word	0xcccccccd
 80009b4:	0800baa8 	.word	0x0800baa8
 80009b8:	0800bad4 	.word	0x0800bad4
 80009bc:	0800bb20 	.word	0x0800bb20
 80009c0:	0800bb3c 	.word	0x0800bb3c
 80009c4:	0800bb54 	.word	0x0800bb54
 80009c8:	0800bb98 	.word	0x0800bb98
 80009cc:	0800bbd4 	.word	0x0800bbd4
 80009d0:	0800bc20 	.word	0x0800bc20
 80009d4:	0800bc64 	.word	0x0800bc64
 80009d8:	0800bc68 	.word	0x0800bc68
 80009dc:	0800bc78 	.word	0x0800bc78
 80009e0:	0800bc8c 	.word	0x0800bc8c
 80009e4:	0800bca0 	.word	0x0800bca0
 80009e8:	0800bcec 	.word	0x0800bcec
 80009ec:	0800bcf0 	.word	0x0800bcf0
 80009f0:	0800bd24 	.word	0x0800bd24
 80009f4:	0800bd30 	.word	0x0800bd30
 80009f8:	0800bd34 	.word	0x0800bd34
 80009fc:	0800bd44 	.word	0x0800bd44
 8000a00:	0800bd4c 	.word	0x0800bd4c
 8000a04:	0800bd54 	.word	0x0800bd54
 8000a08:	0800bd5c 	.word	0x0800bd5c
 8000a0c:	0800bd60 	.word	0x0800bd60
					   {
						   len = 0;
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
						   res = f_read(&log_file, &data, 1, &len);
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	1df9      	adds	r1, r7, #7
 8000a1e:	f107 000c 	add.w	r0, r7, #12
 8000a22:	2201      	movs	r2, #1
 8000a24:	f004 f8d2 	bl	8004bcc <f_read>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473

					       if (res != FR_OK)
 8000a2e:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d112      	bne.n	8000a5c <apSDCardTest+0x420>
					       {
					         break;
					       }
					       if (len == 0)
 8000a36:	f107 0308 	add.w	r3, r7, #8
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00f      	beq.n	8000a60 <apSDCardTest+0x424>
					       {
					         break;
					       }

					       uartPrintf(_DEF_UART1, "%c", data);
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4916      	ldr	r1, [pc, #88]	; (8000aa0 <apSDCardTest+0x464>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 f9e1 	bl	8001e10 <uartPrintf>
					   while(uartAvailable(_DEF_UART1))
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f001 f8f0 	bl	8001c34 <uartAvailable>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1da      	bne.n	8000a10 <apSDCardTest+0x3d4>
 8000a5a:	e002      	b.n	8000a62 <apSDCardTest+0x426>
					         break;
 8000a5c:	bf00      	nop
 8000a5e:	e000      	b.n	8000a62 <apSDCardTest+0x426>
					         break;
 8000a60:	bf00      	nop
					   }

					   f_close(&log_file);
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4618      	mov	r0, r3
 8000a68:	f004 fbe2 	bl	8005230 <f_close>
 8000a6c:	e003      	b.n	8000a76 <apSDCardTest+0x43a>
					}

					else
					{
						uartPrintf(_DEF_UART1,"f_open fail\r\n");
 8000a6e:	490d      	ldr	r1, [pc, #52]	; (8000aa4 <apSDCardTest+0x468>)
 8000a70:	2000      	movs	r0, #0
 8000a72:	f001 f9cd 	bl	8001e10 <uartPrintf>
					}

					uartPrintf(_DEF_UART1,"%d ms\r\n", millis()-pre_time);
 8000a76:	f000 f853 	bl	8000b20 <millis>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	461a      	mov	r2, r3
 8000a84:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <apSDCardTest+0x46c>)
 8000a86:	2000      	movs	r0, #0
 8000a88:	f001 f9c2 	bl	8001e10 <uartPrintf>

				    uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n\n");
 8000a8c:	4907      	ldr	r1, [pc, #28]	; (8000aac <apSDCardTest+0x470>)
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f001 f9be 	bl	8001e10 <uartPrintf>
					break;
 8000a94:	e002      	b.n	8000a9c <apSDCardTest+0x460>


				default:
					break;
			}
		}
 8000a96:	bf00      	nop
 8000a98:	e649      	b.n	800072e <apSDCardTest+0xf2>
					break;
 8000a9a:	bf00      	nop
		if (uartAvailable(_DEF_UART1) > 0)
 8000a9c:	e647      	b.n	800072e <apSDCardTest+0xf2>
 8000a9e:	bf00      	nop
 8000aa0:	0800bd68 	.word	0x0800bd68
 8000aa4:	0800bd6c 	.word	0x0800bd6c
 8000aa8:	0800bd7c 	.word	0x0800bd7c
 8000aac:	0800bca0 	.word	0x0800bca0

08000ab0 <bspInit>:
void SystemClock_Config(void);



void bspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
	  HAL_Init();
 8000ab6:	f005 fb71 	bl	800619c <HAL_Init>
	  SystemClock_Config();
 8000aba:	f000 f839 	bl	8000b30 <SystemClock_Config>

	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <bspInit+0x6c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a15      	ldr	r2, [pc, #84]	; (8000b1c <bspInit+0x6c>)
 8000ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <bspInit+0x6c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <bspInit+0x6c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <bspInit+0x6c>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <bspInit+0x6c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <bspInit+0x6c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <bspInit+0x6c>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <bspInit+0x6c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]


}
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <millis>:
     }
}


uint32_t millis(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

	return HAL_GetTick();
 8000b24:	f005 fba0 	bl	8006268 <HAL_GetTick>
 8000b28:	4603      	mov	r3, r0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b094      	sub	sp, #80	; 0x50
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 0320 	add.w	r3, r7, #32
 8000b3a:	2230      	movs	r2, #48	; 0x30
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f00a fa88 	bl	800b054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <SystemClock_Config+0xc8>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a26      	ldr	r2, [pc, #152]	; (8000bf8 <SystemClock_Config+0xc8>)
 8000b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <SystemClock_Config+0xc8>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <SystemClock_Config+0xcc>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a20      	ldr	r2, [pc, #128]	; (8000bfc <SystemClock_Config+0xcc>)
 8000b7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <SystemClock_Config+0xcc>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b96:	2302      	movs	r3, #2
 8000b98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ba0:	2319      	movs	r3, #25
 8000ba2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ba4:	23c0      	movs	r3, #192	; 0xc0
 8000ba6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bac:	2304      	movs	r3, #4
 8000bae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb0:	f107 0320 	add.w	r3, r7, #32
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f006 fbd1 	bl	800735c <HAL_RCC_OscConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bc0:	f000 f81e 	bl	8000c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	2103      	movs	r1, #3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f006 fe33 	bl	800784c <HAL_RCC_ClockConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bec:	f000 f808 	bl	8000c00 <Error_Handler>
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	3750      	adds	r7, #80	; 0x50
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40007000 	.word	0x40007000

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <NMI_Handler+0x4>

08000c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <MemManage_Handler+0x4>

08000c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca8:	f005 faca 	bl	8006240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <USART1_IRQHandler+0x10>)
 8000cb6:	f008 fbfd 	bl	80094b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000804 	.word	0x20000804

08000cc4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <SDIO_IRQHandler+0x10>)
 8000cca:	f007 fa05 	bl	80080d8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000600 	.word	0x20000600

08000cd8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <DMA2_Stream2_IRQHandler+0x10>)
 8000cde:	f005 fe2d 	bl	800693c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000744 	.word	0x20000744

08000cec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <DMA2_Stream3_IRQHandler+0x10>)
 8000cf2:	f005 fe23 	bl	800693c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000540 	.word	0x20000540

08000d00 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <DMA2_Stream6_IRQHandler+0x10>)
 8000d06:	f005 fe19 	bl	800693c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200005a0 	.word	0x200005a0

08000d14 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <DMA2_Stream7_IRQHandler+0x10>)
 8000d1a:	f005 fe0f 	bl	800693c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200006e4 	.word	0x200006e4

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f00a f952 	bl	800b000 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20020000 	.word	0x20020000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	200000a4 	.word	0x200000a4
 8000d90:	200008a0 	.word	0x200008a0

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dbe:	490e      	ldr	r1, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd4:	4c0b      	ldr	r4, [pc, #44]	; (8000e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000de2:	f7ff ffd7 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de6:	f00a f911 	bl	800b00c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f00a f8fd 	bl	800afe8 <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000dfc:	0800c284 	.word	0x0800c284
  ldr r2, =_sbss
 8000e00:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000e04:	200008a0 	.word	0x200008a0

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>

08000e0a <qbufferCreate>:


}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b087      	sub	sp, #28
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]

	bool ret = true;
 8000e16:	2301      	movs	r3, #1
 8000e18:	75fb      	strb	r3, [r7, #23]

	p_node->in  = 0;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
	p_node->out = 0;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
	p_node->len = length;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
	p_node->p_buf = p_buf;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	60da      	str	r2, [r3, #12]

	return ret;
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	371c      	adds	r7, #28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <qbufferRead>:




bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	bool ret = true;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	75fb      	strb	r3, [r7, #23]

	for (int i=0; i<length; i++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	e026      	b.n	8000ea4 <qbufferRead+0x64>
	{

		if (p_node-> p_buf != NULL)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d009      	beq.n	8000e72 <qbufferRead+0x32>
		{
			p_data[i] = p_node->p_buf[p_node->out];
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	441a      	add	r2, r3
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	440b      	add	r3, r1
 8000e6e:	7812      	ldrb	r2, [r2, #0]
 8000e70:	701a      	strb	r2, [r3, #0]

		}

		if (p_node->out != p_node->in)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d00c      	beq.n	8000e98 <qbufferRead+0x58>
		{
			p_node->out = (p_node->out + 1) % p_node->len;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	3301      	adds	r3, #1
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	6892      	ldr	r2, [r2, #8]
 8000e88:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e8c:	fb02 f201 	mul.w	r2, r2, r1
 8000e90:	1a9a      	subs	r2, r3, r2
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	e002      	b.n	8000e9e <qbufferRead+0x5e>

		}

		else
		{
			ret =false;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	75fb      	strb	r3, [r7, #23]
			break;
 8000e9c:	e006      	b.n	8000eac <qbufferRead+0x6c>
	for (int i=0; i<length; i++)
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8d4      	bhi.n	8000e56 <qbufferRead+0x16>
		}
	}

	return ret;
 8000eac:	7dfb      	ldrb	r3, [r7, #23]

}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	371c      	adds	r7, #28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <qbufferAvailable>:




uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b085      	sub	sp, #20
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
	uint32_t ret;


	ret = (p_node->in - p_node->out) % p_node-> len;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6892      	ldr	r2, [r2, #8]
 8000ed0:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ed4:	fb02 f201 	mul.w	r2, r2, r1
 8000ed8:	1a9b      	subs	r3, r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]


	return ret;
 8000edc:	68fb      	ldr	r3, [r7, #12]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
	...

08000eec <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <SD_CheckStatus+0x80>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 8000efc:	f000 faf8 	bl	80014f0 <sdIsInit>
 8000f00:	4603      	mov	r3, r0
 8000f02:	f083 0301 	eor.w	r3, r3, #1
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d007      	beq.n	8000f1c <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <SD_CheckStatus+0x80>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <SD_CheckStatus+0x80>)
 8000f1a:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 8000f1c:	f000 faf4 	bl	8001508 <sdIsDetected>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f083 0301 	eor.w	r3, r3, #1
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d007      	beq.n	8000f3c <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <SD_CheckStatus+0x80>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	f043 0302 	orr.w	r3, r3, #2
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <SD_CheckStatus+0x80>)
 8000f3a:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 8000f3c:	200a      	movs	r0, #10
 8000f3e:	f000 fb65 	bl	800160c <sdIsReady>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f083 0301 	eor.w	r3, r3, #1
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <SD_CheckStatus+0x80>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <SD_CheckStatus+0x80>)
 8000f5c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8000f5e:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <SD_CheckStatus+0x80>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b2db      	uxtb	r3, r3
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000004 	.word	0x20000004

08000f70 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	  Stat = 0;
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <SD_initialize+0x40>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]

	  if (sdIsInit() != true)
 8000f80:	f000 fab6 	bl	80014f0 <sdIsInit>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f083 0301 	eor.w	r3, r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d007      	beq.n	8000fa0 <SD_initialize+0x30>
	  {
	    Stat |= STA_NOINIT;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <SD_initialize+0x40>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <SD_initialize+0x40>)
 8000f9e:	701a      	strb	r2, [r3, #0]
	  }

  return Stat;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <SD_initialize+0x40>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b2db      	uxtb	r3, r3
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff93 	bl	8000eec <SD_CheckStatus>
 8000fc6:	4603      	mov	r3, r0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	4603      	mov	r3, r0
 8000fde:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	75fb      	strb	r3, [r7, #23]

  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 8000fe4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 fb2d 	bl	800164c <sdReadBlocks>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SD_read+0x2c>
  {
    res = RES_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	75fb      	strb	r3, [r7, #23]
  }
  return res;
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	4603      	mov	r3, r0
 8001014:	73fb      	strb	r3, [r7, #15]
   DRESULT res = RES_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	75fb      	strb	r3, [r7, #23]

   if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 800101a:	f242 7310 	movw	r3, #10000	; 0x2710
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 fb7c 	bl	8001720 <sdWriteBlocks>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SD_write+0x2c>
   {
	  res = RES_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	75fb      	strb	r3, [r7, #23]
   }
   return res;
 8001032:	7dfb      	ldrb	r3, [r7, #23]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	603a      	str	r2, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	460b      	mov	r3, r1
 800104a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <SD_ioctl+0xac>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SD_ioctl+0x28>
 8001060:	2303      	movs	r3, #3
 8001062:	e03c      	b.n	80010de <SD_ioctl+0xa2>

  switch (cmd)
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	2b03      	cmp	r3, #3
 8001068:	d834      	bhi.n	80010d4 <SD_ioctl+0x98>
 800106a:	a201      	add	r2, pc, #4	; (adr r2, 8001070 <SD_ioctl+0x34>)
 800106c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001070:	08001081 	.word	0x08001081
 8001074:	08001089 	.word	0x08001089
 8001078:	080010a1 	.word	0x080010a1
 800107c:	080010bb 	.word	0x080010bb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001086:	e028      	b.n	80010da <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
	sdGetInfo(&sd_info);
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fa51 	bl	8001534 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 8001092:	6a3a      	ldr	r2, [r7, #32]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800109e:	e01c      	b.n	80010da <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
	sdGetInfo(&sd_info);
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fa45 	bl	8001534 <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80010b8:	e00f      	b.n	80010da <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
	  sdGetInfo(&sd_info);
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fa38 	bl	8001534 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	0a5a      	lsrs	r2, r3, #9
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80010d2:	e002      	b.n	80010da <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80010d4:	2304      	movs	r3, #4
 80010d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80010da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3730      	adds	r7, #48	; 0x30
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000004 	.word	0x20000004

080010ec <fatfsInit>:
FATFS SDFatFs;  /* File system object for SD card logical drive */
char SDPath[4]; /* SD card logical drive path */


bool fatfsInit(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  bool ret = true;
 80010f2:	2301      	movs	r3, #1
 80010f4:	71fb      	strb	r3, [r7, #7]

  /* TODO FATFS32 초기화 단계에서 mount를 진행 , 무조건 moun 먼저 수행해야한다. (먼저 드라이버부터 잡아줘야함) */
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80010f6:	490b      	ldr	r1, [pc, #44]	; (8001124 <fatfsInit+0x38>)
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <fatfsInit+0x3c>)
 80010fa:	f004 ff79 	bl	8005ff0 <FATFS_LinkDriver>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10a      	bne.n	800111a <fatfsInit+0x2e>
  {
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8001104:	2200      	movs	r2, #0
 8001106:	4907      	ldr	r1, [pc, #28]	; (8001124 <fatfsInit+0x38>)
 8001108:	4808      	ldr	r0, [pc, #32]	; (800112c <fatfsInit+0x40>)
 800110a:	f003 facf 	bl	80046ac <f_mount>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <fatfsInit+0x2e>
    {
      is_init = true;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <fatfsInit+0x44>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
    }
  }
  return ret;
 800111a:	79fb      	ldrb	r3, [r7, #7]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000308 	.word	0x20000308
 8001128:	0800bde4 	.word	0x0800bde4
 800112c:	2000030c 	.word	0x2000030c
 8001130:	200000a8 	.word	0x200000a8

08001134 <gpioInit>:




bool gpioInit(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
	bool ret = true;
 800113a:	2301      	movs	r3, #1
 800113c:	72fb      	strb	r3, [r7, #11]

	__HAL_RCC_GPIOB_CLK_ENABLE(); /* 클럭 설정  */
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <gpioInit+0x7c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <gpioInit+0x7c>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <gpioInit+0x7c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

	for(int i = 0; i < GPIO_MAX_CH; i++)
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	e01e      	b.n	800119e <gpioInit+0x6a>
	{
		gpioPinMode(i, gpio_tbl[i].mode);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	b2d8      	uxtb	r0, r3
 8001164:	4913      	ldr	r1, [pc, #76]	; (80011b4 <gpioInit+0x80>)
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	3308      	adds	r3, #8
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4619      	mov	r1, r3
 8001178:	f000 f81e 	bl	80011b8 <gpioPinMode>
		gpioPinWrite(i, gpio_tbl[i].init_value);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	b2d8      	uxtb	r0, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <gpioInit+0x80>)
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	330b      	adds	r3, #11
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	4619      	mov	r1, r3
 8001194:	f000 f872 	bl	800127c <gpioPinWrite>
	for(int i = 0; i < GPIO_MAX_CH; i++)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3301      	adds	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	dddd      	ble.n	8001160 <gpioInit+0x2c>
	}


	return ret;
 80011a4:	7afb      	ldrb	r3, [r7, #11]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	20000008 	.word	0x20000008

080011b8 <gpioPinMode>:


bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	460a      	mov	r2, r1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71bb      	strb	r3, [r7, #6]
	bool ret = true;
 80011c8:	2301      	movs	r3, #1
 80011ca:	77fb      	strb	r3, [r7, #31]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]

	switch(mode)
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	2b05      	cmp	r3, #5
 80011e0:	d82c      	bhi.n	800123c <gpioPinMode+0x84>
 80011e2:	a201      	add	r2, pc, #4	; (adr r2, 80011e8 <gpioPinMode+0x30>)
 80011e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e8:	08001201 	.word	0x08001201
 80011ec:	0800120b 	.word	0x0800120b
 80011f0:	08001215 	.word	0x08001215
 80011f4:	0800121f 	.word	0x0800121f
 80011f8:	08001229 	.word	0x08001229
 80011fc:	08001233 	.word	0x08001233
	{
		case _DEF_INPUT:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
			break;
 8001208:	e018      	b.n	800123c <gpioPinMode+0x84>

		case _DEF_INPUT_PULLUP:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120e:	2301      	movs	r3, #1
 8001210:	613b      	str	r3, [r7, #16]
			break;
 8001212:	e013      	b.n	800123c <gpioPinMode+0x84>

		case _DEF_INPUT_PULLDOWN:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001218:	2302      	movs	r3, #2
 800121a:	613b      	str	r3, [r7, #16]
			break;
 800121c:	e00e      	b.n	800123c <gpioPinMode+0x84>

		case _DEF_OUTPUT:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 800121e:	2301      	movs	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
			break;
 8001226:	e009      	b.n	800123c <gpioPinMode+0x84>

		case _DEF_OUTPUT_PULLUP:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 8001228:	2301      	movs	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLUP;
 800122c:	2301      	movs	r3, #1
 800122e:	613b      	str	r3, [r7, #16]
			break;
 8001230:	e004      	b.n	800123c <gpioPinMode+0x84>

		case _DEF_OUTPUT_PULLDWON:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 8001232:	2301      	movs	r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001236:	2302      	movs	r3, #2
 8001238:	613b      	str	r3, [r7, #16]
			break;
 800123a:	bf00      	nop
	  }


	GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 800123c:	79fa      	ldrb	r2, [r7, #7]
 800123e:	490e      	ldr	r1, [pc, #56]	; (8001278 <gpioPinMode+0xc0>)
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	3304      	adds	r3, #4
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8001250:	79fa      	ldrb	r2, [r7, #7]
 8001252:	4909      	ldr	r1, [pc, #36]	; (8001278 <gpioPinMode+0xc0>)
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f107 0208 	add.w	r2, r7, #8
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f005 fdde 	bl	8006e28 <HAL_GPIO_Init>


	return ret;
 800126c:	7ffb      	ldrb	r3, [r7, #31]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000008 	.word	0x20000008

0800127c <gpioPinWrite>:


void gpioPinWrite(uint8_t ch, bool value)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	460a      	mov	r2, r1
 8001286:	71fb      	strb	r3, [r7, #7]
 8001288:	4613      	mov	r3, r2
 800128a:	71bb      	strb	r3, [r7, #6]
	if( ch >= GPIO_MAX_CH)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d140      	bne.n	8001314 <gpioPinWrite+0x98>
	{
		return ;
	}

	if (value == true)
 8001292:	79bb      	ldrb	r3, [r7, #6]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d01e      	beq.n	80012d6 <gpioPinWrite+0x5a>
	{
		  HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8001298:	79fa      	ldrb	r2, [r7, #7]
 800129a:	4920      	ldr	r1, [pc, #128]	; (800131c <gpioPinWrite+0xa0>)
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	440b      	add	r3, r1
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	79fa      	ldrb	r2, [r7, #7]
 80012aa:	491c      	ldr	r1, [pc, #112]	; (800131c <gpioPinWrite+0xa0>)
 80012ac:	4613      	mov	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	3304      	adds	r3, #4
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	b299      	uxth	r1, r3
 80012bc:	79fa      	ldrb	r2, [r7, #7]
 80012be:	4c17      	ldr	r4, [pc, #92]	; (800131c <gpioPinWrite+0xa0>)
 80012c0:	4613      	mov	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4423      	add	r3, r4
 80012ca:	3309      	adds	r3, #9
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	f006 f82a 	bl	8007328 <HAL_GPIO_WritePin>
 80012d4:	e01f      	b.n	8001316 <gpioPinWrite+0x9a>
	}
	else
	{
		  HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 80012d6:	79fa      	ldrb	r2, [r7, #7]
 80012d8:	4910      	ldr	r1, [pc, #64]	; (800131c <gpioPinWrite+0xa0>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	79fa      	ldrb	r2, [r7, #7]
 80012e8:	490c      	ldr	r1, [pc, #48]	; (800131c <gpioPinWrite+0xa0>)
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	3304      	adds	r3, #4
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	b299      	uxth	r1, r3
 80012fa:	79fa      	ldrb	r2, [r7, #7]
 80012fc:	4c07      	ldr	r4, [pc, #28]	; (800131c <gpioPinWrite+0xa0>)
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4423      	add	r3, r4
 8001308:	330a      	adds	r3, #10
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	f006 f80b 	bl	8007328 <HAL_GPIO_WritePin>
 8001312:	e000      	b.n	8001316 <gpioPinWrite+0x9a>
		return ;
 8001314:	bf00      	nop
	}

}
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	bd90      	pop	{r4, r7, pc}
 800131c:	20000008 	.word	0x20000008

08001320 <gpioPinRead>:


bool gpioPinRead(uint8_t ch)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]

	bool ret = false;
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]

	if( ch >= GPIO_MAX_CH)
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <gpioPinRead+0x18>
	{
		return false;
 8001334:	2300      	movs	r3, #0
 8001336:	e024      	b.n	8001382 <gpioPinRead+0x62>
	}

	if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	4914      	ldr	r1, [pc, #80]	; (800138c <gpioPinRead+0x6c>)
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	79fa      	ldrb	r2, [r7, #7]
 800134a:	4910      	ldr	r1, [pc, #64]	; (800138c <gpioPinRead+0x6c>)
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	3304      	adds	r3, #4
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4619      	mov	r1, r3
 800135e:	f005 ffcb 	bl	80072f8 <HAL_GPIO_ReadPin>
 8001362:	4603      	mov	r3, r0
 8001364:	4618      	mov	r0, r3
 8001366:	79fa      	ldrb	r2, [r7, #7]
 8001368:	4908      	ldr	r1, [pc, #32]	; (800138c <gpioPinRead+0x6c>)
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	3309      	adds	r3, #9
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4298      	cmp	r0, r3
 800137a:	d101      	bne.n	8001380 <gpioPinRead+0x60>
	{
		ret = true;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8001380:	7bfb      	ldrb	r3, [r7, #15]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008

08001390 <ledInit>:




bool ledInit(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
  bool ret = true;
 8001396:	2301      	movs	r3, #1
 8001398:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <ledInit+0x84>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	4a18      	ldr	r2, [pc, #96]	; (8001414 <ledInit+0x84>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	6313      	str	r3, [r2, #48]	; 0x30
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <ledInit+0x84>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	e016      	b.n	8001404 <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80013d6:	4a10      	ldr	r2, [pc, #64]	; (8001418 <ledInit+0x88>)
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	4413      	add	r3, r2
 80013de:	889b      	ldrh	r3, [r3, #4]
 80013e0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80013e2:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <ledInit+0x88>)
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80013ea:	1d3a      	adds	r2, r7, #4
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f005 fd1a 	bl	8006e28 <HAL_GPIO_Init>

    ledOff(i);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 f80f 	bl	800141c <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3301      	adds	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	2b00      	cmp	r3, #0
 8001408:	dde5      	ble.n	80013d6 <ledInit+0x46>
  }
  return ret;
 800140a:	7efb      	ldrb	r3, [r7, #27]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800
 8001418:	20000014 	.word	0x20000014

0800141c <ledOff>:
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}


void ledOff(uint8_t ch)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d111      	bne.n	8001450 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <ledOff+0x3c>)
 8001430:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	4a08      	ldr	r2, [pc, #32]	; (8001458 <ledOff+0x3c>)
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4413      	add	r3, r2
 800143c:	8899      	ldrh	r1, [r3, #4]
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	4a05      	ldr	r2, [pc, #20]	; (8001458 <ledOff+0x3c>)
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4413      	add	r3, r2
 8001446:	79db      	ldrb	r3, [r3, #7]
 8001448:	461a      	mov	r2, r3
 800144a:	f005 ff6d 	bl	8007328 <HAL_GPIO_WritePin>
 800144e:	e000      	b.n	8001452 <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8001450:	bf00      	nop
}
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000014 	.word	0x20000014

0800145c <sdInit>:




bool sdInit(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	bool ret 			 		 = false;
 8001462:	2300      	movs	r3, #0
 8001464:	71fb      	strb	r3, [r7, #7]
	hsd.Instance 		 		 = SDIO;
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <sdInit+0x84>)
 8001468:	4a1e      	ldr	r2, [pc, #120]	; (80014e4 <sdInit+0x88>)
 800146a:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge   		 = SDIO_CLOCK_EDGE_RISING;
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <sdInit+0x84>)
 800146e:	2200      	movs	r2, #0
 8001470:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass 		 = SDIO_CLOCK_BYPASS_DISABLE;
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <sdInit+0x84>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave 	 = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <sdInit+0x84>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide	     	 = SDIO_BUS_WIDE_1B;
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <sdInit+0x84>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <sdInit+0x84>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv 			 = SDIO_TRANSFER_CLK_DIV;
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <sdInit+0x84>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]

	is_detected = false;
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <sdInit+0x8c>)
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
	if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff ff42 	bl	8001320 <gpioPinRead>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <sdInit+0x4c>
	{
	   is_detected = true;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <sdInit+0x8c>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
	}

	if(is_detected == true)
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <sdInit+0x8c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00f      	beq.n	80014d0 <sdInit+0x74>
	{
		if (HAL_SD_Init(&hsd) == HAL_OK)
 80014b0:	480b      	ldr	r0, [pc, #44]	; (80014e0 <sdInit+0x84>)
 80014b2:	f006 fb9b 	bl	8007bec <HAL_SD_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d109      	bne.n	80014d0 <sdInit+0x74>
		{
			if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 80014bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c0:	4807      	ldr	r0, [pc, #28]	; (80014e0 <sdInit+0x84>)
 80014c2:	f007 f973 	bl	80087ac <HAL_SD_ConfigWideBusOperation>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <sdInit+0x74>
			{
			   ret = true;
 80014cc:	2301      	movs	r3, #1
 80014ce:	71fb      	strb	r3, [r7, #7]
			}
		}
	}

	is_init = ret;
 80014d0:	4a06      	ldr	r2, [pc, #24]	; (80014ec <sdInit+0x90>)
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	7013      	strb	r3, [r2, #0]


	return ret;
 80014d6:	79fb      	ldrb	r3, [r7, #7]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000600 	.word	0x20000600
 80014e4:	40012c00 	.word	0x40012c00
 80014e8:	200000aa 	.word	0x200000aa
 80014ec:	200000a9 	.word	0x200000a9

080014f0 <sdIsInit>:
}



bool sdIsInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return is_init;
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <sdIsInit+0x14>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	200000a9 	.word	0x200000a9

08001508 <sdIsDetected>:



bool sdIsDetected(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 800150c:	2000      	movs	r0, #0
 800150e:	f7ff ff07 	bl	8001320 <gpioPinRead>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <sdIsDetected+0x18>
  {
    is_detected = true;
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <sdIsDetected+0x28>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	e002      	b.n	8001526 <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <sdIsDetected+0x28>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 8001526:	4b02      	ldr	r3, [pc, #8]	; (8001530 <sdIsDetected+0x28>)
 8001528:	781b      	ldrb	r3, [r3, #0]
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200000aa 	.word	0x200000aa

08001534 <sdGetInfo>:




bool sdGetInfo(sd_info_t *p_info)
{
 8001534:	b5b0      	push	{r4, r5, r7, lr}
 8001536:	b08c      	sub	sp, #48	; 0x30
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  bool ret = false;
 800153c:	2300      	movs	r3, #0
 800153e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 8001546:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <sdGetInfo+0xa4>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d03e      	beq.n	80015cc <sdGetInfo+0x98>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	4619      	mov	r1, r3
 8001554:	4821      	ldr	r0, [pc, #132]	; (80015dc <sdGetInfo+0xa8>)
 8001556:	f007 f8fd 	bl	8008754 <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155e:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001564:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156a:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001570:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001576:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 8001578:	69fa      	ldr	r2, [r7, #28]
 800157a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157c:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 800157e:	6a3a      	ldr	r2, [r7, #32]
 8001580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001582:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 8001584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001588:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          = (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 800158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	4618      	mov	r0, r3
 8001590:	f04f 0100 	mov.w	r1, #0
 8001594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	461a      	mov	r2, r3
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	fb02 f501 	mul.w	r5, r2, r1
 80015a2:	fb00 f403 	mul.w	r4, r0, r3
 80015a6:	442c      	add	r4, r5
 80015a8:	fba0 2302 	umull	r2, r3, r0, r2
 80015ac:	18e1      	adds	r1, r4, r3
 80015ae:	460b      	mov	r3, r1
 80015b0:	f04f 0000 	mov.w	r0, #0
 80015b4:	f04f 0100 	mov.w	r1, #0
 80015b8:	0d10      	lsrs	r0, r2, #20
 80015ba:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
 80015be:	0d19      	lsrs	r1, r3, #20
 80015c0:	4602      	mov	r2, r0
 80015c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c4:	621a      	str	r2, [r3, #32]
    ret = true;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 80015cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3730      	adds	r7, #48	; 0x30
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bdb0      	pop	{r4, r5, r7, pc}
 80015d8:	200000a9 	.word	0x200000a9
 80015dc:	20000600 	.word	0x20000600

080015e0 <sdIsBusy>:


bool sdIsBusy(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 80015e6:	4808      	ldr	r0, [pc, #32]	; (8001608 <sdIsBusy+0x28>)
 80015e8:	f007 f97a 	bl	80088e0 <HAL_SD_GetCardState>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d102      	bne.n	80015f8 <sdIsBusy+0x18>
  {
    is_busy = false;
 80015f2:	2300      	movs	r3, #0
 80015f4:	71fb      	strb	r3, [r7, #7]
 80015f6:	e001      	b.n	80015fc <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 80015f8:	2301      	movs	r3, #1
 80015fa:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 80015fc:	79fb      	ldrb	r3, [r7, #7]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000600 	.word	0x20000600

0800160c <sdIsReady>:



bool sdIsReady(uint32_t timeout)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t pre_time;

  pre_time = millis();
 8001614:	f7ff fa84 	bl	8000b20 <millis>
 8001618:	60f8      	str	r0, [r7, #12]

  while(millis() - pre_time < timeout)
 800161a:	e009      	b.n	8001630 <sdIsReady+0x24>
  {
    if (sdIsBusy() == false)
 800161c:	f7ff ffe0 	bl	80015e0 <sdIsBusy>
 8001620:	4603      	mov	r3, r0
 8001622:	f083 0301 	eor.w	r3, r3, #1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <sdIsReady+0x24>
    {
      return true;
 800162c:	2301      	movs	r3, #1
 800162e:	e008      	b.n	8001642 <sdIsReady+0x36>
  while(millis() - pre_time < timeout)
 8001630:	f7ff fa76 	bl	8000b20 <millis>
 8001634:	4602      	mov	r2, r0
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	d8ed      	bhi.n	800161c <sdIsReady+0x10>
    }
  }

  return false;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <sdReadBlocks>:



bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	603b      	str	r3, [r7, #0]
  bool ret = false;
 800165a:	2300      	movs	r3, #0
 800165c:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <sdReadBlocks+0x8c>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	481c      	ldr	r0, [pc, #112]	; (80016dc <sdReadBlocks+0x90>)
 800166c:	f006 fb6c 	bl	8007d48 <HAL_SD_ReadBlocks_DMA>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d12a      	bne.n	80016cc <sdReadBlocks+0x80>
  {

    pre_time = millis();
 8001676:	f7ff fa53 	bl	8000b20 <millis>
 800167a:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 800167c:	e007      	b.n	800168e <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 800167e:	f7ff fa4f 	bl	8000b20 <millis>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d908      	bls.n	80016a0 <sdReadBlocks+0x54>
    while(is_rx_done == false)
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <sdReadBlocks+0x8c>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f083 0301 	eor.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1ef      	bne.n	800167e <sdReadBlocks+0x32>
 800169e:	e00d      	b.n	80016bc <sdReadBlocks+0x70>
      {
        break;
 80016a0:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 80016a2:	e00b      	b.n	80016bc <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 80016a4:	f7ff fa3c 	bl	8000b20 <millis>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d803      	bhi.n	80016bc <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <sdReadBlocks+0x8c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
        break;
 80016ba:	e004      	b.n	80016c6 <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 80016bc:	f7ff ff90 	bl	80015e0 <sdIsBusy>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1ee      	bne.n	80016a4 <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <sdReadBlocks+0x8c>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200000ab 	.word	0x200000ab
 80016dc:	20000600 	.word	0x20000600

080016e0 <HAL_SD_RxCpltCallback>:


void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <HAL_SD_RxCpltCallback+0x1c>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	200000ab 	.word	0x200000ab

08001700 <HAL_SD_TxCpltCallback>:


void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <HAL_SD_TxCpltCallback+0x1c>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	200000ac 	.word	0x200000ac

08001720 <sdWriteBlocks>:


bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	603b      	str	r3, [r7, #0]
  bool ret = false;
 800172e:	2300      	movs	r3, #0
 8001730:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_tx_done = false;
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <sdWriteBlocks+0x8c>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	481c      	ldr	r0, [pc, #112]	; (80017b0 <sdWriteBlocks+0x90>)
 8001740:	f006 fbe4 	bl	8007f0c <HAL_SD_WriteBlocks_DMA>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d12a      	bne.n	80017a0 <sdWriteBlocks+0x80>
  {
    pre_time = millis();
 800174a:	f7ff f9e9 	bl	8000b20 <millis>
 800174e:	6138      	str	r0, [r7, #16]
    while(is_tx_done == false)
 8001750:	e007      	b.n	8001762 <sdWriteBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 8001752:	f7ff f9e5 	bl	8000b20 <millis>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d908      	bls.n	8001774 <sdWriteBlocks+0x54>
    while(is_tx_done == false)
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <sdWriteBlocks+0x8c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f083 0301 	eor.w	r3, r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1ef      	bne.n	8001752 <sdWriteBlocks+0x32>
 8001772:	e00d      	b.n	8001790 <sdWriteBlocks+0x70>
      {
        break;
 8001774:	bf00      	nop
      }
    }

    while(sdIsBusy() == true)
 8001776:	e00b      	b.n	8001790 <sdWriteBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 8001778:	f7ff f9d2 	bl	8000b20 <millis>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d803      	bhi.n	8001790 <sdWriteBlocks+0x70>
      {
        is_tx_done = false;
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <sdWriteBlocks+0x8c>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
        break;
 800178e:	e004      	b.n	800179a <sdWriteBlocks+0x7a>
    while(sdIsBusy() == true)
 8001790:	f7ff ff26 	bl	80015e0 <sdIsBusy>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1ee      	bne.n	8001778 <sdWriteBlocks+0x58>
      }
    }
    ret = is_tx_done;
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <sdWriteBlocks+0x8c>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200000ac 	.word	0x200000ac
 80017b0:	20000600 	.word	0x20000600

080017b4 <HAL_SD_MspInit>:
  return ret;
}


void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	; 0x30
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a77      	ldr	r2, [pc, #476]	; (80019b0 <HAL_SD_MspInit+0x1fc>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	f040 80e8 	bne.w	80019a8 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
 80017dc:	4b75      	ldr	r3, [pc, #468]	; (80019b4 <HAL_SD_MspInit+0x200>)
 80017de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e0:	4a74      	ldr	r2, [pc, #464]	; (80019b4 <HAL_SD_MspInit+0x200>)
 80017e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017e6:	6313      	str	r3, [r2, #48]	; 0x30
 80017e8:	4b72      	ldr	r3, [pc, #456]	; (80019b4 <HAL_SD_MspInit+0x200>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	69bb      	ldr	r3, [r7, #24]

 /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	4b6e      	ldr	r3, [pc, #440]	; (80019b4 <HAL_SD_MspInit+0x200>)
 80017fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fc:	4a6d      	ldr	r2, [pc, #436]	; (80019b4 <HAL_SD_MspInit+0x200>)
 80017fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001802:	6453      	str	r3, [r2, #68]	; 0x44
 8001804:	4b6b      	ldr	r3, [pc, #428]	; (80019b4 <HAL_SD_MspInit+0x200>)
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	4b67      	ldr	r3, [pc, #412]	; (80019b4 <HAL_SD_MspInit+0x200>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4a66      	ldr	r2, [pc, #408]	; (80019b4 <HAL_SD_MspInit+0x200>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6313      	str	r3, [r2, #48]	; 0x30
 8001820:	4b64      	ldr	r3, [pc, #400]	; (80019b4 <HAL_SD_MspInit+0x200>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	4b60      	ldr	r3, [pc, #384]	; (80019b4 <HAL_SD_MspInit+0x200>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4a5f      	ldr	r2, [pc, #380]	; (80019b4 <HAL_SD_MspInit+0x200>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	6313      	str	r3, [r2, #48]	; 0x30
 800183c:	4b5d      	ldr	r3, [pc, #372]	; (80019b4 <HAL_SD_MspInit+0x200>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001848:	f44f 7350 	mov.w	r3, #832	; 0x340
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001852:	2301      	movs	r3, #1
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800185a:	230c      	movs	r3, #12
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	4854      	ldr	r0, [pc, #336]	; (80019b8 <HAL_SD_MspInit+0x204>)
 8001866:	f005 fadf 	bl	8006e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 800186a:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800186e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001874:	2301      	movs	r3, #1
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800187c:	230c      	movs	r3, #12
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	4619      	mov	r1, r3
 8001886:	484d      	ldr	r0, [pc, #308]	; (80019bc <HAL_SD_MspInit+0x208>)
 8001888:	f005 face 	bl	8006e28 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800188c:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <HAL_SD_MspInit+0x20c>)
 800188e:	4a4d      	ldr	r2, [pc, #308]	; (80019c4 <HAL_SD_MspInit+0x210>)
 8001890:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001892:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <HAL_SD_MspInit+0x20c>)
 8001894:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001898:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800189a:	4b49      	ldr	r3, [pc, #292]	; (80019c0 <HAL_SD_MspInit+0x20c>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a0:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <HAL_SD_MspInit+0x20c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018a6:	4b46      	ldr	r3, [pc, #280]	; (80019c0 <HAL_SD_MspInit+0x20c>)
 80018a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ac:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018ae:	4b44      	ldr	r3, [pc, #272]	; (80019c0 <HAL_SD_MspInit+0x20c>)
 80018b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018b4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018b6:	4b42      	ldr	r3, [pc, #264]	; (80019c0 <HAL_SD_MspInit+0x20c>)
 80018b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018bc:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80018be:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <HAL_SD_MspInit+0x20c>)
 80018c0:	2220      	movs	r2, #32
 80018c2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018c4:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <HAL_SD_MspInit+0x20c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018ca:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <HAL_SD_MspInit+0x20c>)
 80018cc:	2204      	movs	r2, #4
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018d0:	4b3b      	ldr	r3, [pc, #236]	; (80019c0 <HAL_SD_MspInit+0x20c>)
 80018d2:	2203      	movs	r2, #3
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80018d6:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <HAL_SD_MspInit+0x20c>)
 80018d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <HAL_SD_MspInit+0x20c>)
 80018e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80018e6:	4836      	ldr	r0, [pc, #216]	; (80019c0 <HAL_SD_MspInit+0x20c>)
 80018e8:	f004 fe32 	bl	8006550 <HAL_DMA_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 80018f2:	f7ff f985 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a31      	ldr	r2, [pc, #196]	; (80019c0 <HAL_SD_MspInit+0x20c>)
 80018fa:	641a      	str	r2, [r3, #64]	; 0x40
 80018fc:	4a30      	ldr	r2, [pc, #192]	; (80019c0 <HAL_SD_MspInit+0x20c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001902:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <HAL_SD_MspInit+0x214>)
 8001904:	4a31      	ldr	r2, [pc, #196]	; (80019cc <HAL_SD_MspInit+0x218>)
 8001906:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001908:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <HAL_SD_MspInit+0x214>)
 800190a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800190e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001910:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <HAL_SD_MspInit+0x214>)
 8001912:	2240      	movs	r2, #64	; 0x40
 8001914:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001916:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <HAL_SD_MspInit+0x214>)
 8001918:	2200      	movs	r2, #0
 800191a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800191c:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_SD_MspInit+0x214>)
 800191e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001922:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <HAL_SD_MspInit+0x214>)
 8001926:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800192a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800192c:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <HAL_SD_MspInit+0x214>)
 800192e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001932:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <HAL_SD_MspInit+0x214>)
 8001936:	2220      	movs	r2, #32
 8001938:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800193a:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_SD_MspInit+0x214>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_SD_MspInit+0x214>)
 8001942:	2204      	movs	r2, #4
 8001944:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_SD_MspInit+0x214>)
 8001948:	2203      	movs	r2, #3
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800194c:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <HAL_SD_MspInit+0x214>)
 800194e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001952:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <HAL_SD_MspInit+0x214>)
 8001956:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800195a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800195c:	481a      	ldr	r0, [pc, #104]	; (80019c8 <HAL_SD_MspInit+0x214>)
 800195e:	f004 fdf7 	bl	8006550 <HAL_DMA_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 8001968:	f7ff f94a 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <HAL_SD_MspInit+0x214>)
 8001970:	63da      	str	r2, [r3, #60]	; 0x3c
 8001972:	4a15      	ldr	r2, [pc, #84]	; (80019c8 <HAL_SD_MspInit+0x214>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	2105      	movs	r1, #5
 800197c:	2031      	movs	r0, #49	; 0x31
 800197e:	f004 fda2 	bl	80064c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001982:	2031      	movs	r0, #49	; 0x31
 8001984:	f004 fdbb 	bl	80064fe <HAL_NVIC_EnableIRQ>
   /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2105      	movs	r1, #5
 800198c:	203b      	movs	r0, #59	; 0x3b
 800198e:	f004 fd9a 	bl	80064c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001992:	203b      	movs	r0, #59	; 0x3b
 8001994:	f004 fdb3 	bl	80064fe <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2105      	movs	r1, #5
 800199c:	2045      	movs	r0, #69	; 0x45
 800199e:	f004 fd92 	bl	80064c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80019a2:	2045      	movs	r0, #69	; 0x45
 80019a4:	f004 fdab 	bl	80064fe <HAL_NVIC_EnableIRQ>
  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80019a8:	bf00      	nop
 80019aa:	3730      	adds	r7, #48	; 0x30
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40012c00 	.word	0x40012c00
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020000 	.word	0x40020000
 80019bc:	40020400 	.word	0x40020400
 80019c0:	20000540 	.word	0x20000540
 80019c4:	40026458 	.word	0x40026458
 80019c8:	200005a0 	.word	0x200005a0
 80019cc:	400264a0 	.word	0x400264a0

080019d0 <uartInit>:




bool uartInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
  for (int i = 0; i < UART_MAX_CH; i++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	e007      	b.n	80019ec <uartInit+0x1c>
  {
    is_open[i] = false;
 80019dc:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <uartInit+0x30>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < UART_MAX_CH; i++)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3301      	adds	r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	ddf4      	ble.n	80019dc <uartInit+0xc>
  }

  return true;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	200000b0 	.word	0x200000b0

08001a04 <uartOpen>:


bool uartOpen(uint8_t ch, uint32_t baud)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001a10:	2300      	movs	r3, #0
 8001a12:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <uartOpen+0x1c>
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d078      	beq.n	8001b10 <uartOpen+0x10c>
 8001a1e:	e0ef      	b.n	8001c00 <uartOpen+0x1fc>
  {
    /* UART1 */
    case _DEF_UART1:
      huart1.Instance             = USART1;
 8001a20:	4b7a      	ldr	r3, [pc, #488]	; (8001c0c <uartOpen+0x208>)
 8001a22:	4a7b      	ldr	r2, [pc, #492]	; (8001c10 <uartOpen+0x20c>)
 8001a24:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate        = baud;
 8001a26:	4a79      	ldr	r2, [pc, #484]	; (8001c0c <uartOpen+0x208>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength      = UART_WORDLENGTH_8B;
 8001a2c:	4b77      	ldr	r3, [pc, #476]	; (8001c0c <uartOpen+0x208>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits        = UART_STOPBITS_1;
 8001a32:	4b76      	ldr	r3, [pc, #472]	; (8001c0c <uartOpen+0x208>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity          = UART_PARITY_NONE;
 8001a38:	4b74      	ldr	r3, [pc, #464]	; (8001c0c <uartOpen+0x208>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode            = UART_MODE_TX_RX;
 8001a3e:	4b73      	ldr	r3, [pc, #460]	; (8001c0c <uartOpen+0x208>)
 8001a40:	220c      	movs	r2, #12
 8001a42:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl       = UART_HWCONTROL_NONE;
 8001a44:	4b71      	ldr	r3, [pc, #452]	; (8001c0c <uartOpen+0x208>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling    = UART_OVERSAMPLING_16;
 8001a4a:	4b70      	ldr	r3, [pc, #448]	; (8001c0c <uartOpen+0x208>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8001a50:	486e      	ldr	r0, [pc, #440]	; (8001c0c <uartOpen+0x208>)
 8001a52:	f007 fc51 	bl	80092f8 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	4a6e      	ldr	r2, [pc, #440]	; (8001c14 <uartOpen+0x210>)
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a62:	496d      	ldr	r1, [pc, #436]	; (8001c18 <uartOpen+0x214>)
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff f9d0 	bl	8000e0a <qbufferCreate>

      __HAL_RCC_DMA2_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b6b      	ldr	r3, [pc, #428]	; (8001c1c <uartOpen+0x218>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a6a      	ldr	r2, [pc, #424]	; (8001c1c <uartOpen+0x218>)
 8001a74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b68      	ldr	r3, [pc, #416]	; (8001c1c <uartOpen+0x218>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]

      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0); //RX DMA
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	203a      	movs	r0, #58	; 0x3a
 8001a8c:	f004 fd1b 	bl	80064c6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a90:	203a      	movs	r0, #58	; 0x3a
 8001a92:	f004 fd34 	bl	80064fe <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a96:	485d      	ldr	r0, [pc, #372]	; (8001c0c <uartOpen+0x208>)
 8001a98:	f007 fbe1 	bl	800925e <HAL_UART_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <uartOpen+0xa4>
      {
        ret = false;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]

        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0); //TX DMA
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
      }

      break;
 8001aa6:	e0ab      	b.n	8001c00 <uartOpen+0x1fc>
        ret = true;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	4a5c      	ldr	r2, [pc, #368]	; (8001c20 <uartOpen+0x21c>)
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	54d1      	strb	r1, [r2, r3]
        if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8001ab4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ab8:	4957      	ldr	r1, [pc, #348]	; (8001c18 <uartOpen+0x214>)
 8001aba:	4854      	ldr	r0, [pc, #336]	; (8001c0c <uartOpen+0x208>)
 8001abc:	f007 fcca 	bl	8009454 <HAL_UART_Receive_DMA>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <uartOpen+0xc6>
          ret = false;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	4a51      	ldr	r2, [pc, #324]	; (8001c14 <uartOpen+0x210>)
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3308      	adds	r3, #8
 8001ad4:	6819      	ldr	r1, [r3, #0]
 8001ad6:	4b53      	ldr	r3, [pc, #332]	; (8001c24 <uartOpen+0x220>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	1a8a      	subs	r2, r1, r2
 8001ae0:	494c      	ldr	r1, [pc, #304]	; (8001c14 <uartOpen+0x210>)
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	440b      	add	r3, r1
 8001ae6:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8001ae8:	79fa      	ldrb	r2, [r7, #7]
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	4949      	ldr	r1, [pc, #292]	; (8001c14 <uartOpen+0x210>)
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	440a      	add	r2, r1
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	4947      	ldr	r1, [pc, #284]	; (8001c14 <uartOpen+0x210>)
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	440b      	add	r3, r1
 8001afa:	3304      	adds	r3, #4
 8001afc:	601a      	str	r2, [r3, #0]
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0); //TX DMA
 8001afe:	2200      	movs	r2, #0
 8001b00:	2100      	movs	r1, #0
 8001b02:	2046      	movs	r0, #70	; 0x46
 8001b04:	f004 fcdf 	bl	80064c6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001b08:	2046      	movs	r0, #70	; 0x46
 8001b0a:	f004 fcf8 	bl	80064fe <HAL_NVIC_EnableIRQ>
      break;
 8001b0e:	e077      	b.n	8001c00 <uartOpen+0x1fc>


    /* UART2 */
    case _DEF_UART2:
    	  huart2.Instance = USART2;
 8001b10:	4b45      	ldr	r3, [pc, #276]	; (8001c28 <uartOpen+0x224>)
 8001b12:	4a46      	ldr	r2, [pc, #280]	; (8001c2c <uartOpen+0x228>)
 8001b14:	601a      	str	r2, [r3, #0]
    	  huart2.Init.BaudRate = baud;
 8001b16:	4a44      	ldr	r2, [pc, #272]	; (8001c28 <uartOpen+0x224>)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6053      	str	r3, [r2, #4]
    	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1c:	4b42      	ldr	r3, [pc, #264]	; (8001c28 <uartOpen+0x224>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
    	  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b22:	4b41      	ldr	r3, [pc, #260]	; (8001c28 <uartOpen+0x224>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
    	  huart2.Init.Parity = UART_PARITY_NONE;
 8001b28:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <uartOpen+0x224>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
    	  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b2e:	4b3e      	ldr	r3, [pc, #248]	; (8001c28 <uartOpen+0x224>)
 8001b30:	220c      	movs	r2, #12
 8001b32:	615a      	str	r2, [r3, #20]
    	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b34:	4b3c      	ldr	r3, [pc, #240]	; (8001c28 <uartOpen+0x224>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
    	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <uartOpen+0x224>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	61da      	str	r2, [r3, #28]

          HAL_UART_DeInit(&huart2);
 8001b40:	4839      	ldr	r0, [pc, #228]	; (8001c28 <uartOpen+0x224>)
 8001b42:	f007 fbd9 	bl	80092f8 <HAL_UART_DeInit>

          qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	4a32      	ldr	r2, [pc, #200]	; (8001c14 <uartOpen+0x210>)
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b52:	4931      	ldr	r1, [pc, #196]	; (8001c18 <uartOpen+0x214>)
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff f958 	bl	8000e0a <qbufferCreate>

          __HAL_RCC_DMA2_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <uartOpen+0x218>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a2e      	ldr	r2, [pc, #184]	; (8001c1c <uartOpen+0x218>)
 8001b64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <uartOpen+0x218>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]

          HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0); //RX DMA
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	203a      	movs	r0, #58	; 0x3a
 8001b7c:	f004 fca3 	bl	80064c6 <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b80:	203a      	movs	r0, #58	; 0x3a
 8001b82:	f004 fcbc 	bl	80064fe <HAL_NVIC_EnableIRQ>


          if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b86:	4828      	ldr	r0, [pc, #160]	; (8001c28 <uartOpen+0x224>)
 8001b88:	f007 fb69 	bl	800925e <HAL_UART_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <uartOpen+0x194>
          {
            ret = false;
 8001b92:	2300      	movs	r3, #0
 8001b94:	75fb      	strb	r3, [r7, #23]

            HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0); //TX DMA
            HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
          }

          break;
 8001b96:	e032      	b.n	8001bfe <uartOpen+0x1fa>
            ret = true;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	75fb      	strb	r3, [r7, #23]
            is_open[ch] = true;
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	4a20      	ldr	r2, [pc, #128]	; (8001c20 <uartOpen+0x21c>)
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	54d1      	strb	r1, [r2, r3]
            if (HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8001ba4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba8:	491b      	ldr	r1, [pc, #108]	; (8001c18 <uartOpen+0x214>)
 8001baa:	481f      	ldr	r0, [pc, #124]	; (8001c28 <uartOpen+0x224>)
 8001bac:	f007 fc52 	bl	8009454 <HAL_UART_Receive_DMA>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <uartOpen+0x1b6>
              ret = false;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	75fb      	strb	r3, [r7, #23]
            qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->NDTR;
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	4a15      	ldr	r2, [pc, #84]	; (8001c14 <uartOpen+0x210>)
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3308      	adds	r3, #8
 8001bc4:	6819      	ldr	r1, [r3, #0]
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <uartOpen+0x22c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	1a8a      	subs	r2, r1, r2
 8001bd0:	4910      	ldr	r1, [pc, #64]	; (8001c14 <uartOpen+0x210>)
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	440b      	add	r3, r1
 8001bd6:	601a      	str	r2, [r3, #0]
            qbuffer[ch].out = qbuffer[ch].in;
 8001bd8:	79fa      	ldrb	r2, [r7, #7]
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	490d      	ldr	r1, [pc, #52]	; (8001c14 <uartOpen+0x210>)
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	440a      	add	r2, r1
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	490b      	ldr	r1, [pc, #44]	; (8001c14 <uartOpen+0x210>)
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	440b      	add	r3, r1
 8001bea:	3304      	adds	r3, #4
 8001bec:	601a      	str	r2, [r3, #0]
            HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0); //TX DMA
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2046      	movs	r0, #70	; 0x46
 8001bf4:	f004 fc67 	bl	80064c6 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001bf8:	2046      	movs	r0, #70	; 0x46
 8001bfa:	f004 fc80 	bl	80064fe <HAL_NVIC_EnableIRQ>
          break;
 8001bfe:	bf00      	nop
  }

  return ret;
 8001c00:	7dfb      	ldrb	r3, [r7, #23]

}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000804 	.word	0x20000804
 8001c10:	40011000 	.word	0x40011000
 8001c14:	200000b4 	.word	0x200000b4
 8001c18:	200000c4 	.word	0x200000c4
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	200000b0 	.word	0x200000b0
 8001c24:	20000744 	.word	0x20000744
 8001c28:	20000848 	.word	0x20000848
 8001c2c:	40004400 	.word	0x40004400
 8001c30:	20000684 	.word	0x20000684

08001c34 <uartAvailable>:



uint32_t uartAvailable(uint8_t ch)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <uartAvailable+0x1a>
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d018      	beq.n	8001c7e <uartAvailable+0x4a>
 8001c4c:	e02f      	b.n	8001cae <uartAvailable+0x7a>
  {
    /* UART1 */
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <uartAvailable+0x84>)
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	4413      	add	r3, r2
 8001c56:	3308      	adds	r3, #8
 8001c58:	6819      	ldr	r1, [r3, #0]
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <uartAvailable+0x88>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	1a8a      	subs	r2, r1, r2
 8001c64:	4914      	ldr	r1, [pc, #80]	; (8001cb8 <uartAvailable+0x84>)
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	440b      	add	r3, r1
 8001c6a:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	4a11      	ldr	r2, [pc, #68]	; (8001cb8 <uartAvailable+0x84>)
 8001c72:	4413      	add	r3, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff f920 	bl	8000eba <qbufferAvailable>
 8001c7a:	60f8      	str	r0, [r7, #12]
      break;
 8001c7c:	e017      	b.n	8001cae <uartAvailable+0x7a>


    /* UART2 */
    case _DEF_UART2:
        qbuffer[ch].in = (qbuffer[ch].len - hdma_usart2_rx.Instance->NDTR);
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <uartAvailable+0x84>)
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	4413      	add	r3, r2
 8001c86:	3308      	adds	r3, #8
 8001c88:	6819      	ldr	r1, [r3, #0]
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <uartAvailable+0x8c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	1a8a      	subs	r2, r1, r2
 8001c94:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <uartAvailable+0x84>)
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	440b      	add	r3, r1
 8001c9a:	601a      	str	r2, [r3, #0]
        ret = qbufferAvailable(&qbuffer[ch]);
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <uartAvailable+0x84>)
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f908 	bl	8000eba <qbufferAvailable>
 8001caa:	60f8      	str	r0, [r7, #12]
        break;
 8001cac:	bf00      	nop

  }

  return ret;
 8001cae:	68fb      	ldr	r3, [r7, #12]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200000b4 	.word	0x200000b4
 8001cbc:	20000744 	.word	0x20000744
 8001cc0:	20000684 	.word	0x20000684

08001cc4 <uartRead>:



uint8_t uartRead(uint8_t ch)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  switch(ch)
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <uartRead+0x16>
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d008      	beq.n	8001cea <uartRead+0x26>
 8001cd8:	e00f      	b.n	8001cfa <uartRead+0x36>
  {
    /* UART1 */
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 8001cda:	f107 030f 	add.w	r3, r7, #15
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4808      	ldr	r0, [pc, #32]	; (8001d04 <uartRead+0x40>)
 8001ce4:	f7ff f8ac 	bl	8000e40 <qbufferRead>
      break;
 8001ce8:	e007      	b.n	8001cfa <uartRead+0x36>


    /* UART2 */
    case _DEF_UART2:
        qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8001cea:	f107 030f 	add.w	r3, r7, #15
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <uartRead+0x44>)
 8001cf4:	f7ff f8a4 	bl	8000e40 <qbufferRead>
        break;
 8001cf8:	bf00      	nop

  }

  return ret;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]

}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	200000b4 	.word	0x200000b4
 8001d08:	200000c4 	.word	0x200000c4

08001d0c <uartWrite>:



uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
  uint32_t pre_time;

  switch(ch)
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <uartWrite+0x1e>
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d034      	beq.n	8001d92 <uartWrite+0x86>
 8001d28:	e067      	b.n	8001dfa <uartWrite+0xee>
  {
  	/* UART1 */
    case _DEF_UART1:
        pre_time = millis();
 8001d2a:	f7fe fef9 	bl	8000b20 <millis>
 8001d2e:	6138      	str	r0, [r7, #16]
        while(millis() - pre_time < 100)
 8001d30:	e025      	b.n	8001d7e <uartWrite+0x72>
        {
          if (huart1.gState == HAL_UART_STATE_READY)
 8001d32:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <uartWrite+0xf8>)
 8001d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b20      	cmp	r3, #32
 8001d3c:	d11f      	bne.n	8001d7e <uartWrite+0x72>
          {

            for (int i = 0; i < length; i++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	e00b      	b.n	8001d5c <uartWrite+0x50>
            {
              tx_buf[i] = p_data[i];
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	4413      	add	r3, r2
 8001d4a:	7819      	ldrb	r1, [r3, #0]
 8001d4c:	4a2e      	ldr	r2, [pc, #184]	; (8001e08 <uartWrite+0xfc>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	4413      	add	r3, r2
 8001d52:	460a      	mov	r2, r1
 8001d54:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < length; i++)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d8ef      	bhi.n	8001d44 <uartWrite+0x38>
            }

            if(HAL_UART_Transmit_DMA(&huart1, &tx_buf[0], length) == HAL_OK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4927      	ldr	r1, [pc, #156]	; (8001e08 <uartWrite+0xfc>)
 8001d6c:	4825      	ldr	r0, [pc, #148]	; (8001e04 <uartWrite+0xf8>)
 8001d6e:	f007 faf3 	bl	8009358 <HAL_UART_Transmit_DMA>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10a      	bne.n	8001d8e <uartWrite+0x82>
            {
              ret = length;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	61fb      	str	r3, [r7, #28]
            }

            break;
 8001d7c:	e007      	b.n	8001d8e <uartWrite+0x82>
        while(millis() - pre_time < 100)
 8001d7e:	f7fe fecf 	bl	8000b20 <millis>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b63      	cmp	r3, #99	; 0x63
 8001d8a:	d9d2      	bls.n	8001d32 <uartWrite+0x26>
          }
        }
      break;
 8001d8c:	e035      	b.n	8001dfa <uartWrite+0xee>
            break;
 8001d8e:	bf00      	nop
      break;
 8001d90:	e033      	b.n	8001dfa <uartWrite+0xee>


    /* UART2 */
    case _DEF_UART2:
        pre_time = millis();
 8001d92:	f7fe fec5 	bl	8000b20 <millis>
 8001d96:	6138      	str	r0, [r7, #16]
        while(millis() - pre_time < 100)
 8001d98:	e025      	b.n	8001de6 <uartWrite+0xda>
        {
          if (huart2.gState == HAL_UART_STATE_READY)
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <uartWrite+0x100>)
 8001d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d11f      	bne.n	8001de6 <uartWrite+0xda>
          {

            for (int i = 0; i < length; i++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e00b      	b.n	8001dc4 <uartWrite+0xb8>
            {
              tx_buf[i] = p_data[i];
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	4413      	add	r3, r2
 8001db2:	7819      	ldrb	r1, [r3, #0]
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <uartWrite+0xfc>)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	4413      	add	r3, r2
 8001dba:	460a      	mov	r2, r1
 8001dbc:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < length; i++)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d8ef      	bhi.n	8001dac <uartWrite+0xa0>
            }

            if(HAL_UART_Transmit_DMA(&huart2, &tx_buf[0], length) == HAL_OK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	490d      	ldr	r1, [pc, #52]	; (8001e08 <uartWrite+0xfc>)
 8001dd4:	480d      	ldr	r0, [pc, #52]	; (8001e0c <uartWrite+0x100>)
 8001dd6:	f007 fabf 	bl	8009358 <HAL_UART_Transmit_DMA>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10a      	bne.n	8001df6 <uartWrite+0xea>
            {
              ret = length;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	61fb      	str	r3, [r7, #28]
            }

            break;
 8001de4:	e007      	b.n	8001df6 <uartWrite+0xea>
        while(millis() - pre_time < 100)
 8001de6:	f7fe fe9b 	bl	8000b20 <millis>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b63      	cmp	r3, #99	; 0x63
 8001df2:	d9d2      	bls.n	8001d9a <uartWrite+0x8e>
          }
        }
      break;
 8001df4:	e000      	b.n	8001df8 <uartWrite+0xec>
            break;
 8001df6:	bf00      	nop
      break;
 8001df8:	bf00      	nop

  }
  return ret;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000804 	.word	0x20000804
 8001e08:	200001c4 	.word	0x200001c4
 8001e0c:	20000848 	.word	0x20000848

08001e10 <uartPrintf>:



uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8001e10:	b40e      	push	{r1, r2, r3}
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b0c7      	sub	sp, #284	; 0x11c
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4602      	mov	r2, r0
 8001e1a:	1dfb      	adds	r3, r7, #7
 8001e1c:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8001e1e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	f107 0010 	add.w	r0, r7, #16
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001e36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e3a:	f009 f93f 	bl	800b0bc <vsniprintf>
 8001e3e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8001e42:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e46:	f107 0110 	add.w	r1, r7, #16
 8001e4a:	1dfb      	adds	r3, r7, #7
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff5c 	bl	8001d0c <uartWrite>
 8001e54:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8001e58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001e62:	46bd      	mov	sp, r7
 8001e64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e68:	b003      	add	sp, #12
 8001e6a:	4770      	bx	lr

08001e6c <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return;
 8001e9c:	bf00      	nop
}
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a4c      	ldr	r2, [pc, #304]	; (8001ff8 <HAL_UART_MspInit+0x150>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	f040 8092 	bne.w	8001ff0 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_UART_MspInit+0x154>)
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed4:	4a49      	ldr	r2, [pc, #292]	; (8001ffc <HAL_UART_MspInit+0x154>)
 8001ed6:	f043 0310 	orr.w	r3, r3, #16
 8001eda:	6453      	str	r3, [r2, #68]	; 0x44
 8001edc:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <HAL_UART_MspInit+0x154>)
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	4b43      	ldr	r3, [pc, #268]	; (8001ffc <HAL_UART_MspInit+0x154>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	4a42      	ldr	r2, [pc, #264]	; (8001ffc <HAL_UART_MspInit+0x154>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef8:	4b40      	ldr	r3, [pc, #256]	; (8001ffc <HAL_UART_MspInit+0x154>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001f04:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f12:	2303      	movs	r3, #3
 8001f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f16:	2307      	movs	r3, #7
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4837      	ldr	r0, [pc, #220]	; (8002000 <HAL_UART_MspInit+0x158>)
 8001f22:	f004 ff81 	bl	8006e28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001f26:	4b37      	ldr	r3, [pc, #220]	; (8002004 <HAL_UART_MspInit+0x15c>)
 8001f28:	4a37      	ldr	r2, [pc, #220]	; (8002008 <HAL_UART_MspInit+0x160>)
 8001f2a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001f2c:	4b35      	ldr	r3, [pc, #212]	; (8002004 <HAL_UART_MspInit+0x15c>)
 8001f2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f32:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f34:	4b33      	ldr	r3, [pc, #204]	; (8002004 <HAL_UART_MspInit+0x15c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3a:	4b32      	ldr	r3, [pc, #200]	; (8002004 <HAL_UART_MspInit+0x15c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f40:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_UART_MspInit+0x15c>)
 8001f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f46:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f48:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <HAL_UART_MspInit+0x15c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_UART_MspInit+0x15c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001f54:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_UART_MspInit+0x15c>)
 8001f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f5a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f5c:	4b29      	ldr	r3, [pc, #164]	; (8002004 <HAL_UART_MspInit+0x15c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f62:	4b28      	ldr	r3, [pc, #160]	; (8002004 <HAL_UART_MspInit+0x15c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f68:	4826      	ldr	r0, [pc, #152]	; (8002004 <HAL_UART_MspInit+0x15c>)
 8001f6a:	f004 faf1 	bl	8006550 <HAL_DMA_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001f74:	f7fe fe44 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a22      	ldr	r2, [pc, #136]	; (8002004 <HAL_UART_MspInit+0x15c>)
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38
 8001f7e:	4a21      	ldr	r2, [pc, #132]	; (8002004 <HAL_UART_MspInit+0x15c>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001f84:	4b21      	ldr	r3, [pc, #132]	; (800200c <HAL_UART_MspInit+0x164>)
 8001f86:	4a22      	ldr	r2, [pc, #136]	; (8002010 <HAL_UART_MspInit+0x168>)
 8001f88:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <HAL_UART_MspInit+0x164>)
 8001f8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f90:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f92:	4b1e      	ldr	r3, [pc, #120]	; (800200c <HAL_UART_MspInit+0x164>)
 8001f94:	2240      	movs	r2, #64	; 0x40
 8001f96:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f98:	4b1c      	ldr	r3, [pc, #112]	; (800200c <HAL_UART_MspInit+0x164>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_UART_MspInit+0x164>)
 8001fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fa4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fa6:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_UART_MspInit+0x164>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_UART_MspInit+0x164>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001fb2:	4b16      	ldr	r3, [pc, #88]	; (800200c <HAL_UART_MspInit+0x164>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <HAL_UART_MspInit+0x164>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <HAL_UART_MspInit+0x164>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001fc4:	4811      	ldr	r0, [pc, #68]	; (800200c <HAL_UART_MspInit+0x164>)
 8001fc6:	f004 fac3 	bl	8006550 <HAL_DMA_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001fd0:	f7fe fe16 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a0d      	ldr	r2, [pc, #52]	; (800200c <HAL_UART_MspInit+0x164>)
 8001fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fda:	4a0c      	ldr	r2, [pc, #48]	; (800200c <HAL_UART_MspInit+0x164>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2025      	movs	r0, #37	; 0x25
 8001fe6:	f004 fa6e 	bl	80064c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fea:	2025      	movs	r0, #37	; 0x25
 8001fec:	f004 fa87 	bl	80064fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3728      	adds	r7, #40	; 0x28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40011000 	.word	0x40011000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020000 	.word	0x40020000
 8002004:	20000744 	.word	0x20000744
 8002008:	40026440 	.word	0x40026440
 800200c:	200006e4 	.word	0x200006e4
 8002010:	400264b8 	.word	0x400264b8

08002014 <HAL_UART_MspDeInit>:


void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <HAL_UART_MspDeInit+0x4c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d117      	bne.n	8002056 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_UART_MspDeInit+0x50>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a0e      	ldr	r2, [pc, #56]	; (8002064 <HAL_UART_MspDeInit+0x50>)
 800202c:	f023 0310 	bic.w	r3, r3, #16
 8002030:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10|GPIO_PIN_15);
 8002032:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8002036:	480c      	ldr	r0, [pc, #48]	; (8002068 <HAL_UART_MspDeInit+0x54>)
 8002038:	f005 f87a 	bl	8007130 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002040:	4618      	mov	r0, r3
 8002042:	f004 fb33 	bl	80066ac <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204a:	4618      	mov	r0, r3
 800204c:	f004 fb2e 	bl	80066ac <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002050:	2025      	movs	r0, #37	; 0x25
 8002052:	f004 fa62 	bl	800651a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40011000 	.word	0x40011000
 8002064:	40023800 	.word	0x40023800
 8002068:	40020000 	.word	0x40020000

0800206c <hwInit>:



//TODO 하드웨어 초기화
void hwInit(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  bspInit();
 8002070:	f7fe fd1e 	bl	8000ab0 <bspInit>

  uartInit();
 8002074:	f7ff fcac 	bl	80019d0 <uartInit>
  ledInit();
 8002078:	f7ff f98a 	bl	8001390 <ledInit>
  gpioInit();
 800207c:	f7ff f85a 	bl	8001134 <gpioInit>

  if (sdInit() == true)
 8002080:	f7ff f9ec 	bl	800145c <sdInit>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <hwInit+0x22>
  {
	 fatfsInit();
 800208a:	f7ff f82f 	bl	80010ec <fatfsInit>
  }

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <disk_status+0x30>)
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	79fa      	ldrb	r2, [r7, #7]
 80020ac:	4905      	ldr	r1, [pc, #20]	; (80020c4 <disk_status+0x30>)
 80020ae:	440a      	add	r2, r1
 80020b0:	7b12      	ldrb	r2, [r2, #12]
 80020b2:	4610      	mov	r0, r2
 80020b4:	4798      	blx	r3
 80020b6:	4603      	mov	r3, r0
 80020b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200002f0 	.word	0x200002f0

080020c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <disk_initialize+0x48>)
 80020da:	5cd3      	ldrb	r3, [r2, r3]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d111      	bne.n	8002104 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <disk_initialize+0x48>)
 80020e4:	2101      	movs	r1, #1
 80020e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	4a09      	ldr	r2, [pc, #36]	; (8002110 <disk_initialize+0x48>)
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	79fa      	ldrb	r2, [r7, #7]
 80020f6:	4906      	ldr	r1, [pc, #24]	; (8002110 <disk_initialize+0x48>)
 80020f8:	440a      	add	r2, r1
 80020fa:	7b12      	ldrb	r2, [r2, #12]
 80020fc:	4610      	mov	r0, r2
 80020fe:	4798      	blx	r3
 8002100:	4603      	mov	r3, r0
 8002102:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200002f0 	.word	0x200002f0

08002114 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	4603      	mov	r3, r0
 8002122:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <disk_read+0x3c>)
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	689c      	ldr	r4, [r3, #8]
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <disk_read+0x3c>)
 8002134:	4413      	add	r3, r2
 8002136:	7b18      	ldrb	r0, [r3, #12]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	47a0      	blx	r4
 8002140:	4603      	mov	r3, r0
 8002142:	75fb      	strb	r3, [r7, #23]
  return res;
 8002144:	7dfb      	ldrb	r3, [r7, #23]
}
 8002146:	4618      	mov	r0, r3
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	bd90      	pop	{r4, r7, pc}
 800214e:	bf00      	nop
 8002150:	200002f0 	.word	0x200002f0

08002154 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	4603      	mov	r3, r0
 8002162:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <disk_write+0x3c>)
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	68dc      	ldr	r4, [r3, #12]
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	4a07      	ldr	r2, [pc, #28]	; (8002190 <disk_write+0x3c>)
 8002174:	4413      	add	r3, r2
 8002176:	7b18      	ldrb	r0, [r3, #12]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	47a0      	blx	r4
 8002180:	4603      	mov	r3, r0
 8002182:	75fb      	strb	r3, [r7, #23]
  return res;
 8002184:	7dfb      	ldrb	r3, [r7, #23]
}
 8002186:	4618      	mov	r0, r3
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}
 800218e:	bf00      	nop
 8002190:	200002f0 	.word	0x200002f0

08002194 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	603a      	str	r2, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
 80021a0:	460b      	mov	r3, r1
 80021a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	4a09      	ldr	r2, [pc, #36]	; (80021cc <disk_ioctl+0x38>)
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	79fa      	ldrb	r2, [r7, #7]
 80021b2:	4906      	ldr	r1, [pc, #24]	; (80021cc <disk_ioctl+0x38>)
 80021b4:	440a      	add	r2, r1
 80021b6:	7b10      	ldrb	r0, [r2, #12]
 80021b8:	79b9      	ldrb	r1, [r7, #6]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	4798      	blx	r3
 80021be:	4603      	mov	r3, r0
 80021c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	200002f0 	.word	0x200002f0

080021d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return 0;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3301      	adds	r3, #1
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80021f0:	89fb      	ldrh	r3, [r7, #14]
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	4313      	orrs	r3, r2
 80021fe:	b21b      	sxth	r3, r3
 8002200:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002202:	89fb      	ldrh	r3, [r7, #14]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3303      	adds	r3, #3
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	3202      	adds	r2, #2
 8002228:	7812      	ldrb	r2, [r2, #0]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	3201      	adds	r2, #1
 8002236:	7812      	ldrb	r2, [r2, #0]
 8002238:	4313      	orrs	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	7812      	ldrb	r2, [r2, #0]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
	return rv;
 8002248:	68fb      	ldr	r3, [r7, #12]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	460b      	mov	r3, r1
 8002260:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	887a      	ldrh	r2, [r7, #2]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	887b      	ldrh	r3, [r7, #2]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	701a      	strb	r2, [r3, #0]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	701a      	strb	r2, [r3, #0]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00d      	beq.n	800231a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	1c53      	adds	r3, r2, #1
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	1c59      	adds	r1, r3, #1
 8002308:	6179      	str	r1, [r7, #20]
 800230a:	7812      	ldrb	r2, [r2, #0]
 800230c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3b01      	subs	r3, #1
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f1      	bne.n	80022fe <mem_cpy+0x1a>
	}
}
 800231a:	bf00      	nop
 800231c:	371c      	adds	r7, #28
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002326:	b480      	push	{r7}
 8002328:	b087      	sub	sp, #28
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	617a      	str	r2, [r7, #20]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3b01      	subs	r3, #1
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f3      	bne.n	8002336 <mem_set+0x10>
}
 800234e:	bf00      	nop
 8002350:	bf00      	nop
 8002352:	371c      	adds	r7, #28
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	61fb      	str	r3, [r7, #28]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	61fa      	str	r2, [r7, #28]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	4619      	mov	r1, r3
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	61ba      	str	r2, [r7, #24]
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	1acb      	subs	r3, r1, r3
 8002388:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3b01      	subs	r3, #1
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <mem_cmp+0x40>
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0eb      	beq.n	8002374 <mem_cmp+0x18>

	return r;
 800239c:	697b      	ldr	r3, [r7, #20]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80023b4:	e002      	b.n	80023bc <chk_chr+0x12>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3301      	adds	r3, #1
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <chk_chr+0x26>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d1f2      	bne.n	80023b6 <chk_chr+0xc>
	return *str;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	781b      	ldrb	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	e029      	b.n	8002448 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80023f4:	4a27      	ldr	r2, [pc, #156]	; (8002494 <chk_lock+0xb4>)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	4413      	add	r3, r2
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d01d      	beq.n	800243e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002402:	4a24      	ldr	r2, [pc, #144]	; (8002494 <chk_lock+0xb4>)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	4413      	add	r3, r2
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d116      	bne.n	8002442 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8002414:	4a1f      	ldr	r2, [pc, #124]	; (8002494 <chk_lock+0xb4>)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	4413      	add	r3, r2
 800241c:	3304      	adds	r3, #4
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002424:	429a      	cmp	r2, r3
 8002426:	d10c      	bne.n	8002442 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002428:	4a1a      	ldr	r2, [pc, #104]	; (8002494 <chk_lock+0xb4>)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	4413      	add	r3, r2
 8002430:	3308      	adds	r3, #8
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8002438:	429a      	cmp	r2, r3
 800243a:	d102      	bne.n	8002442 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800243c:	e007      	b.n	800244e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800243e:	2301      	movs	r3, #1
 8002440:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	3301      	adds	r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d9d2      	bls.n	80023f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d109      	bne.n	8002468 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <chk_lock+0x80>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d101      	bne.n	8002464 <chk_lock+0x84>
 8002460:	2300      	movs	r3, #0
 8002462:	e010      	b.n	8002486 <chk_lock+0xa6>
 8002464:	2312      	movs	r3, #18
 8002466:	e00e      	b.n	8002486 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d108      	bne.n	8002480 <chk_lock+0xa0>
 800246e:	4a09      	ldr	r2, [pc, #36]	; (8002494 <chk_lock+0xb4>)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	4413      	add	r3, r2
 8002476:	330c      	adds	r3, #12
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800247e:	d101      	bne.n	8002484 <chk_lock+0xa4>
 8002480:	2310      	movs	r3, #16
 8002482:	e000      	b.n	8002486 <chk_lock+0xa6>
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	200002d0 	.word	0x200002d0

08002498 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	e002      	b.n	80024aa <enq_lock+0x12>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3301      	adds	r3, #1
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d806      	bhi.n	80024be <enq_lock+0x26>
 80024b0:	4a09      	ldr	r2, [pc, #36]	; (80024d8 <enq_lock+0x40>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	4413      	add	r3, r2
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f2      	bne.n	80024a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	bf14      	ite	ne
 80024c4:	2301      	movne	r3, #1
 80024c6:	2300      	moveq	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	200002d0 	.word	0x200002d0

080024dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	e01f      	b.n	800252c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80024ec:	4a41      	ldr	r2, [pc, #260]	; (80025f4 <inc_lock+0x118>)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	4413      	add	r3, r2
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d113      	bne.n	8002526 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80024fe:	4a3d      	ldr	r2, [pc, #244]	; (80025f4 <inc_lock+0x118>)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	4413      	add	r3, r2
 8002506:	3304      	adds	r3, #4
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800250e:	429a      	cmp	r2, r3
 8002510:	d109      	bne.n	8002526 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8002512:	4a38      	ldr	r2, [pc, #224]	; (80025f4 <inc_lock+0x118>)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	4413      	add	r3, r2
 800251a:	3308      	adds	r3, #8
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8002522:	429a      	cmp	r2, r3
 8002524:	d006      	beq.n	8002534 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	3301      	adds	r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d9dc      	bls.n	80024ec <inc_lock+0x10>
 8002532:	e000      	b.n	8002536 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8002534:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d132      	bne.n	80025a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	e002      	b.n	8002548 <inc_lock+0x6c>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3301      	adds	r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d806      	bhi.n	800255c <inc_lock+0x80>
 800254e:	4a29      	ldr	r2, [pc, #164]	; (80025f4 <inc_lock+0x118>)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	4413      	add	r3, r2
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f2      	bne.n	8002542 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d101      	bne.n	8002566 <inc_lock+0x8a>
 8002562:	2300      	movs	r3, #0
 8002564:	e040      	b.n	80025e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4922      	ldr	r1, [pc, #136]	; (80025f4 <inc_lock+0x118>)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	440b      	add	r3, r1
 8002572:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	491e      	ldr	r1, [pc, #120]	; (80025f4 <inc_lock+0x118>)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	440b      	add	r3, r1
 8002580:	3304      	adds	r3, #4
 8002582:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	491a      	ldr	r1, [pc, #104]	; (80025f4 <inc_lock+0x118>)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	440b      	add	r3, r1
 8002590:	3308      	adds	r3, #8
 8002592:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8002594:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <inc_lock+0x118>)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	4413      	add	r3, r2
 800259c:	330c      	adds	r3, #12
 800259e:	2200      	movs	r2, #0
 80025a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d009      	beq.n	80025bc <inc_lock+0xe0>
 80025a8:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <inc_lock+0x118>)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	4413      	add	r3, r2
 80025b0:	330c      	adds	r3, #12
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <inc_lock+0xe0>
 80025b8:	2300      	movs	r3, #0
 80025ba:	e015      	b.n	80025e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d108      	bne.n	80025d4 <inc_lock+0xf8>
 80025c2:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <inc_lock+0x118>)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	4413      	add	r3, r2
 80025ca:	330c      	adds	r3, #12
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	3301      	adds	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	e001      	b.n	80025d8 <inc_lock+0xfc>
 80025d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d8:	4906      	ldr	r1, [pc, #24]	; (80025f4 <inc_lock+0x118>)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	440b      	add	r3, r1
 80025e0:	330c      	adds	r3, #12
 80025e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	3301      	adds	r3, #1
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	200002d0 	.word	0x200002d0

080025f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d825      	bhi.n	8002658 <dec_lock+0x60>
		n = Files[i].ctr;
 800260c:	4a17      	ldr	r2, [pc, #92]	; (800266c <dec_lock+0x74>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	4413      	add	r3, r2
 8002614:	330c      	adds	r3, #12
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800261a:	89fb      	ldrh	r3, [r7, #14]
 800261c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002620:	d101      	bne.n	8002626 <dec_lock+0x2e>
 8002622:	2300      	movs	r3, #0
 8002624:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8002626:	89fb      	ldrh	r3, [r7, #14]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <dec_lock+0x3a>
 800262c:	89fb      	ldrh	r3, [r7, #14]
 800262e:	3b01      	subs	r3, #1
 8002630:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002632:	4a0e      	ldr	r2, [pc, #56]	; (800266c <dec_lock+0x74>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	4413      	add	r3, r2
 800263a:	330c      	adds	r3, #12
 800263c:	89fa      	ldrh	r2, [r7, #14]
 800263e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002640:	89fb      	ldrh	r3, [r7, #14]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d105      	bne.n	8002652 <dec_lock+0x5a>
 8002646:	4a09      	ldr	r2, [pc, #36]	; (800266c <dec_lock+0x74>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	4413      	add	r3, r2
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	737b      	strb	r3, [r7, #13]
 8002656:	e001      	b.n	800265c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002658:	2302      	movs	r3, #2
 800265a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800265c:	7b7b      	ldrb	r3, [r7, #13]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	200002d0 	.word	0x200002d0

08002670 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	e010      	b.n	80026a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800267e:	4a0d      	ldr	r2, [pc, #52]	; (80026b4 <clear_lock+0x44>)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	4413      	add	r3, r2
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	429a      	cmp	r2, r3
 800268c:	d105      	bne.n	800269a <clear_lock+0x2a>
 800268e:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <clear_lock+0x44>)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	4413      	add	r3, r2
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3301      	adds	r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d9eb      	bls.n	800267e <clear_lock+0xe>
	}
}
 80026a6:	bf00      	nop
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	200002d0 	.word	0x200002d0

080026b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	78db      	ldrb	r3, [r3, #3]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d034      	beq.n	8002736 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	7858      	ldrb	r0, [r3, #1]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80026dc:	2301      	movs	r3, #1
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	f7ff fd38 	bl	8002154 <disk_write>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
 80026ee:	e022      	b.n	8002736 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	1ad2      	subs	r2, r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	429a      	cmp	r2, r3
 8002704:	d217      	bcs.n	8002736 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	789b      	ldrb	r3, [r3, #2]
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	e010      	b.n	8002730 <sync_window+0x78>
					wsect += fs->fsize;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4413      	add	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	7858      	ldrb	r0, [r3, #1]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002722:	2301      	movs	r3, #1
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	f7ff fd15 	bl	8002154 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	3b01      	subs	r3, #1
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d8eb      	bhi.n	800270e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d01b      	beq.n	8002790 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ffad 	bl	80026b8 <sync_window>
 800275e:	4603      	mov	r3, r0
 8002760:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d113      	bne.n	8002790 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7858      	ldrb	r0, [r3, #1]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002772:	2301      	movs	r3, #1
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	f7ff fccd 	bl	8002114 <disk_read>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d004      	beq.n	800278a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
 8002784:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8002790:	7bfb      	ldrb	r3, [r7, #15]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ff87 	bl	80026b8 <sync_window>
 80027aa:	4603      	mov	r3, r0
 80027ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d158      	bne.n	8002866 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d148      	bne.n	800284e <sync_fs+0xb2>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	791b      	ldrb	r3, [r3, #4]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d144      	bne.n	800284e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3334      	adds	r3, #52	; 0x34
 80027c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fda9 	bl	8002326 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3334      	adds	r3, #52	; 0x34
 80027d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80027dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fd38 	bl	8002256 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3334      	adds	r3, #52	; 0x34
 80027ea:	4921      	ldr	r1, [pc, #132]	; (8002870 <sync_fs+0xd4>)
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fd4d 	bl	800228c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3334      	adds	r3, #52	; 0x34
 80027f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80027fa:	491e      	ldr	r1, [pc, #120]	; (8002874 <sync_fs+0xd8>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fd45 	bl	800228c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3334      	adds	r3, #52	; 0x34
 8002806:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	4619      	mov	r1, r3
 8002810:	4610      	mov	r0, r2
 8002812:	f7ff fd3b 	bl	800228c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3334      	adds	r3, #52	; 0x34
 800281a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	4619      	mov	r1, r3
 8002824:	4610      	mov	r0, r2
 8002826:	f7ff fd31 	bl	800228c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7858      	ldrb	r0, [r3, #1]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002842:	2301      	movs	r3, #1
 8002844:	f7ff fc86 	bl	8002154 <disk_write>
			fs->fsi_flag = 0;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	785b      	ldrb	r3, [r3, #1]
 8002852:	2200      	movs	r2, #0
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fc9c 	bl	8002194 <disk_ioctl>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <sync_fs+0xca>
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	41615252 	.word	0x41615252
 8002874:	61417272 	.word	0x61417272

08002878 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	3b02      	subs	r3, #2
 8002886:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	3b02      	subs	r3, #2
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d301      	bcc.n	8002898 <clust2sect+0x20>
 8002894:	2300      	movs	r3, #0
 8002896:	e008      	b.n	80028aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	895b      	ldrh	r3, [r3, #10]
 800289c:	461a      	mov	r2, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	fb03 f202 	mul.w	r2, r3, r2
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	4413      	add	r3, r2
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b086      	sub	sp, #24
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d904      	bls.n	80028d6 <get_fat+0x20>
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d302      	bcc.n	80028dc <get_fat+0x26>
		val = 1;	/* Internal error */
 80028d6:	2301      	movs	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	e08f      	b.n	80029fc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80028dc:	f04f 33ff 	mov.w	r3, #4294967295
 80028e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d062      	beq.n	80029b0 <get_fat+0xfa>
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	dc7c      	bgt.n	80029e8 <get_fat+0x132>
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d002      	beq.n	80028f8 <get_fat+0x42>
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d042      	beq.n	800297c <get_fat+0xc6>
 80028f6:	e077      	b.n	80029e8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	0a5b      	lsrs	r3, r3, #9
 800290e:	4413      	add	r3, r2
 8002910:	4619      	mov	r1, r3
 8002912:	6938      	ldr	r0, [r7, #16]
 8002914:	f7ff ff14 	bl	8002740 <move_window>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d167      	bne.n	80029ee <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	60fa      	str	r2, [r7, #12]
 8002924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4413      	add	r3, r2
 800292c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002930:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	0a5b      	lsrs	r3, r3, #9
 800293a:	4413      	add	r3, r2
 800293c:	4619      	mov	r1, r3
 800293e:	6938      	ldr	r0, [r7, #16]
 8002940:	f7ff fefe 	bl	8002740 <move_window>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d153      	bne.n	80029f2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4413      	add	r3, r2
 8002954:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002958:	021b      	lsls	r3, r3, #8
 800295a:	461a      	mov	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4313      	orrs	r3, r2
 8002960:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <get_fat+0xbc>
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	e002      	b.n	8002978 <get_fat+0xc2>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002978:	617b      	str	r3, [r7, #20]
			break;
 800297a:	e03f      	b.n	80029fc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	4413      	add	r3, r2
 8002986:	4619      	mov	r1, r3
 8002988:	6938      	ldr	r0, [r7, #16]
 800298a:	f7ff fed9 	bl	8002740 <move_window>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d130      	bne.n	80029f6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80029a2:	4413      	add	r3, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fc1b 	bl	80021e0 <ld_word>
 80029aa:	4603      	mov	r3, r0
 80029ac:	617b      	str	r3, [r7, #20]
			break;
 80029ae:	e025      	b.n	80029fc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	09db      	lsrs	r3, r3, #7
 80029b8:	4413      	add	r3, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	6938      	ldr	r0, [r7, #16]
 80029be:	f7ff febf 	bl	8002740 <move_window>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d118      	bne.n	80029fa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80029d6:	4413      	add	r3, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fc19 	bl	8002210 <ld_dword>
 80029de:	4603      	mov	r3, r0
 80029e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80029e4:	617b      	str	r3, [r7, #20]
			break;
 80029e6:	e009      	b.n	80029fc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80029e8:	2301      	movs	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	e006      	b.n	80029fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80029ee:	bf00      	nop
 80029f0:	e004      	b.n	80029fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80029f2:	bf00      	nop
 80029f4:	e002      	b.n	80029fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80029f6:	bf00      	nop
 80029f8:	e000      	b.n	80029fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80029fa:	bf00      	nop
		}
	}

	return val;
 80029fc:	697b      	ldr	r3, [r7, #20]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8002a06:	b590      	push	{r4, r7, lr}
 8002a08:	b089      	sub	sp, #36	; 0x24
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8002a12:	2302      	movs	r3, #2
 8002a14:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	f240 80d2 	bls.w	8002bc2 <put_fat+0x1bc>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	f080 80cc 	bcs.w	8002bc2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	f000 8096 	beq.w	8002b60 <put_fat+0x15a>
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	f300 80cd 	bgt.w	8002bd4 <put_fat+0x1ce>
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d002      	beq.n	8002a44 <put_fat+0x3e>
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d06e      	beq.n	8002b20 <put_fat+0x11a>
 8002a42:	e0c7      	b.n	8002bd4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4413      	add	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	0a5b      	lsrs	r3, r3, #9
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f7ff fe6e 	bl	8002740 <move_window>
 8002a64:	4603      	mov	r3, r0
 8002a66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002a68:	7ffb      	ldrb	r3, [r7, #31]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f040 80ab 	bne.w	8002bc6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	1c59      	adds	r1, r3, #1
 8002a7a:	61b9      	str	r1, [r7, #24]
 8002a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a80:	4413      	add	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <put_fat+0xa4>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	b25b      	sxtb	r3, r3
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	b25a      	sxtb	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	b25b      	sxtb	r3, r3
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	b25b      	sxtb	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	e001      	b.n	8002aae <put_fat+0xa8>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	0a5b      	lsrs	r3, r3, #9
 8002ac0:	4413      	add	r3, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f7ff fe3b 	bl	8002740 <move_window>
 8002aca:	4603      	mov	r3, r0
 8002acc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002ace:	7ffb      	ldrb	r3, [r7, #31]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d17a      	bne.n	8002bca <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae0:	4413      	add	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <put_fat+0xf0>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	e00e      	b.n	8002b14 <put_fat+0x10e>
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	b25b      	sxtb	r3, r3
 8002afc:	f023 030f 	bic.w	r3, r3, #15
 8002b00:	b25a      	sxtb	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	b25b      	sxtb	r3, r3
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	b25b      	sxtb	r3, r3
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	b25b      	sxtb	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	70da      	strb	r2, [r3, #3]
			break;
 8002b1e:	e059      	b.n	8002bd4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	4413      	add	r3, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f7ff fe07 	bl	8002740 <move_window>
 8002b32:	4603      	mov	r3, r0
 8002b34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002b36:	7ffb      	ldrb	r3, [r7, #31]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d148      	bne.n	8002bce <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002b4a:	4413      	add	r3, r2
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	b292      	uxth	r2, r2
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fb7f 	bl	8002256 <st_word>
			fs->wflag = 1;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	70da      	strb	r2, [r3, #3]
			break;
 8002b5e:	e039      	b.n	8002bd4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	09db      	lsrs	r3, r3, #7
 8002b68:	4413      	add	r3, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f7ff fde7 	bl	8002740 <move_window>
 8002b72:	4603      	mov	r3, r0
 8002b74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002b76:	7ffb      	ldrb	r3, [r7, #31]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d12a      	bne.n	8002bd2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002b90:	4413      	add	r3, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fb3c 	bl	8002210 <ld_dword>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002b9e:	4323      	orrs	r3, r4
 8002ba0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002bb0:	4413      	add	r3, r2
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fb69 	bl	800228c <st_dword>
			fs->wflag = 1;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	70da      	strb	r2, [r3, #3]
			break;
 8002bc0:	e008      	b.n	8002bd4 <put_fat+0x1ce>
		}
	}
 8002bc2:	bf00      	nop
 8002bc4:	e006      	b.n	8002bd4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8002bc6:	bf00      	nop
 8002bc8:	e004      	b.n	8002bd4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8002bca:	bf00      	nop
 8002bcc:	e002      	b.n	8002bd4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8002bce:	bf00      	nop
 8002bd0:	e000      	b.n	8002bd4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8002bd2:	bf00      	nop
	return res;
 8002bd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd90      	pop	{r4, r7, pc}

08002bde <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b088      	sub	sp, #32
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d904      	bls.n	8002c04 <remove_chain+0x26>
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d301      	bcc.n	8002c08 <remove_chain+0x2a>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e04b      	b.n	8002ca0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00c      	beq.n	8002c28 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	69b8      	ldr	r0, [r7, #24]
 8002c16:	f7ff fef6 	bl	8002a06 <put_fat>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8002c1e:	7ffb      	ldrb	r3, [r7, #31]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <remove_chain+0x4a>
 8002c24:	7ffb      	ldrb	r3, [r7, #31]
 8002c26:	e03b      	b.n	8002ca0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7ff fe43 	bl	80028b6 <get_fat>
 8002c30:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d031      	beq.n	8002c9c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <remove_chain+0x64>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e02e      	b.n	8002ca0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d101      	bne.n	8002c4e <remove_chain+0x70>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e028      	b.n	8002ca0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002c4e:	2200      	movs	r2, #0
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	69b8      	ldr	r0, [r7, #24]
 8002c54:	f7ff fed7 	bl	8002a06 <put_fat>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8002c5c:	7ffb      	ldrb	r3, [r7, #31]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <remove_chain+0x88>
 8002c62:	7ffb      	ldrb	r3, [r7, #31]
 8002c64:	e01c      	b.n	8002ca0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	3b02      	subs	r3, #2
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d20b      	bcs.n	8002c8c <remove_chain+0xae>
			fs->free_clst++;
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	791b      	ldrb	r3, [r3, #4]
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d3c6      	bcc.n	8002c28 <remove_chain+0x4a>
 8002c9a:	e000      	b.n	8002c9e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8002c9c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3720      	adds	r7, #32
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10d      	bne.n	8002cda <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <create_chain+0x2c>
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d31b      	bcc.n	8002d0c <create_chain+0x64>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	e018      	b.n	8002d0c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002cda:	6839      	ldr	r1, [r7, #0]
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff fdea 	bl	80028b6 <get_fat>
 8002ce2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d801      	bhi.n	8002cee <create_chain+0x46>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e070      	b.n	8002dd0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d101      	bne.n	8002cfa <create_chain+0x52>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	e06a      	b.n	8002dd0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d201      	bcs.n	8002d08 <create_chain+0x60>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	e063      	b.n	8002dd0 <create_chain+0x128>
		scl = clst;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	3301      	adds	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	69fa      	ldr	r2, [r7, #28]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d307      	bcc.n	8002d30 <create_chain+0x88>
				ncl = 2;
 8002d20:	2302      	movs	r3, #2
 8002d22:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d901      	bls.n	8002d30 <create_chain+0x88>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e04f      	b.n	8002dd0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002d30:	69f9      	ldr	r1, [r7, #28]
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff fdbf 	bl	80028b6 <get_fat>
 8002d38:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00e      	beq.n	8002d5e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d003      	beq.n	8002d4e <create_chain+0xa6>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d101      	bne.n	8002d52 <create_chain+0xaa>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	e03e      	b.n	8002dd0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d1da      	bne.n	8002d10 <create_chain+0x68>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e038      	b.n	8002dd0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8002d5e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295
 8002d64:	69f9      	ldr	r1, [r7, #28]
 8002d66:	6938      	ldr	r0, [r7, #16]
 8002d68:	f7ff fe4d 	bl	8002a06 <put_fat>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <create_chain+0xe2>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d006      	beq.n	8002d8a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	6839      	ldr	r1, [r7, #0]
 8002d80:	6938      	ldr	r0, [r7, #16]
 8002d82:	f7ff fe40 	bl	8002a06 <put_fat>
 8002d86:	4603      	mov	r3, r0
 8002d88:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d116      	bne.n	8002dbe <create_chain+0x116>
		fs->last_clst = ncl;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	3b02      	subs	r3, #2
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d804      	bhi.n	8002dae <create_chain+0x106>
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	1e5a      	subs	r2, r3, #1
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	791b      	ldrb	r3, [r3, #4]
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	711a      	strb	r2, [r3, #4]
 8002dbc:	e007      	b.n	8002dce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d102      	bne.n	8002dca <create_chain+0x122>
 8002dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc8:	e000      	b.n	8002dcc <create_chain+0x124>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002dce:	69fb      	ldr	r3, [r7, #28]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3720      	adds	r7, #32
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	3304      	adds	r3, #4
 8002dee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	0a5b      	lsrs	r3, r3, #9
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	8952      	ldrh	r2, [r2, #10]
 8002df8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1d1a      	adds	r2, r3, #4
 8002e02:	613a      	str	r2, [r7, #16]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <clmt_clust+0x3a>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e010      	b.n	8002e34 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d307      	bcc.n	8002e2a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	3304      	adds	r3, #4
 8002e26:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002e28:	e7e9      	b.n	8002dfe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8002e2a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	4413      	add	r3, r2
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e56:	d204      	bcs.n	8002e62 <dir_sdi+0x22>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <dir_sdi+0x26>
		return FR_INT_ERR;
 8002e62:	2302      	movs	r3, #2
 8002e64:	e063      	b.n	8002f2e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d106      	bne.n	8002e86 <dir_sdi+0x46>
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d902      	bls.n	8002e86 <dir_sdi+0x46>
		clst = fs->dirbase;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10c      	bne.n	8002ea6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	8912      	ldrh	r2, [r2, #8]
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d301      	bcc.n	8002e9c <dir_sdi+0x5c>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e048      	b.n	8002f2e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	61da      	str	r2, [r3, #28]
 8002ea4:	e029      	b.n	8002efa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	895b      	ldrh	r3, [r3, #10]
 8002eaa:	025b      	lsls	r3, r3, #9
 8002eac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002eae:	e019      	b.n	8002ee4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6979      	ldr	r1, [r7, #20]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fcfe 	bl	80028b6 <get_fat>
 8002eba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec2:	d101      	bne.n	8002ec8 <dir_sdi+0x88>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e032      	b.n	8002f2e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d904      	bls.n	8002ed8 <dir_sdi+0x98>
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d301      	bcc.n	8002edc <dir_sdi+0x9c>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e028      	b.n	8002f2e <dir_sdi+0xee>
			ofs -= csz;
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d2e1      	bcs.n	8002eb0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8002eec:	6979      	ldr	r1, [r7, #20]
 8002eee:	6938      	ldr	r0, [r7, #16]
 8002ef0:	f7ff fcc2 	bl	8002878 <clust2sect>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <dir_sdi+0xcc>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e010      	b.n	8002f2e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	0a5b      	lsrs	r3, r3, #9
 8002f14:	441a      	add	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f26:	441a      	add	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	3320      	adds	r3, #32
 8002f4c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <dir_next+0x28>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f5c:	d301      	bcc.n	8002f62 <dir_next+0x2c>
 8002f5e:	2304      	movs	r3, #4
 8002f60:	e0aa      	b.n	80030b8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f040 8098 	bne.w	800309e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10b      	bne.n	8002f98 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	8912      	ldrh	r2, [r2, #8]
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	f0c0 8088 	bcc.w	800309e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	61da      	str	r2, [r3, #28]
 8002f94:	2304      	movs	r3, #4
 8002f96:	e08f      	b.n	80030b8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	0a5b      	lsrs	r3, r3, #9
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	8952      	ldrh	r2, [r2, #10]
 8002fa0:	3a01      	subs	r2, #1
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d17a      	bne.n	800309e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f7ff fc80 	bl	80028b6 <get_fat>
 8002fb6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d801      	bhi.n	8002fc2 <dir_next+0x8c>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e07a      	b.n	80030b8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc8:	d101      	bne.n	8002fce <dir_next+0x98>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e074      	b.n	80030b8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d358      	bcc.n	800308a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d104      	bne.n	8002fe8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	61da      	str	r2, [r3, #28]
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	e067      	b.n	80030b8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f7ff fe59 	bl	8002ca8 <create_chain>
 8002ff6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <dir_next+0xcc>
 8002ffe:	2307      	movs	r3, #7
 8003000:	e05a      	b.n	80030b8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <dir_next+0xd6>
 8003008:	2302      	movs	r3, #2
 800300a:	e055      	b.n	80030b8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003012:	d101      	bne.n	8003018 <dir_next+0xe2>
 8003014:	2301      	movs	r3, #1
 8003016:	e04f      	b.n	80030b8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f7ff fb4d 	bl	80026b8 <sync_window>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <dir_next+0xf2>
 8003024:	2301      	movs	r3, #1
 8003026:	e047      	b.n	80030b8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	3334      	adds	r3, #52	; 0x34
 800302c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff f977 	bl	8002326 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	6979      	ldr	r1, [r7, #20]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7ff fc1a 	bl	8002878 <clust2sect>
 8003044:	4602      	mov	r2, r0
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
 800304a:	e012      	b.n	8003072 <dir_next+0x13c>
						fs->wflag = 1;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f7ff fb30 	bl	80026b8 <sync_window>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <dir_next+0x12c>
 800305e:	2301      	movs	r3, #1
 8003060:	e02a      	b.n	80030b8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	3301      	adds	r3, #1
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	895b      	ldrh	r3, [r3, #10]
 8003076:	461a      	mov	r2, r3
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4293      	cmp	r3, r2
 800307c:	d3e6      	bcc.n	800304c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad2      	subs	r2, r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003090:	6979      	ldr	r1, [r7, #20]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f7ff fbf0 	bl	8002878 <clust2sect>
 8003098:	4602      	mov	r2, r0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b0:	441a      	add	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80030d0:	2100      	movs	r1, #0
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff feb4 	bl	8002e40 <dir_sdi>
 80030d8:	4603      	mov	r3, r0
 80030da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80030dc:	7dfb      	ldrb	r3, [r7, #23]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d12b      	bne.n	800313a <dir_alloc+0x7a>
		n = 0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	4619      	mov	r1, r3
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7ff fb27 	bl	8002740 <move_window>
 80030f2:	4603      	mov	r3, r0
 80030f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80030f6:	7dfb      	ldrb	r3, [r7, #23]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d11d      	bne.n	8003138 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2be5      	cmp	r3, #229	; 0xe5
 8003104:	d004      	beq.n	8003110 <dir_alloc+0x50>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d107      	bne.n	8003120 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	3301      	adds	r3, #1
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d102      	bne.n	8003124 <dir_alloc+0x64>
 800311e:	e00c      	b.n	800313a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003120:	2300      	movs	r3, #0
 8003122:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003124:	2101      	movs	r1, #1
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff ff05 	bl	8002f36 <dir_next>
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003130:	7dfb      	ldrb	r3, [r7, #23]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0d7      	beq.n	80030e6 <dir_alloc+0x26>
 8003136:	e000      	b.n	800313a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003138:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800313a:	7dfb      	ldrb	r3, [r7, #23]
 800313c:	2b04      	cmp	r3, #4
 800313e:	d101      	bne.n	8003144 <dir_alloc+0x84>
 8003140:	2307      	movs	r3, #7
 8003142:	75fb      	strb	r3, [r7, #23]
	return res;
 8003144:	7dfb      	ldrb	r3, [r7, #23]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	331a      	adds	r3, #26
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff f83f 	bl	80021e0 <ld_word>
 8003162:	4603      	mov	r3, r0
 8003164:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b03      	cmp	r3, #3
 800316c:	d109      	bne.n	8003182 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	3314      	adds	r3, #20
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff f834 	bl	80021e0 <ld_word>
 8003178:	4603      	mov	r3, r0
 800317a:	041b      	lsls	r3, r3, #16
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003182:	68fb      	ldr	r3, [r7, #12]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	331a      	adds	r3, #26
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	b292      	uxth	r2, r2
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff f857 	bl	8002256 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d109      	bne.n	80031c4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f103 0214 	add.w	r2, r3, #20
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f7ff f849 	bl	8002256 <st_word>
	}
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	331a      	adds	r3, #26
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff f800 	bl	80021e0 <ld_word>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <cmp_lfn+0x1e>
 80031e6:	2300      	movs	r3, #0
 80031e8:	e059      	b.n	800329e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031f2:	1e5a      	subs	r2, r3, #1
 80031f4:	4613      	mov	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003200:	2301      	movs	r3, #1
 8003202:	81fb      	strh	r3, [r7, #14]
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	e033      	b.n	8003272 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800320a:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <cmp_lfn+0xdc>)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4413      	add	r3, r2
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	4413      	add	r3, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe ffe1 	bl	80021e0 <ld_word>
 800321e:	4603      	mov	r3, r0
 8003220:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8003222:	89fb      	ldrh	r3, [r7, #14]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01a      	beq.n	800325e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2bfe      	cmp	r3, #254	; 0xfe
 800322c:	d812      	bhi.n	8003254 <cmp_lfn+0x88>
 800322e:	89bb      	ldrh	r3, [r7, #12]
 8003230:	4618      	mov	r0, r3
 8003232:	f002 ff29 	bl	8006088 <ff_wtoupper>
 8003236:	4603      	mov	r3, r0
 8003238:	461c      	mov	r4, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	617a      	str	r2, [r7, #20]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f002 ff1d 	bl	8006088 <ff_wtoupper>
 800324e:	4603      	mov	r3, r0
 8003250:	429c      	cmp	r4, r3
 8003252:	d001      	beq.n	8003258 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8003254:	2300      	movs	r3, #0
 8003256:	e022      	b.n	800329e <cmp_lfn+0xd2>
			}
			wc = uc;
 8003258:	89bb      	ldrh	r3, [r7, #12]
 800325a:	81fb      	strh	r3, [r7, #14]
 800325c:	e006      	b.n	800326c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800325e:	89bb      	ldrh	r3, [r7, #12]
 8003260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003264:	4293      	cmp	r3, r2
 8003266:	d001      	beq.n	800326c <cmp_lfn+0xa0>
 8003268:	2300      	movs	r3, #0
 800326a:	e018      	b.n	800329e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	3301      	adds	r3, #1
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b0c      	cmp	r3, #12
 8003276:	d9c8      	bls.n	800320a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00b      	beq.n	800329c <cmp_lfn+0xd0>
 8003284:	89fb      	ldrh	r3, [r7, #14]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d008      	beq.n	800329c <cmp_lfn+0xd0>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	4413      	add	r3, r2
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <cmp_lfn+0xd0>
 8003298:	2300      	movs	r3, #0
 800329a:	e000      	b.n	800329e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800329c:	2301      	movs	r3, #1
}
 800329e:	4618      	mov	r0, r3
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd90      	pop	{r4, r7, pc}
 80032a6:	bf00      	nop
 80032a8:	0800be78 	.word	0x0800be78

080032ac <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	331a      	adds	r3, #26
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe ff90 	bl	80021e0 <ld_word>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <pick_lfn+0x1e>
 80032c6:	2300      	movs	r3, #0
 80032c8:	e04d      	b.n	8003366 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032d2:	1e5a      	subs	r2, r3, #1
 80032d4:	4613      	mov	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80032e0:	2301      	movs	r3, #1
 80032e2:	81fb      	strh	r3, [r7, #14]
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	e028      	b.n	800333c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80032ea:	4a21      	ldr	r2, [pc, #132]	; (8003370 <pick_lfn+0xc4>)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4413      	add	r3, r2
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	4413      	add	r3, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fe ff71 	bl	80021e0 <ld_word>
 80032fe:	4603      	mov	r3, r0
 8003300:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8003302:	89fb      	ldrh	r3, [r7, #14]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00f      	beq.n	8003328 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2bfe      	cmp	r3, #254	; 0xfe
 800330c:	d901      	bls.n	8003312 <pick_lfn+0x66>
 800330e:	2300      	movs	r3, #0
 8003310:	e029      	b.n	8003366 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8003312:	89bb      	ldrh	r3, [r7, #12]
 8003314:	81fb      	strh	r3, [r7, #14]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	617a      	str	r2, [r7, #20]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	89fa      	ldrh	r2, [r7, #14]
 8003324:	801a      	strh	r2, [r3, #0]
 8003326:	e006      	b.n	8003336 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003328:	89bb      	ldrh	r3, [r7, #12]
 800332a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800332e:	4293      	cmp	r3, r2
 8003330:	d001      	beq.n	8003336 <pick_lfn+0x8a>
 8003332:	2300      	movs	r3, #0
 8003334:	e017      	b.n	8003366 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	3301      	adds	r3, #1
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b0c      	cmp	r3, #12
 8003340:	d9d3      	bls.n	80032ea <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2bfe      	cmp	r3, #254	; 0xfe
 8003352:	d901      	bls.n	8003358 <pick_lfn+0xac>
 8003354:	2300      	movs	r3, #0
 8003356:	e006      	b.n	8003366 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	2200      	movs	r2, #0
 8003362:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8003364:	2301      	movs	r3, #1
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	0800be78 	.word	0x0800be78

08003374 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	460b      	mov	r3, r1
 8003384:	71fb      	strb	r3, [r7, #7]
 8003386:	4613      	mov	r3, r2
 8003388:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	330d      	adds	r3, #13
 800338e:	79ba      	ldrb	r2, [r7, #6]
 8003390:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	330b      	adds	r3, #11
 8003396:	220f      	movs	r2, #15
 8003398:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	330c      	adds	r3, #12
 800339e:	2200      	movs	r2, #0
 80033a0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	331a      	adds	r3, #26
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe ff54 	bl	8002256 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	1e5a      	subs	r2, r3, #1
 80033b2:	4613      	mov	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	82fb      	strh	r3, [r7, #22]
 80033c2:	2300      	movs	r3, #0
 80033c4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80033c6:	8afb      	ldrh	r3, [r7, #22]
 80033c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d007      	beq.n	80033e0 <put_lfn+0x6c>
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	61fa      	str	r2, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4413      	add	r3, r2
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80033e0:	4a17      	ldr	r2, [pc, #92]	; (8003440 <put_lfn+0xcc>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	4413      	add	r3, r2
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4413      	add	r3, r2
 80033ee:	8afa      	ldrh	r2, [r7, #22]
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe ff2f 	bl	8002256 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80033f8:	8afb      	ldrh	r3, [r7, #22]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d102      	bne.n	8003404 <put_lfn+0x90>
 80033fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003402:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	3301      	adds	r3, #1
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b0c      	cmp	r3, #12
 800340e:	d9da      	bls.n	80033c6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8003410:	8afb      	ldrh	r3, [r7, #22]
 8003412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003416:	4293      	cmp	r3, r2
 8003418:	d006      	beq.n	8003428 <put_lfn+0xb4>
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4413      	add	r3, r2
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d103      	bne.n	8003430 <put_lfn+0xbc>
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800342e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	79fa      	ldrb	r2, [r7, #7]
 8003434:	701a      	strb	r2, [r3, #0]
}
 8003436:	bf00      	nop
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	0800be78 	.word	0x0800be78

08003444 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08c      	sub	sp, #48	; 0x30
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8003452:	220b      	movs	r2, #11
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7fe ff44 	bl	80022e4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2b05      	cmp	r3, #5
 8003460:	d92b      	bls.n	80034ba <gen_numname+0x76>
		sr = seq;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8003466:	e022      	b.n	80034ae <gen_numname+0x6a>
			wc = *lfn++;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	1c9a      	adds	r2, r3, #2
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8003472:	2300      	movs	r3, #0
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
 8003476:	e017      	b.n	80034a8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005a      	lsls	r2, r3, #1
 800347c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	4413      	add	r3, r2
 8003484:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8003486:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003488:	085b      	lsrs	r3, r3, #1
 800348a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <gen_numname+0x5e>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800349c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80034a0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	3301      	adds	r3, #1
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	2b0f      	cmp	r3, #15
 80034ac:	d9e4      	bls.n	8003478 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1d8      	bne.n	8003468 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80034ba:	2307      	movs	r3, #7
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	3330      	adds	r3, #48	; 0x30
 80034ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80034ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80034d2:	2b39      	cmp	r3, #57	; 0x39
 80034d4:	d904      	bls.n	80034e0 <gen_numname+0x9c>
 80034d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80034da:	3307      	adds	r3, #7
 80034dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	1e5a      	subs	r2, r3, #1
 80034e4:	62ba      	str	r2, [r7, #40]	; 0x28
 80034e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80034ea:	4413      	add	r3, r2
 80034ec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80034f0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	603b      	str	r3, [r7, #0]
	} while (seq);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1de      	bne.n	80034be <gen_numname+0x7a>
	ns[i] = '~';
 8003500:	f107 0214 	add.w	r2, r7, #20
 8003504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003506:	4413      	add	r3, r2
 8003508:	227e      	movs	r2, #126	; 0x7e
 800350a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800350c:	2300      	movs	r3, #0
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
 8003510:	e002      	b.n	8003518 <gen_numname+0xd4>
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	3301      	adds	r3, #1
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
 8003518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	429a      	cmp	r2, r3
 800351e:	d205      	bcs.n	800352c <gen_numname+0xe8>
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	4413      	add	r3, r2
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b20      	cmp	r3, #32
 800352a:	d1f2      	bne.n	8003512 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	2b07      	cmp	r3, #7
 8003530:	d808      	bhi.n	8003544 <gen_numname+0x100>
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	62ba      	str	r2, [r7, #40]	; 0x28
 8003538:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800353c:	4413      	add	r3, r2
 800353e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8003542:	e000      	b.n	8003546 <gen_numname+0x102>
 8003544:	2120      	movs	r1, #32
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	627a      	str	r2, [r7, #36]	; 0x24
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4413      	add	r3, r2
 8003550:	460a      	mov	r2, r1
 8003552:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	2b07      	cmp	r3, #7
 8003558:	d9e8      	bls.n	800352c <gen_numname+0xe8>
}
 800355a:	bf00      	nop
 800355c:	bf00      	nop
 800355e:	3730      	adds	r7, #48	; 0x30
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8003570:	230b      	movs	r3, #11
 8003572:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	b2da      	uxtb	r2, r3
 8003578:	0852      	lsrs	r2, r2, #1
 800357a:	01db      	lsls	r3, r3, #7
 800357c:	4313      	orrs	r3, r2
 800357e:	b2da      	uxtb	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	1c59      	adds	r1, r3, #1
 8003584:	6079      	str	r1, [r7, #4]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	4413      	add	r3, r2
 800358a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	3b01      	subs	r3, #1
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ed      	bne.n	8003574 <sum_sfn+0x10>
	return sum;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80035b0:	2304      	movs	r3, #4
 80035b2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80035ba:	23ff      	movs	r3, #255	; 0xff
 80035bc:	757b      	strb	r3, [r7, #21]
 80035be:	23ff      	movs	r3, #255	; 0xff
 80035c0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80035c2:	e081      	b.n	80036c8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	4619      	mov	r1, r3
 80035ca:	6938      	ldr	r0, [r7, #16]
 80035cc:	f7ff f8b8 	bl	8002740 <move_window>
 80035d0:	4603      	mov	r3, r0
 80035d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d17c      	bne.n	80036d4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80035e2:	7dbb      	ldrb	r3, [r7, #22]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80035e8:	2304      	movs	r3, #4
 80035ea:	75fb      	strb	r3, [r7, #23]
 80035ec:	e077      	b.n	80036de <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	330b      	adds	r3, #11
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8003602:	7dbb      	ldrb	r3, [r7, #22]
 8003604:	2be5      	cmp	r3, #229	; 0xe5
 8003606:	d00e      	beq.n	8003626 <dir_read+0x80>
 8003608:	7dbb      	ldrb	r3, [r7, #22]
 800360a:	2b2e      	cmp	r3, #46	; 0x2e
 800360c:	d00b      	beq.n	8003626 <dir_read+0x80>
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	f023 0320 	bic.w	r3, r3, #32
 8003614:	2b08      	cmp	r3, #8
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	4293      	cmp	r3, r2
 8003624:	d002      	beq.n	800362c <dir_read+0x86>
				ord = 0xFF;
 8003626:	23ff      	movs	r3, #255	; 0xff
 8003628:	757b      	strb	r3, [r7, #21]
 800362a:	e044      	b.n	80036b6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b0f      	cmp	r3, #15
 8003630:	d12f      	bne.n	8003692 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8003632:	7dbb      	ldrb	r3, [r7, #22]
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00d      	beq.n	8003658 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	7b5b      	ldrb	r3, [r3, #13]
 8003642:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8003644:	7dbb      	ldrb	r3, [r7, #22]
 8003646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800364a:	75bb      	strb	r3, [r7, #22]
 800364c:	7dbb      	ldrb	r3, [r7, #22]
 800364e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695a      	ldr	r2, [r3, #20]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003658:	7dba      	ldrb	r2, [r7, #22]
 800365a:	7d7b      	ldrb	r3, [r7, #21]
 800365c:	429a      	cmp	r2, r3
 800365e:	d115      	bne.n	800368c <dir_read+0xe6>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	330d      	adds	r3, #13
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	7d3a      	ldrb	r2, [r7, #20]
 800366a:	429a      	cmp	r2, r3
 800366c:	d10e      	bne.n	800368c <dir_read+0xe6>
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4619      	mov	r1, r3
 8003678:	4610      	mov	r0, r2
 800367a:	f7ff fe17 	bl	80032ac <pick_lfn>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <dir_read+0xe6>
 8003684:	7d7b      	ldrb	r3, [r7, #21]
 8003686:	3b01      	subs	r3, #1
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e000      	b.n	800368e <dir_read+0xe8>
 800368c:	23ff      	movs	r3, #255	; 0xff
 800368e:	757b      	strb	r3, [r7, #21]
 8003690:	e011      	b.n	80036b6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8003692:	7d7b      	ldrb	r3, [r7, #21]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <dir_read+0x106>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff61 	bl	8003564 <sum_sfn>
 80036a2:	4603      	mov	r3, r0
 80036a4:	461a      	mov	r2, r3
 80036a6:	7d3b      	ldrb	r3, [r7, #20]
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d015      	beq.n	80036d8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f04f 32ff 	mov.w	r2, #4294967295
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80036b4:	e010      	b.n	80036d8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80036b6:	2100      	movs	r1, #0
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fc3c 	bl	8002f36 <dir_next>
 80036be:	4603      	mov	r3, r0
 80036c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d109      	bne.n	80036dc <dir_read+0x136>
	while (dp->sect) {
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f47f af79 	bne.w	80035c4 <dir_read+0x1e>
 80036d2:	e004      	b.n	80036de <dir_read+0x138>
		if (res != FR_OK) break;
 80036d4:	bf00      	nop
 80036d6:	e002      	b.n	80036de <dir_read+0x138>
					break;
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <dir_read+0x138>
		if (res != FR_OK) break;
 80036dc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80036de:	7dfb      	ldrb	r3, [r7, #23]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <dir_read+0x144>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	61da      	str	r2, [r3, #28]
	return res;
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003702:	2100      	movs	r1, #0
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff fb9b 	bl	8002e40 <dir_sdi>
 800370a:	4603      	mov	r3, r0
 800370c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <dir_find+0x24>
 8003714:	7dfb      	ldrb	r3, [r7, #23]
 8003716:	e0a9      	b.n	800386c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003718:	23ff      	movs	r3, #255	; 0xff
 800371a:	753b      	strb	r3, [r7, #20]
 800371c:	7d3b      	ldrb	r3, [r7, #20]
 800371e:	757b      	strb	r3, [r7, #21]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f04f 32ff 	mov.w	r2, #4294967295
 8003726:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	4619      	mov	r1, r3
 800372e:	6938      	ldr	r0, [r7, #16]
 8003730:	f7ff f806 	bl	8002740 <move_window>
 8003734:	4603      	mov	r3, r0
 8003736:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	2b00      	cmp	r3, #0
 800373c:	f040 8090 	bne.w	8003860 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003748:	7dbb      	ldrb	r3, [r7, #22]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <dir_find+0x60>
 800374e:	2304      	movs	r3, #4
 8003750:	75fb      	strb	r3, [r7, #23]
 8003752:	e08a      	b.n	800386a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	330b      	adds	r3, #11
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003760:	73fb      	strb	r3, [r7, #15]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	7bfa      	ldrb	r2, [r7, #15]
 8003766:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003768:	7dbb      	ldrb	r3, [r7, #22]
 800376a:	2be5      	cmp	r3, #229	; 0xe5
 800376c:	d007      	beq.n	800377e <dir_find+0x8a>
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d009      	beq.n	800378c <dir_find+0x98>
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	2b0f      	cmp	r3, #15
 800377c:	d006      	beq.n	800378c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800377e:	23ff      	movs	r3, #255	; 0xff
 8003780:	757b      	strb	r3, [r7, #21]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f04f 32ff 	mov.w	r2, #4294967295
 8003788:	631a      	str	r2, [r3, #48]	; 0x30
 800378a:	e05e      	b.n	800384a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b0f      	cmp	r3, #15
 8003790:	d136      	bne.n	8003800 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d154      	bne.n	800384a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80037a0:	7dbb      	ldrb	r3, [r7, #22]
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	7b5b      	ldrb	r3, [r3, #13]
 80037b0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80037b2:	7dbb      	ldrb	r3, [r7, #22]
 80037b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037b8:	75bb      	strb	r3, [r7, #22]
 80037ba:	7dbb      	ldrb	r3, [r7, #22]
 80037bc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80037c6:	7dba      	ldrb	r2, [r7, #22]
 80037c8:	7d7b      	ldrb	r3, [r7, #21]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d115      	bne.n	80037fa <dir_find+0x106>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	330d      	adds	r3, #13
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	7d3a      	ldrb	r2, [r7, #20]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d10e      	bne.n	80037fa <dir_find+0x106>
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f7ff fcf0 	bl	80031cc <cmp_lfn>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <dir_find+0x106>
 80037f2:	7d7b      	ldrb	r3, [r7, #21]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	e000      	b.n	80037fc <dir_find+0x108>
 80037fa:	23ff      	movs	r3, #255	; 0xff
 80037fc:	757b      	strb	r3, [r7, #21]
 80037fe:	e024      	b.n	800384a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8003800:	7d7b      	ldrb	r3, [r7, #21]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <dir_find+0x126>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff feaa 	bl	8003564 <sum_sfn>
 8003810:	4603      	mov	r3, r0
 8003812:	461a      	mov	r2, r3
 8003814:	7d3b      	ldrb	r3, [r7, #20]
 8003816:	4293      	cmp	r3, r2
 8003818:	d024      	beq.n	8003864 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <dir_find+0x14a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a18      	ldr	r0, [r3, #32]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3324      	adds	r3, #36	; 0x24
 8003830:	220b      	movs	r2, #11
 8003832:	4619      	mov	r1, r3
 8003834:	f7fe fd92 	bl	800235c <mem_cmp>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d014      	beq.n	8003868 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800383e:	23ff      	movs	r3, #255	; 0xff
 8003840:	757b      	strb	r3, [r7, #21]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f04f 32ff 	mov.w	r2, #4294967295
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800384a:	2100      	movs	r1, #0
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff fb72 	bl	8002f36 <dir_next>
 8003852:	4603      	mov	r3, r0
 8003854:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	2b00      	cmp	r3, #0
 800385a:	f43f af65 	beq.w	8003728 <dir_find+0x34>
 800385e:	e004      	b.n	800386a <dir_find+0x176>
		if (res != FR_OK) break;
 8003860:	bf00      	nop
 8003862:	e002      	b.n	800386a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8003864:	bf00      	nop
 8003866:	e000      	b.n	800386a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003868:	bf00      	nop

	return res;
 800386a:	7dfb      	ldrb	r3, [r7, #23]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08c      	sub	sp, #48	; 0x30
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003888:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <dir_register+0x20>
 8003890:	2306      	movs	r3, #6
 8003892:	e0e0      	b.n	8003a56 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8003894:	2300      	movs	r3, #0
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
 8003898:	e002      	b.n	80038a0 <dir_register+0x2c>
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	3301      	adds	r3, #1
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	4413      	add	r3, r2
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f4      	bne.n	800389a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80038b6:	f107 030c 	add.w	r3, r7, #12
 80038ba:	220c      	movs	r2, #12
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fe fd11 	bl	80022e4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80038c2:	7dfb      	ldrb	r3, [r7, #23]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d032      	beq.n	8003932 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2240      	movs	r2, #64	; 0x40
 80038d0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80038d4:	2301      	movs	r3, #1
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d8:	e016      	b.n	8003908 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	f107 010c 	add.w	r1, r7, #12
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ea:	f7ff fdab 	bl	8003444 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ff00 	bl	80036f4 <dir_find>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80038fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8003902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003904:	3301      	adds	r3, #1
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	2b63      	cmp	r3, #99	; 0x63
 800390c:	d9e5      	bls.n	80038da <dir_register+0x66>
 800390e:	e000      	b.n	8003912 <dir_register+0x9e>
			if (res != FR_OK) break;
 8003910:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	2b64      	cmp	r3, #100	; 0x64
 8003916:	d101      	bne.n	800391c <dir_register+0xa8>
 8003918:	2307      	movs	r3, #7
 800391a:	e09c      	b.n	8003a56 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800391c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003920:	2b04      	cmp	r3, #4
 8003922:	d002      	beq.n	800392a <dir_register+0xb6>
 8003924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003928:	e095      	b.n	8003a56 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800392a:	7dfa      	ldrb	r2, [r7, #23]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8003932:	7dfb      	ldrb	r3, [r7, #23]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <dir_register+0xd8>
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	330c      	adds	r3, #12
 8003940:	4a47      	ldr	r2, [pc, #284]	; (8003a60 <dir_register+0x1ec>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	3301      	adds	r3, #1
 800394a:	e000      	b.n	800394e <dir_register+0xda>
 800394c:	2301      	movs	r3, #1
 800394e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8003950:	6a39      	ldr	r1, [r7, #32]
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fbb4 	bl	80030c0 <dir_alloc>
 8003958:	4603      	mov	r3, r0
 800395a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800395e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003962:	2b00      	cmp	r3, #0
 8003964:	d148      	bne.n	80039f8 <dir_register+0x184>
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	3b01      	subs	r3, #1
 800396a:	623b      	str	r3, [r7, #32]
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d042      	beq.n	80039f8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	015b      	lsls	r3, r3, #5
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	4619      	mov	r1, r3
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff fa5e 	bl	8002e40 <dir_sdi>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800398a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800398e:	2b00      	cmp	r3, #0
 8003990:	d132      	bne.n	80039f8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3324      	adds	r3, #36	; 0x24
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fde4 	bl	8003564 <sum_sfn>
 800399c:	4603      	mov	r3, r0
 800399e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	4619      	mov	r1, r3
 80039a6:	69f8      	ldr	r0, [r7, #28]
 80039a8:	f7fe feca 	bl	8002740 <move_window>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80039b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d11d      	bne.n	80039f6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	68d8      	ldr	r0, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a19      	ldr	r1, [r3, #32]
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	7efb      	ldrb	r3, [r7, #27]
 80039c8:	f7ff fcd4 	bl	8003374 <put_lfn>
				fs->wflag = 1;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2201      	movs	r2, #1
 80039d0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80039d2:	2100      	movs	r1, #0
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff faae 	bl	8002f36 <dir_next>
 80039da:	4603      	mov	r3, r0
 80039dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80039e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <dir_register+0x184>
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	623b      	str	r3, [r7, #32]
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1d5      	bne.n	80039a0 <dir_register+0x12c>
 80039f4:	e000      	b.n	80039f8 <dir_register+0x184>
				if (res != FR_OK) break;
 80039f6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80039f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d128      	bne.n	8003a52 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	4619      	mov	r1, r3
 8003a06:	69f8      	ldr	r0, [r7, #28]
 8003a08:	f7fe fe9a 	bl	8002740 <move_window>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8003a12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11b      	bne.n	8003a52 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	2100      	movs	r1, #0
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe fc7f 	bl	8002326 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a18      	ldr	r0, [r3, #32]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3324      	adds	r3, #36	; 0x24
 8003a30:	220b      	movs	r2, #11
 8003a32:	4619      	mov	r1, r3
 8003a34:	f7fe fc56 	bl	80022e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	330c      	adds	r3, #12
 8003a44:	f002 0218 	and.w	r2, r2, #24
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3730      	adds	r7, #48	; 0x30
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	4ec4ec4f 	.word	0x4ec4ec4f

08003a64 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2200      	movs	r2, #0
 8003a78:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80c9 	beq.w	8003c16 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8c:	d032      	beq.n	8003af4 <get_fileinfo+0x90>
			i = j = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8003a96:	e01b      	b.n	8003ad0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8003a98:	89fb      	ldrh	r3, [r7, #14]
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f002 fab7 	bl	8006010 <ff_convert>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8003aa6:	89fb      	ldrh	r3, [r7, #14]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d102      	bne.n	8003ab2 <get_fileinfo+0x4e>
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	e01a      	b.n	8003ae8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	2bfe      	cmp	r3, #254	; 0xfe
 8003ab6:	d902      	bls.n	8003abe <get_fileinfo+0x5a>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	e014      	b.n	8003ae8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	61fa      	str	r2, [r7, #28]
 8003ac4:	89fa      	ldrh	r2, [r7, #14]
 8003ac6:	b2d1      	uxtb	r1, r2
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	4413      	add	r3, r2
 8003acc:	460a      	mov	r2, r1
 8003ace:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	1c59      	adds	r1, r3, #1
 8003ad8:	61b9      	str	r1, [r7, #24]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	4413      	add	r3, r2
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	81fb      	strh	r3, [r7, #14]
 8003ae2:	89fb      	ldrh	r3, [r7, #14]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1d7      	bne.n	8003a98 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	4413      	add	r3, r2
 8003aee:	3316      	adds	r3, #22
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	3316      	adds	r3, #22
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8003b08:	e04c      	b.n	8003ba4 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1a      	ldr	r2, [r3, #32]
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	1c59      	adds	r1, r3, #1
 8003b12:	61f9      	str	r1, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8003b1a:	7dfb      	ldrb	r3, [r7, #23]
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d100      	bne.n	8003b22 <get_fileinfo+0xbe>
 8003b20:	e040      	b.n	8003ba4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8003b22:	7dfb      	ldrb	r3, [r7, #23]
 8003b24:	2b05      	cmp	r3, #5
 8003b26:	d101      	bne.n	8003b2c <get_fileinfo+0xc8>
 8003b28:	23e5      	movs	r3, #229	; 0xe5
 8003b2a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	2b09      	cmp	r3, #9
 8003b30:	d10f      	bne.n	8003b52 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8003b32:	89bb      	ldrh	r3, [r7, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d105      	bne.n	8003b44 <get_fileinfo+0xe0>
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3316      	adds	r3, #22
 8003b40:	222e      	movs	r2, #46	; 0x2e
 8003b42:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	61ba      	str	r2, [r7, #24]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	222e      	movs	r2, #46	; 0x2e
 8003b50:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	4413      	add	r3, r2
 8003b58:	3309      	adds	r3, #9
 8003b5a:	7dfa      	ldrb	r2, [r7, #23]
 8003b5c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8003b5e:	89bb      	ldrh	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d11c      	bne.n	8003b9e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
 8003b66:	2b40      	cmp	r3, #64	; 0x40
 8003b68:	d913      	bls.n	8003b92 <get_fileinfo+0x12e>
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
 8003b6c:	2b5a      	cmp	r3, #90	; 0x5a
 8003b6e:	d810      	bhi.n	8003b92 <get_fileinfo+0x12e>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	330c      	adds	r3, #12
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d901      	bls.n	8003b84 <get_fileinfo+0x120>
 8003b80:	2310      	movs	r3, #16
 8003b82:	e000      	b.n	8003b86 <get_fileinfo+0x122>
 8003b84:	2308      	movs	r3, #8
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	3320      	adds	r3, #32
 8003b90:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	4413      	add	r3, r2
 8003b98:	3316      	adds	r3, #22
 8003b9a:	7dfa      	ldrb	r2, [r7, #23]
 8003b9c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	2b0a      	cmp	r3, #10
 8003ba8:	d9af      	bls.n	8003b0a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8003baa:	89bb      	ldrh	r3, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10d      	bne.n	8003bcc <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3316      	adds	r3, #22
 8003bb8:	2200      	movs	r2, #0
 8003bba:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <get_fileinfo+0x168>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3309      	adds	r3, #9
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	7ada      	ldrb	r2, [r3, #11]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	331c      	adds	r3, #28
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fe fb11 	bl	8002210 <ld_dword>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	3316      	adds	r3, #22
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fb08 	bl	8002210 <ld_dword>
 8003c00:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	80da      	strh	r2, [r3, #6]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	809a      	strh	r2, [r3, #4]
 8003c14:	e000      	b.n	8003c18 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8003c16:	bf00      	nop
}
 8003c18:	3720      	adds	r7, #32
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	; 0x28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	61ba      	str	r2, [r7, #24]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4413      	add	r3, r2
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8003c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c50:	2b1f      	cmp	r3, #31
 8003c52:	d940      	bls.n	8003cd6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8003c54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c56:	2b2f      	cmp	r3, #47	; 0x2f
 8003c58:	d006      	beq.n	8003c68 <create_name+0x48>
 8003c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c5c:	2b5c      	cmp	r3, #92	; 0x5c
 8003c5e:	d110      	bne.n	8003c82 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003c60:	e002      	b.n	8003c68 <create_name+0x48>
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	3301      	adds	r3, #1
 8003c66:	61bb      	str	r3, [r7, #24]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b2f      	cmp	r3, #47	; 0x2f
 8003c72:	d0f6      	beq.n	8003c62 <create_name+0x42>
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	4413      	add	r3, r2
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b5c      	cmp	r3, #92	; 0x5c
 8003c7e:	d0f0      	beq.n	8003c62 <create_name+0x42>
			break;
 8003c80:	e02a      	b.n	8003cd8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2bfe      	cmp	r3, #254	; 0xfe
 8003c86:	d901      	bls.n	8003c8c <create_name+0x6c>
 8003c88:	2306      	movs	r3, #6
 8003c8a:	e177      	b.n	8003f7c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8003c8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c94:	2101      	movs	r1, #1
 8003c96:	4618      	mov	r0, r3
 8003c98:	f002 f9ba 	bl	8006010 <ff_convert>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8003ca0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <create_name+0x8a>
 8003ca6:	2306      	movs	r3, #6
 8003ca8:	e168      	b.n	8003f7c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8003caa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cac:	2b7f      	cmp	r3, #127	; 0x7f
 8003cae:	d809      	bhi.n	8003cc4 <create_name+0xa4>
 8003cb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	48b3      	ldr	r0, [pc, #716]	; (8003f84 <create_name+0x364>)
 8003cb6:	f7fe fb78 	bl	80023aa <chk_chr>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <create_name+0xa4>
 8003cc0:	2306      	movs	r3, #6
 8003cc2:	e15b      	b.n	8003f7c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	617a      	str	r2, [r7, #20]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4413      	add	r3, r2
 8003cd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cd2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8003cd4:	e7b4      	b.n	8003c40 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8003cd6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	441a      	add	r2, r3
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ce4:	2b1f      	cmp	r3, #31
 8003ce6:	d801      	bhi.n	8003cec <create_name+0xcc>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	e000      	b.n	8003cee <create_name+0xce>
 8003cec:	2300      	movs	r3, #0
 8003cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003cf2:	e011      	b.n	8003d18 <create_name+0xf8>
		w = lfn[di - 1];
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8003d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d002      	beq.n	8003d12 <create_name+0xf2>
 8003d0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8003d10:	d106      	bne.n	8003d20 <create_name+0x100>
		di--;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1ea      	bne.n	8003cf4 <create_name+0xd4>
 8003d1e:	e000      	b.n	8003d22 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8003d20:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4413      	add	r3, r2
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <create_name+0x118>
 8003d34:	2306      	movs	r3, #6
 8003d36:	e121      	b.n	8003f7c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3324      	adds	r3, #36	; 0x24
 8003d3c:	220b      	movs	r2, #11
 8003d3e:	2120      	movs	r1, #32
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe faf0 	bl	8002326 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003d46:	2300      	movs	r3, #0
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	e002      	b.n	8003d52 <create_name+0x132>
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4413      	add	r3, r2
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d0f5      	beq.n	8003d4c <create_name+0x12c>
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8003d6c:	d0ee      	beq.n	8003d4c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d009      	beq.n	8003d88 <create_name+0x168>
 8003d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d78:	f043 0303 	orr.w	r3, r3, #3
 8003d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8003d80:	e002      	b.n	8003d88 <create_name+0x168>
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <create_name+0x182>
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003d94:	3b01      	subs	r3, #1
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003da0:	d1ef      	bne.n	8003d82 <create_name+0x162>

	i = b = 0; ni = 8;
 8003da2:	2300      	movs	r3, #0
 8003da4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003da8:	2300      	movs	r3, #0
 8003daa:	623b      	str	r3, [r7, #32]
 8003dac:	2308      	movs	r3, #8
 8003dae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	61ba      	str	r2, [r7, #24]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4413      	add	r3, r2
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8003dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 8090 	beq.w	8003ee8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8003dc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d006      	beq.n	8003ddc <create_name+0x1bc>
 8003dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8003dd2:	d10a      	bne.n	8003dea <create_name+0x1ca>
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d006      	beq.n	8003dea <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8003ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003de0:	f043 0303 	orr.w	r3, r3, #3
 8003de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003de8:	e07d      	b.n	8003ee6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003dea:	6a3a      	ldr	r2, [r7, #32]
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d203      	bcs.n	8003dfa <create_name+0x1da>
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d123      	bne.n	8003e42 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	2b0b      	cmp	r3, #11
 8003dfe:	d106      	bne.n	8003e0e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8003e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e04:	f043 0303 	orr.w	r3, r3, #3
 8003e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e0c:	e06f      	b.n	8003eee <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d005      	beq.n	8003e22 <create_name+0x202>
 8003e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e1a:	f043 0303 	orr.w	r3, r3, #3
 8003e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d860      	bhi.n	8003eec <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	2308      	movs	r3, #8
 8003e30:	623b      	str	r3, [r7, #32]
 8003e32:	230b      	movs	r3, #11
 8003e34:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8003e36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003e40:	e051      	b.n	8003ee6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8003e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e44:	2b7f      	cmp	r3, #127	; 0x7f
 8003e46:	d914      	bls.n	8003e72 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f002 f8df 	bl	8006010 <ff_convert>
 8003e52:	4603      	mov	r3, r0
 8003e54:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8003e56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <create_name+0x246>
 8003e5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e5e:	3b80      	subs	r3, #128	; 0x80
 8003e60:	4a49      	ldr	r2, [pc, #292]	; (8003f88 <create_name+0x368>)
 8003e62:	5cd3      	ldrb	r3, [r2, r3]
 8003e64:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8003e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e6a:	f043 0302 	orr.w	r3, r3, #2
 8003e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8003e72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d007      	beq.n	8003e88 <create_name+0x268>
 8003e78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4843      	ldr	r0, [pc, #268]	; (8003f8c <create_name+0x36c>)
 8003e7e:	f7fe fa94 	bl	80023aa <chk_chr>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003e88:	235f      	movs	r3, #95	; 0x5f
 8003e8a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e90:	f043 0303 	orr.w	r3, r3, #3
 8003e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e98:	e01b      	b.n	8003ed2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8003e9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e9c:	2b40      	cmp	r3, #64	; 0x40
 8003e9e:	d909      	bls.n	8003eb4 <create_name+0x294>
 8003ea0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ea2:	2b5a      	cmp	r3, #90	; 0x5a
 8003ea4:	d806      	bhi.n	8003eb4 <create_name+0x294>
					b |= 2;
 8003ea6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003eaa:	f043 0302 	orr.w	r3, r3, #2
 8003eae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003eb2:	e00e      	b.n	8003ed2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8003eb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003eb6:	2b60      	cmp	r3, #96	; 0x60
 8003eb8:	d90b      	bls.n	8003ed2 <create_name+0x2b2>
 8003eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ebc:	2b7a      	cmp	r3, #122	; 0x7a
 8003ebe:	d808      	bhi.n	8003ed2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8003ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ece:	3b20      	subs	r3, #32
 8003ed0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	623a      	str	r2, [r7, #32]
 8003ed8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003eda:	b2d1      	uxtb	r1, r2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4413      	add	r3, r2
 8003ee0:	460a      	mov	r2, r1
 8003ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8003ee6:	e763      	b.n	8003db0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8003ee8:	bf00      	nop
 8003eea:	e000      	b.n	8003eee <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8003eec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ef4:	2be5      	cmp	r3, #229	; 0xe5
 8003ef6:	d103      	bne.n	8003f00 <create_name+0x2e0>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2205      	movs	r2, #5
 8003efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d104      	bne.n	8003f10 <create_name+0x2f0>
 8003f06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8003f10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f14:	f003 030c 	and.w	r3, r3, #12
 8003f18:	2b0c      	cmp	r3, #12
 8003f1a:	d005      	beq.n	8003f28 <create_name+0x308>
 8003f1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d105      	bne.n	8003f34 <create_name+0x314>
 8003f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f2c:	f043 0302 	orr.w	r3, r3, #2
 8003f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8003f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d117      	bne.n	8003f70 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8003f40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d105      	bne.n	8003f58 <create_name+0x338>
 8003f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f50:	f043 0310 	orr.w	r3, r3, #16
 8003f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8003f58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f5c:	f003 030c 	and.w	r3, r3, #12
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d105      	bne.n	8003f70 <create_name+0x350>
 8003f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f68:	f043 0308 	orr.w	r3, r3, #8
 8003f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003f76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8003f7a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3728      	adds	r7, #40	; 0x28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	0800bd84 	.word	0x0800bd84
 8003f88:	0800bdf8 	.word	0x0800bdf8
 8003f8c:	0800bd90 	.word	0x0800bd90

08003f90 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003fa4:	e002      	b.n	8003fac <follow_path+0x1c>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b2f      	cmp	r3, #47	; 0x2f
 8003fb2:	d0f8      	beq.n	8003fa6 <follow_path+0x16>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b5c      	cmp	r3, #92	; 0x5c
 8003fba:	d0f4      	beq.n	8003fa6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b1f      	cmp	r3, #31
 8003fc8:	d80a      	bhi.n	8003fe0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2280      	movs	r2, #128	; 0x80
 8003fce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7fe ff33 	bl	8002e40 <dir_sdi>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	75fb      	strb	r3, [r7, #23]
 8003fde:	e043      	b.n	8004068 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003fe0:	463b      	mov	r3, r7
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff fe1b 	bl	8003c20 <create_name>
 8003fea:	4603      	mov	r3, r0
 8003fec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003fee:	7dfb      	ldrb	r3, [r7, #23]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d134      	bne.n	800405e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff fb7d 	bl	80036f4 <dir_find>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004004:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	2b04      	cmp	r3, #4
 8004010:	d127      	bne.n	8004062 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004012:	7afb      	ldrb	r3, [r7, #11]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d122      	bne.n	8004062 <follow_path+0xd2>
 800401c:	2305      	movs	r3, #5
 800401e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004020:	e01f      	b.n	8004062 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004022:	7afb      	ldrb	r3, [r7, #11]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d11c      	bne.n	8004066 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	799b      	ldrb	r3, [r3, #6]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	d102      	bne.n	800403e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004038:	2305      	movs	r3, #5
 800403a:	75fb      	strb	r3, [r7, #23]
 800403c:	e014      	b.n	8004068 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404c:	4413      	add	r3, r2
 800404e:	4619      	mov	r1, r3
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f7ff f87c 	bl	800314e <ld_clust>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800405c:	e7c0      	b.n	8003fe0 <follow_path+0x50>
			if (res != FR_OK) break;
 800405e:	bf00      	nop
 8004060:	e002      	b.n	8004068 <follow_path+0xd8>
				break;
 8004062:	bf00      	nop
 8004064:	e000      	b.n	8004068 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004066:	bf00      	nop
			}
		}
	}

	return res;
 8004068:	7dfb      	ldrb	r3, [r7, #23]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004072:	b480      	push	{r7}
 8004074:	b087      	sub	sp, #28
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800407a:	f04f 33ff 	mov.w	r3, #4294967295
 800407e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d031      	beq.n	80040ec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	e002      	b.n	8004096 <get_ldnumber+0x24>
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	3301      	adds	r3, #1
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b1f      	cmp	r3, #31
 800409c:	d903      	bls.n	80040a6 <get_ldnumber+0x34>
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b3a      	cmp	r3, #58	; 0x3a
 80040a4:	d1f4      	bne.n	8004090 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b3a      	cmp	r3, #58	; 0x3a
 80040ac:	d11c      	bne.n	80040e8 <get_ldnumber+0x76>
			tp = *path;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	60fa      	str	r2, [r7, #12]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	3b30      	subs	r3, #48	; 0x30
 80040be:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b09      	cmp	r3, #9
 80040c4:	d80e      	bhi.n	80040e4 <get_ldnumber+0x72>
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d10a      	bne.n	80040e4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d807      	bhi.n	80040e4 <get_ldnumber+0x72>
					vol = (int)i;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3301      	adds	r3, #1
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	e002      	b.n	80040ee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80040e8:	2300      	movs	r3, #0
 80040ea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80040ec:	693b      	ldr	r3, [r7, #16]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
	...

080040fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	70da      	strb	r2, [r3, #3]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f04f 32ff 	mov.w	r2, #4294967295
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004114:	6839      	ldr	r1, [r7, #0]
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fe fb12 	bl	8002740 <move_window>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <check_fs+0x2a>
 8004122:	2304      	movs	r3, #4
 8004124:	e038      	b.n	8004198 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3334      	adds	r3, #52	; 0x34
 800412a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe f856 	bl	80021e0 <ld_word>
 8004134:	4603      	mov	r3, r0
 8004136:	461a      	mov	r2, r3
 8004138:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <check_fs+0x48>
 8004140:	2303      	movs	r3, #3
 8004142:	e029      	b.n	8004198 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800414a:	2be9      	cmp	r3, #233	; 0xe9
 800414c:	d009      	beq.n	8004162 <check_fs+0x66>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004154:	2beb      	cmp	r3, #235	; 0xeb
 8004156:	d11e      	bne.n	8004196 <check_fs+0x9a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800415e:	2b90      	cmp	r3, #144	; 0x90
 8004160:	d119      	bne.n	8004196 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3334      	adds	r3, #52	; 0x34
 8004166:	3336      	adds	r3, #54	; 0x36
 8004168:	4618      	mov	r0, r3
 800416a:	f7fe f851 	bl	8002210 <ld_dword>
 800416e:	4603      	mov	r3, r0
 8004170:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004174:	4a0a      	ldr	r2, [pc, #40]	; (80041a0 <check_fs+0xa4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d101      	bne.n	800417e <check_fs+0x82>
 800417a:	2300      	movs	r3, #0
 800417c:	e00c      	b.n	8004198 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3334      	adds	r3, #52	; 0x34
 8004182:	3352      	adds	r3, #82	; 0x52
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe f843 	bl	8002210 <ld_dword>
 800418a:	4603      	mov	r3, r0
 800418c:	4a05      	ldr	r2, [pc, #20]	; (80041a4 <check_fs+0xa8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d101      	bne.n	8004196 <check_fs+0x9a>
 8004192:	2300      	movs	r3, #0
 8004194:	e000      	b.n	8004198 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004196:	2302      	movs	r3, #2
}
 8004198:	4618      	mov	r0, r3
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	00544146 	.word	0x00544146
 80041a4:	33544146 	.word	0x33544146

080041a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b096      	sub	sp, #88	; 0x58
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	4613      	mov	r3, r2
 80041b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff ff58 	bl	8004072 <get_ldnumber>
 80041c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80041c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	da01      	bge.n	80041ce <find_volume+0x26>
 80041ca:	230b      	movs	r3, #11
 80041cc:	e22e      	b.n	800462c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80041ce:	4aa8      	ldr	r2, [pc, #672]	; (8004470 <find_volume+0x2c8>)
 80041d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80041d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <find_volume+0x3a>
 80041de:	230c      	movs	r3, #12
 80041e0:	e224      	b.n	800462c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01a      	beq.n	800422e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	785b      	ldrb	r3, [r3, #1]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fd ff49 	bl	8002094 <disk_status>
 8004202:	4603      	mov	r3, r0
 8004204:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004208:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10c      	bne.n	800422e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <find_volume+0x82>
 800421a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004226:	230a      	movs	r3, #10
 8004228:	e200      	b.n	800462c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800422a:	2300      	movs	r3, #0
 800422c:	e1fe      	b.n	800462c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800422e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004236:	b2da      	uxtb	r2, r3
 8004238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800423c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423e:	785b      	ldrb	r3, [r3, #1]
 8004240:	4618      	mov	r0, r3
 8004242:	f7fd ff41 	bl	80020c8 <disk_initialize>
 8004246:	4603      	mov	r3, r0
 8004248:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800424c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004258:	2303      	movs	r3, #3
 800425a:	e1e7      	b.n	800462c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <find_volume+0xca>
 8004262:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800426e:	230a      	movs	r3, #10
 8004270:	e1dc      	b.n	800462c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004276:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004278:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800427a:	f7ff ff3f 	bl	80040fc <check_fs>
 800427e:	4603      	mov	r3, r0
 8004280:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004284:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004288:	2b02      	cmp	r3, #2
 800428a:	d14b      	bne.n	8004324 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800428c:	2300      	movs	r3, #0
 800428e:	643b      	str	r3, [r7, #64]	; 0x40
 8004290:	e01f      	b.n	80042d2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80042a0:	4413      	add	r3, r2
 80042a2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	3304      	adds	r3, #4
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d006      	beq.n	80042bc <find_volume+0x114>
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	3308      	adds	r3, #8
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fd ffac 	bl	8002210 <ld_dword>
 80042b8:	4602      	mov	r2, r0
 80042ba:	e000      	b.n	80042be <find_volume+0x116>
 80042bc:	2200      	movs	r2, #0
 80042be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80042c6:	440b      	add	r3, r1
 80042c8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80042cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ce:	3301      	adds	r3, #1
 80042d0:	643b      	str	r3, [r7, #64]	; 0x40
 80042d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d9dc      	bls.n	8004292 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80042d8:	2300      	movs	r3, #0
 80042da:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80042dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <find_volume+0x140>
 80042e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e4:	3b01      	subs	r3, #1
 80042e6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80042e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80042f0:	4413      	add	r3, r2
 80042f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80042f6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80042f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <find_volume+0x162>
 80042fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004300:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004302:	f7ff fefb 	bl	80040fc <check_fs>
 8004306:	4603      	mov	r3, r0
 8004308:	e000      	b.n	800430c <find_volume+0x164>
 800430a:	2303      	movs	r3, #3
 800430c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004310:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004314:	2b01      	cmp	r3, #1
 8004316:	d905      	bls.n	8004324 <find_volume+0x17c>
 8004318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800431a:	3301      	adds	r3, #1
 800431c:	643b      	str	r3, [r7, #64]	; 0x40
 800431e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004320:	2b03      	cmp	r3, #3
 8004322:	d9e1      	bls.n	80042e8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004324:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004328:	2b04      	cmp	r3, #4
 800432a:	d101      	bne.n	8004330 <find_volume+0x188>
 800432c:	2301      	movs	r3, #1
 800432e:	e17d      	b.n	800462c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004330:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004334:	2b01      	cmp	r3, #1
 8004336:	d901      	bls.n	800433c <find_volume+0x194>
 8004338:	230d      	movs	r3, #13
 800433a:	e177      	b.n	800462c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800433c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433e:	3334      	adds	r3, #52	; 0x34
 8004340:	330b      	adds	r3, #11
 8004342:	4618      	mov	r0, r3
 8004344:	f7fd ff4c 	bl	80021e0 <ld_word>
 8004348:	4603      	mov	r3, r0
 800434a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800434e:	d001      	beq.n	8004354 <find_volume+0x1ac>
 8004350:	230d      	movs	r3, #13
 8004352:	e16b      	b.n	800462c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004356:	3334      	adds	r3, #52	; 0x34
 8004358:	3316      	adds	r3, #22
 800435a:	4618      	mov	r0, r3
 800435c:	f7fd ff40 	bl	80021e0 <ld_word>
 8004360:	4603      	mov	r3, r0
 8004362:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <find_volume+0x1d0>
 800436a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436c:	3334      	adds	r3, #52	; 0x34
 800436e:	3324      	adds	r3, #36	; 0x24
 8004370:	4618      	mov	r0, r3
 8004372:	f7fd ff4d 	bl	8002210 <ld_dword>
 8004376:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800437c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004386:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438a:	789b      	ldrb	r3, [r3, #2]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d005      	beq.n	800439c <find_volume+0x1f4>
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	789b      	ldrb	r3, [r3, #2]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d001      	beq.n	800439c <find_volume+0x1f4>
 8004398:	230d      	movs	r3, #13
 800439a:	e147      	b.n	800462c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439e:	789b      	ldrb	r3, [r3, #2]
 80043a0:	461a      	mov	r2, r3
 80043a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80043aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	895b      	ldrh	r3, [r3, #10]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d008      	beq.n	80043d0 <find_volume+0x228>
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	895b      	ldrh	r3, [r3, #10]
 80043c2:	461a      	mov	r2, r3
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	895b      	ldrh	r3, [r3, #10]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <find_volume+0x22c>
 80043d0:	230d      	movs	r3, #13
 80043d2:	e12b      	b.n	800462c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80043d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d6:	3334      	adds	r3, #52	; 0x34
 80043d8:	3311      	adds	r3, #17
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fd ff00 	bl	80021e0 <ld_word>
 80043e0:	4603      	mov	r3, r0
 80043e2:	461a      	mov	r2, r3
 80043e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80043e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ea:	891b      	ldrh	r3, [r3, #8]
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <find_volume+0x252>
 80043f6:	230d      	movs	r3, #13
 80043f8:	e118      	b.n	800462c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	3334      	adds	r3, #52	; 0x34
 80043fe:	3313      	adds	r3, #19
 8004400:	4618      	mov	r0, r3
 8004402:	f7fd feed 	bl	80021e0 <ld_word>
 8004406:	4603      	mov	r3, r0
 8004408:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800440a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440c:	2b00      	cmp	r3, #0
 800440e:	d106      	bne.n	800441e <find_volume+0x276>
 8004410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004412:	3334      	adds	r3, #52	; 0x34
 8004414:	3320      	adds	r3, #32
 8004416:	4618      	mov	r0, r3
 8004418:	f7fd fefa 	bl	8002210 <ld_dword>
 800441c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	3334      	adds	r3, #52	; 0x34
 8004422:	330e      	adds	r3, #14
 8004424:	4618      	mov	r0, r3
 8004426:	f7fd fedb 	bl	80021e0 <ld_word>
 800442a:	4603      	mov	r3, r0
 800442c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800442e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <find_volume+0x290>
 8004434:	230d      	movs	r3, #13
 8004436:	e0f9      	b.n	800462c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004438:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800443a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443c:	4413      	add	r3, r2
 800443e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004440:	8912      	ldrh	r2, [r2, #8]
 8004442:	0912      	lsrs	r2, r2, #4
 8004444:	b292      	uxth	r2, r2
 8004446:	4413      	add	r3, r2
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800444a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	429a      	cmp	r2, r3
 8004450:	d201      	bcs.n	8004456 <find_volume+0x2ae>
 8004452:	230d      	movs	r3, #13
 8004454:	e0ea      	b.n	800462c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800445e:	8952      	ldrh	r2, [r2, #10]
 8004460:	fbb3 f3f2 	udiv	r3, r3, r2
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	2b00      	cmp	r3, #0
 800446a:	d103      	bne.n	8004474 <find_volume+0x2cc>
 800446c:	230d      	movs	r3, #13
 800446e:	e0dd      	b.n	800462c <find_volume+0x484>
 8004470:	200002c4 	.word	0x200002c4
		fmt = FS_FAT32;
 8004474:	2303      	movs	r3, #3
 8004476:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004480:	4293      	cmp	r3, r2
 8004482:	d802      	bhi.n	800448a <find_volume+0x2e2>
 8004484:	2302      	movs	r3, #2
 8004486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004490:	4293      	cmp	r3, r2
 8004492:	d802      	bhi.n	800449a <find_volume+0x2f2>
 8004494:	2301      	movs	r3, #1
 8004496:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	1c9a      	adds	r2, r3, #2
 800449e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80044a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044a6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80044a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80044aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ac:	441a      	add	r2, r3
 80044ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80044b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	441a      	add	r2, r3
 80044b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ba:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80044bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d11e      	bne.n	8004502 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	3334      	adds	r3, #52	; 0x34
 80044c8:	332a      	adds	r3, #42	; 0x2a
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fd fe88 	bl	80021e0 <ld_word>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <find_volume+0x332>
 80044d6:	230d      	movs	r3, #13
 80044d8:	e0a8      	b.n	800462c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044dc:	891b      	ldrh	r3, [r3, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <find_volume+0x33e>
 80044e2:	230d      	movs	r3, #13
 80044e4:	e0a2      	b.n	800462c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	3334      	adds	r3, #52	; 0x34
 80044ea:	332c      	adds	r3, #44	; 0x2c
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fd fe8f 	bl	8002210 <ld_dword>
 80044f2:	4602      	mov	r2, r0
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80044f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004500:	e01f      	b.n	8004542 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	891b      	ldrh	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <find_volume+0x366>
 800450a:	230d      	movs	r3, #13
 800450c:	e08e      	b.n	800462c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800450e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004510:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004514:	441a      	add	r2, r3
 8004516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004518:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800451a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800451e:	2b02      	cmp	r3, #2
 8004520:	d103      	bne.n	800452a <find_volume+0x382>
 8004522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	e00a      	b.n	8004540 <find_volume+0x398>
 800452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	4613      	mov	r3, r2
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	4413      	add	r3, r2
 8004534:	085a      	lsrs	r2, r3, #1
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004540:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004544:	69da      	ldr	r2, [r3, #28]
 8004546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004548:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800454c:	0a5b      	lsrs	r3, r3, #9
 800454e:	429a      	cmp	r2, r3
 8004550:	d201      	bcs.n	8004556 <find_volume+0x3ae>
 8004552:	230d      	movs	r3, #13
 8004554:	e06a      	b.n	800462c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004558:	f04f 32ff 	mov.w	r2, #4294967295
 800455c:	615a      	str	r2, [r3, #20]
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	695a      	ldr	r2, [r3, #20]
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	2280      	movs	r2, #128	; 0x80
 800456a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800456c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004570:	2b03      	cmp	r3, #3
 8004572:	d149      	bne.n	8004608 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004576:	3334      	adds	r3, #52	; 0x34
 8004578:	3330      	adds	r3, #48	; 0x30
 800457a:	4618      	mov	r0, r3
 800457c:	f7fd fe30 	bl	80021e0 <ld_word>
 8004580:	4603      	mov	r3, r0
 8004582:	2b01      	cmp	r3, #1
 8004584:	d140      	bne.n	8004608 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004588:	3301      	adds	r3, #1
 800458a:	4619      	mov	r1, r3
 800458c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800458e:	f7fe f8d7 	bl	8002740 <move_window>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d137      	bne.n	8004608 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8004598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459a:	2200      	movs	r2, #0
 800459c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	3334      	adds	r3, #52	; 0x34
 80045a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fd fe1a 	bl	80021e0 <ld_word>
 80045ac:	4603      	mov	r3, r0
 80045ae:	461a      	mov	r2, r3
 80045b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d127      	bne.n	8004608 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	3334      	adds	r3, #52	; 0x34
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fd fe27 	bl	8002210 <ld_dword>
 80045c2:	4603      	mov	r3, r0
 80045c4:	4a1b      	ldr	r2, [pc, #108]	; (8004634 <find_volume+0x48c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d11e      	bne.n	8004608 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80045ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045cc:	3334      	adds	r3, #52	; 0x34
 80045ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fd fe1c 	bl	8002210 <ld_dword>
 80045d8:	4603      	mov	r3, r0
 80045da:	4a17      	ldr	r2, [pc, #92]	; (8004638 <find_volume+0x490>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d113      	bne.n	8004608 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80045e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e2:	3334      	adds	r3, #52	; 0x34
 80045e4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fd fe11 	bl	8002210 <ld_dword>
 80045ee:	4602      	mov	r2, r0
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80045f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f6:	3334      	adds	r3, #52	; 0x34
 80045f8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fd fe07 	bl	8002210 <ld_dword>
 8004602:	4602      	mov	r2, r0
 8004604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004606:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800460e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <find_volume+0x494>)
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	4b08      	ldr	r3, [pc, #32]	; (800463c <find_volume+0x494>)
 800461a:	801a      	strh	r2, [r3, #0]
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <find_volume+0x494>)
 800461e:	881a      	ldrh	r2, [r3, #0]
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004624:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004626:	f7fe f823 	bl	8002670 <clear_lock>
#endif
	return FR_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3758      	adds	r7, #88	; 0x58
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	41615252 	.word	0x41615252
 8004638:	61417272 	.word	0x61417272
 800463c:	200002cc 	.word	0x200002cc

08004640 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800464a:	2309      	movs	r3, #9
 800464c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01c      	beq.n	800468e <validate+0x4e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d018      	beq.n	800468e <validate+0x4e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d013      	beq.n	800468e <validate+0x4e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	889a      	ldrh	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	88db      	ldrh	r3, [r3, #6]
 8004670:	429a      	cmp	r2, r3
 8004672:	d10c      	bne.n	800468e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	785b      	ldrb	r3, [r3, #1]
 800467a:	4618      	mov	r0, r3
 800467c:	f7fd fd0a 	bl	8002094 <disk_status>
 8004680:	4603      	mov	r3, r0
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <validate+0x4e>
			res = FR_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d102      	bne.n	800469a <validate+0x5a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	e000      	b.n	800469c <validate+0x5c>
 800469a:	2300      	movs	r3, #0
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	6013      	str	r3, [r2, #0]
	return res;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b088      	sub	sp, #32
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	4613      	mov	r3, r2
 80046b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80046be:	f107 0310 	add.w	r3, r7, #16
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff fcd5 	bl	8004072 <get_ldnumber>
 80046c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	da01      	bge.n	80046d4 <f_mount+0x28>
 80046d0:	230b      	movs	r3, #11
 80046d2:	e02b      	b.n	800472c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80046d4:	4a17      	ldr	r2, [pc, #92]	; (8004734 <f_mount+0x88>)
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80046e4:	69b8      	ldr	r0, [r7, #24]
 80046e6:	f7fd ffc3 	bl	8002670 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	490d      	ldr	r1, [pc, #52]	; (8004734 <f_mount+0x88>)
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <f_mount+0x66>
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d001      	beq.n	8004716 <f_mount+0x6a>
 8004712:	2300      	movs	r3, #0
 8004714:	e00a      	b.n	800472c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004716:	f107 010c 	add.w	r1, r7, #12
 800471a:	f107 0308 	add.w	r3, r7, #8
 800471e:	2200      	movs	r2, #0
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fd41 	bl	80041a8 <find_volume>
 8004726:	4603      	mov	r3, r0
 8004728:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800472a:	7dfb      	ldrb	r3, [r7, #23]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3720      	adds	r7, #32
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	200002c4 	.word	0x200002c4

08004738 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800473e:	af00      	add	r7, sp, #0
 8004740:	f107 030c 	add.w	r3, r7, #12
 8004744:	6018      	str	r0, [r3, #0]
 8004746:	f107 0308 	add.w	r3, r7, #8
 800474a:	6019      	str	r1, [r3, #0]
 800474c:	1dfb      	adds	r3, r7, #7
 800474e:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004750:	f107 030c 	add.w	r3, r7, #12
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <f_open+0x26>
 800475a:	2309      	movs	r3, #9
 800475c:	e231      	b.n	8004bc2 <f_open+0x48a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800475e:	1dfb      	adds	r3, r7, #7
 8004760:	1dfa      	adds	r2, r7, #7
 8004762:	7812      	ldrb	r2, [r2, #0]
 8004764:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004768:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800476a:	1dfb      	adds	r3, r7, #7
 800476c:	781a      	ldrb	r2, [r3, #0]
 800476e:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8004772:	f107 0308 	add.w	r3, r7, #8
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fd16 	bl	80041a8 <find_volume>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8004782:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004786:	2b00      	cmp	r3, #0
 8004788:	f040 8210 	bne.w	8004bac <f_open+0x474>
		dj.obj.fs = fs;
 800478c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004790:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8004794:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004798:	f107 0214 	add.w	r2, r7, #20
 800479c:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800479e:	f107 0308 	add.w	r3, r7, #8
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80047a8:	4611      	mov	r1, r2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fbf0 	bl	8003f90 <follow_path>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80047b6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d11b      	bne.n	80047f6 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80047be:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80047c2:	b25b      	sxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	da03      	bge.n	80047d0 <f_open+0x98>
				res = FR_INVALID_NAME;
 80047c8:	2306      	movs	r3, #6
 80047ca:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80047ce:	e012      	b.n	80047f6 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80047d0:	1dfb      	adds	r3, r7, #7
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	f023 0301 	bic.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80047e8:	4611      	mov	r1, r2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fd fdf8 	bl	80023e0 <chk_lock>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80047f6:	1dfb      	adds	r3, r7, #7
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	f003 031c 	and.w	r3, r3, #28
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 809b 	beq.w	800493a <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8004804:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004808:	2b00      	cmp	r3, #0
 800480a:	d019      	beq.n	8004840 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800480c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004810:	2b04      	cmp	r3, #4
 8004812:	d10e      	bne.n	8004832 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004814:	f7fd fe40 	bl	8002498 <enq_lock>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d006      	beq.n	800482c <f_open+0xf4>
 800481e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff f826 	bl	8003874 <dir_register>
 8004828:	4603      	mov	r3, r0
 800482a:	e000      	b.n	800482e <f_open+0xf6>
 800482c:	2312      	movs	r3, #18
 800482e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004832:	1dfb      	adds	r3, r7, #7
 8004834:	1dfa      	adds	r2, r7, #7
 8004836:	7812      	ldrb	r2, [r2, #0]
 8004838:	f042 0208 	orr.w	r2, r2, #8
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e012      	b.n	8004866 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004840:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8004844:	f003 0311 	and.w	r3, r3, #17
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <f_open+0x11c>
					res = FR_DENIED;
 800484c:	2307      	movs	r3, #7
 800484e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8004852:	e008      	b.n	8004866 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004854:	1dfb      	adds	r3, r7, #7
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <f_open+0x12e>
 8004860:	2308      	movs	r3, #8
 8004862:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004866:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800486a:	2b00      	cmp	r3, #0
 800486c:	f040 8082 	bne.w	8004974 <f_open+0x23c>
 8004870:	1dfb      	adds	r3, r7, #7
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d07b      	beq.n	8004974 <f_open+0x23c>
				dw = GET_FATTIME();
 800487c:	f7fd fca8 	bl	80021d0 <get_fattime>
 8004880:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004884:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004888:	330e      	adds	r3, #14
 800488a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800488e:	4618      	mov	r0, r3
 8004890:	f7fd fcfc 	bl	800228c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004894:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004898:	3316      	adds	r3, #22
 800489a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fd fcf4 	bl	800228c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80048a4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80048a8:	330b      	adds	r3, #11
 80048aa:	2220      	movs	r2, #32
 80048ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80048ae:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80048b2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80048b6:	4611      	mov	r1, r2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fe fc48 	bl	800314e <ld_clust>
 80048be:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80048c2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80048c6:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80048ca:	2200      	movs	r2, #0
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fe fc5d 	bl	800318c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80048d2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80048d6:	331c      	adds	r3, #28
 80048d8:	2100      	movs	r1, #0
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fd fcd6 	bl	800228c <st_dword>
					fs->wflag = 1;
 80048e0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80048e4:	2201      	movs	r2, #1
 80048e6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80048e8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d041      	beq.n	8004974 <f_open+0x23c>
						dw = fs->winsect;
 80048f0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80048fa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80048fe:	2200      	movs	r2, #0
 8004900:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8004904:	4618      	mov	r0, r3
 8004906:	f7fe f96a 	bl	8002bde <remove_chain>
 800490a:	4603      	mov	r3, r0
 800490c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8004910:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004914:	2b00      	cmp	r3, #0
 8004916:	d12d      	bne.n	8004974 <f_open+0x23c>
							res = move_window(fs, dw);
 8004918:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800491c:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8004920:	4618      	mov	r0, r3
 8004922:	f7fd ff0d 	bl	8002740 <move_window>
 8004926:	4603      	mov	r3, r0
 8004928:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800492c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004930:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8004934:	3a01      	subs	r2, #1
 8004936:	611a      	str	r2, [r3, #16]
 8004938:	e01c      	b.n	8004974 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800493a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800493e:	2b00      	cmp	r3, #0
 8004940:	d118      	bne.n	8004974 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004942:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8004946:	f003 0310 	and.w	r3, r3, #16
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <f_open+0x21e>
					res = FR_NO_FILE;
 800494e:	2304      	movs	r3, #4
 8004950:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8004954:	e00e      	b.n	8004974 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004956:	1dfb      	adds	r3, r7, #7
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d008      	beq.n	8004974 <f_open+0x23c>
 8004962:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <f_open+0x23c>
						res = FR_DENIED;
 800496e:	2307      	movs	r3, #7
 8004970:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8004974:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004978:	2b00      	cmp	r3, #0
 800497a:	d136      	bne.n	80049ea <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800497c:	1dfb      	adds	r3, r7, #7
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <f_open+0x25c>
				mode |= FA_MODIFIED;
 8004988:	1dfb      	adds	r3, r7, #7
 800498a:	1dfa      	adds	r2, r7, #7
 800498c:	7812      	ldrb	r2, [r2, #0]
 800498e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004992:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004994:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800499a:	f107 030c 	add.w	r3, r7, #12
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80049a2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80049a6:	f107 030c 	add.w	r3, r7, #12
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80049ae:	1dfb      	adds	r3, r7, #7
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bf14      	ite	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	2300      	moveq	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80049c6:	4611      	mov	r1, r2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fd fd87 	bl	80024dc <inc_lock>
 80049ce:	4602      	mov	r2, r0
 80049d0:	f107 030c 	add.w	r3, r7, #12
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80049d8:	f107 030c 	add.w	r3, r7, #12
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d102      	bne.n	80049ea <f_open+0x2b2>
 80049e4:	2302      	movs	r3, #2
 80049e6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80049ea:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 80dc 	bne.w	8004bac <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80049f4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80049f8:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80049fc:	4611      	mov	r1, r2
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fe fba5 	bl	800314e <ld_clust>
 8004a04:	4602      	mov	r2, r0
 8004a06:	f107 030c 	add.w	r3, r7, #12
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004a0e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004a12:	331c      	adds	r3, #28
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fd fbfb 	bl	8002210 <ld_dword>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	f107 030c 	add.w	r3, r7, #12
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004a24:	f107 030c 	add.w	r3, r7, #12
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004a2e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8004a32:	f107 030c 	add.w	r3, r7, #12
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004a3a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004a3e:	88da      	ldrh	r2, [r3, #6]
 8004a40:	f107 030c 	add.w	r3, r7, #12
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004a48:	f107 030c 	add.w	r3, r7, #12
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	1dfa      	adds	r2, r7, #7
 8004a50:	7812      	ldrb	r2, [r2, #0]
 8004a52:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004a54:	f107 030c 	add.w	r3, r7, #12
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004a5e:	f107 030c 	add.w	r3, r7, #12
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2200      	movs	r2, #0
 8004a66:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004a68:	f107 030c 	add.w	r3, r7, #12
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004a72:	f107 030c 	add.w	r3, r7, #12
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3330      	adds	r3, #48	; 0x30
 8004a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fd fc50 	bl	8002326 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004a86:	1dfb      	adds	r3, r7, #7
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	f003 0320 	and.w	r3, r3, #32
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 808c 	beq.w	8004bac <f_open+0x474>
 8004a94:	f107 030c 	add.w	r3, r7, #12
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8085 	beq.w	8004bac <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004aa2:	f107 030c 	add.w	r3, r7, #12
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	f107 030c 	add.w	r3, r7, #12
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004ab2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004ab6:	895b      	ldrh	r3, [r3, #10]
 8004ab8:	025b      	lsls	r3, r3, #9
 8004aba:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004abe:	f107 030c 	add.w	r3, r7, #12
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004aca:	f107 030c 	add.w	r3, r7, #12
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8004ad6:	e01f      	b.n	8004b18 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 8004ad8:	f107 030c 	add.w	r3, r7, #12
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fd fee7 	bl	80028b6 <get_fat>
 8004ae8:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8004aec:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d802      	bhi.n	8004afa <f_open+0x3c2>
 8004af4:	2302      	movs	r3, #2
 8004af6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004afa:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8004afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b02:	d102      	bne.n	8004b0a <f_open+0x3d2>
 8004b04:	2301      	movs	r3, #1
 8004b06:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004b0a:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8004b0e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8004b18:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d105      	bne.n	8004b2c <f_open+0x3f4>
 8004b20:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8004b24:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d8d5      	bhi.n	8004ad8 <f_open+0x3a0>
				}
				fp->clust = clst;
 8004b2c:	f107 030c 	add.w	r3, r7, #12
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8004b36:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004b38:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d135      	bne.n	8004bac <f_open+0x474>
 8004b40:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d02f      	beq.n	8004bac <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004b4c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004b50:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fd fe8f 	bl	8002878 <clust2sect>
 8004b5a:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8004b5e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d103      	bne.n	8004b6e <f_open+0x436>
						res = FR_INT_ERR;
 8004b66:	2302      	movs	r3, #2
 8004b68:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8004b6c:	e01e      	b.n	8004bac <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004b6e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004b72:	0a5a      	lsrs	r2, r3, #9
 8004b74:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004b78:	441a      	add	r2, r3
 8004b7a:	f107 030c 	add.w	r3, r7, #12
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004b82:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004b86:	7858      	ldrb	r0, [r3, #1]
 8004b88:	f107 030c 	add.w	r3, r7, #12
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004b92:	f107 030c 	add.w	r3, r7, #12
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6a1a      	ldr	r2, [r3, #32]
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f7fd faba 	bl	8002114 <disk_read>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <f_open+0x474>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004bac:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d004      	beq.n	8004bbe <f_open+0x486>
 8004bb4:	f107 030c 	add.w	r3, r7, #12
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004bbe:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08e      	sub	sp, #56	; 0x38
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f107 0214 	add.w	r2, r7, #20
 8004bea:	4611      	mov	r1, r2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fd27 	bl	8004640 <validate>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004bf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d107      	bne.n	8004c10 <f_read+0x44>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	7d5b      	ldrb	r3, [r3, #21]
 8004c04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004c08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <f_read+0x4a>
 8004c10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c14:	e115      	b.n	8004e42 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	7d1b      	ldrb	r3, [r3, #20]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <f_read+0x5a>
 8004c22:	2307      	movs	r3, #7
 8004c24:	e10d      	b.n	8004e42 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	f240 80fe 	bls.w	8004e38 <f_read+0x26c>
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8004c40:	e0fa      	b.n	8004e38 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f040 80c6 	bne.w	8004ddc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	0a5b      	lsrs	r3, r3, #9
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	8952      	ldrh	r2, [r2, #10]
 8004c5a:	3a01      	subs	r2, #1
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d12f      	bne.n	8004cc6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d103      	bne.n	8004c76 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	633b      	str	r3, [r7, #48]	; 0x30
 8004c74:	e013      	b.n	8004c9e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	4619      	mov	r1, r3
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f7fe f8a7 	bl	8002dd8 <clmt_clust>
 8004c8a:	6338      	str	r0, [r7, #48]	; 0x30
 8004c8c:	e007      	b.n	8004c9e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	4619      	mov	r1, r3
 8004c96:	4610      	mov	r0, r2
 8004c98:	f7fd fe0d 	bl	80028b6 <get_fat>
 8004c9c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d804      	bhi.n	8004cae <f_read+0xe2>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	755a      	strb	r2, [r3, #21]
 8004caa:	2302      	movs	r3, #2
 8004cac:	e0c9      	b.n	8004e42 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d104      	bne.n	8004cc0 <f_read+0xf4>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	755a      	strb	r2, [r3, #21]
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0c0      	b.n	8004e42 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f7fd fdd2 	bl	8002878 <clust2sect>
 8004cd4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d104      	bne.n	8004ce6 <f_read+0x11a>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	755a      	strb	r2, [r3, #21]
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e0ad      	b.n	8004e42 <f_read+0x276>
			sect += csect;
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	4413      	add	r3, r2
 8004cec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	0a5b      	lsrs	r3, r3, #9
 8004cf2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d039      	beq.n	8004d6e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	4413      	add	r3, r2
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	8952      	ldrh	r2, [r2, #10]
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d905      	bls.n	8004d14 <f_read+0x148>
					cc = fs->csize - csect;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	895b      	ldrh	r3, [r3, #10]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	7858      	ldrb	r0, [r3, #1]
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d1e:	f7fd f9f9 	bl	8002114 <disk_read>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <f_read+0x166>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	755a      	strb	r2, [r3, #21]
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e087      	b.n	8004e42 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	7d1b      	ldrb	r3, [r3, #20]
 8004d36:	b25b      	sxtb	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	da14      	bge.n	8004d66 <f_read+0x19a>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a1a      	ldr	r2, [r3, #32]
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d90d      	bls.n	8004d66 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a1a      	ldr	r2, [r3, #32]
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	025b      	lsls	r3, r3, #9
 8004d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d56:	18d0      	adds	r0, r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3330      	adds	r3, #48	; 0x30
 8004d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d60:	4619      	mov	r1, r3
 8004d62:	f7fd fabf 	bl	80022e4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	025b      	lsls	r3, r3, #9
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8004d6c:	e050      	b.n	8004e10 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d02e      	beq.n	8004dd6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	7d1b      	ldrb	r3, [r3, #20]
 8004d7c:	b25b      	sxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	da18      	bge.n	8004db4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	7858      	ldrb	r0, [r3, #1]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a1a      	ldr	r2, [r3, #32]
 8004d90:	2301      	movs	r3, #1
 8004d92:	f7fd f9df 	bl	8002154 <disk_write>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d004      	beq.n	8004da6 <f_read+0x1da>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	755a      	strb	r2, [r3, #21]
 8004da2:	2301      	movs	r3, #1
 8004da4:	e04d      	b.n	8004e42 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	7d1b      	ldrb	r3, [r3, #20]
 8004daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	7858      	ldrb	r0, [r3, #1]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	f7fd f9a7 	bl	8002114 <disk_read>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d004      	beq.n	8004dd6 <f_read+0x20a>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	755a      	strb	r2, [r3, #21]
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e035      	b.n	8004e42 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004de8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d901      	bls.n	8004df6 <f_read+0x22a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e04:	4413      	add	r3, r2
 8004e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e08:	4619      	mov	r1, r3
 8004e0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e0c:	f7fd fa6a 	bl	80022e4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e14:	4413      	add	r3, r2
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	699a      	ldr	r2, [r3, #24]
 8004e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1e:	441a      	add	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	619a      	str	r2, [r3, #24]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	441a      	add	r2, r3
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f47f af01 	bne.w	8004c42 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3738      	adds	r7, #56	; 0x38
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b08c      	sub	sp, #48	; 0x30
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	607a      	str	r2, [r7, #4]
 8004e56:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f107 0210 	add.w	r2, r7, #16
 8004e68:	4611      	mov	r1, r2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff fbe8 	bl	8004640 <validate>
 8004e70:	4603      	mov	r3, r0
 8004e72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004e76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d107      	bne.n	8004e8e <f_write+0x44>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	7d5b      	ldrb	r3, [r3, #21]
 8004e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004e86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <f_write+0x4a>
 8004e8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e92:	e14b      	b.n	800512c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	7d1b      	ldrb	r3, [r3, #20]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <f_write+0x5a>
 8004ea0:	2307      	movs	r3, #7
 8004ea2:	e143      	b.n	800512c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	699a      	ldr	r2, [r3, #24]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	441a      	add	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	f080 812d 	bcs.w	8005110 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8004ebe:	e127      	b.n	8005110 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f040 80e3 	bne.w	8005094 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	0a5b      	lsrs	r3, r3, #9
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	8952      	ldrh	r2, [r2, #10]
 8004ed8:	3a01      	subs	r2, #1
 8004eda:	4013      	ands	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d143      	bne.n	8004f6c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10c      	bne.n	8004f06 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d11a      	bne.n	8004f2e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2100      	movs	r1, #0
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fd fed3 	bl	8002ca8 <create_chain>
 8004f02:	62b8      	str	r0, [r7, #40]	; 0x28
 8004f04:	e013      	b.n	8004f2e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d007      	beq.n	8004f1e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	4619      	mov	r1, r3
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f7fd ff5f 	bl	8002dd8 <clmt_clust>
 8004f1a:	62b8      	str	r0, [r7, #40]	; 0x28
 8004f1c:	e007      	b.n	8004f2e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	4619      	mov	r1, r3
 8004f26:	4610      	mov	r0, r2
 8004f28:	f7fd febe 	bl	8002ca8 <create_chain>
 8004f2c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80f2 	beq.w	800511a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d104      	bne.n	8004f46 <f_write+0xfc>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	755a      	strb	r2, [r3, #21]
 8004f42:	2302      	movs	r3, #2
 8004f44:	e0f2      	b.n	800512c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4c:	d104      	bne.n	8004f58 <f_write+0x10e>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	755a      	strb	r2, [r3, #21]
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0e9      	b.n	800512c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f5c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <f_write+0x122>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f6a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	7d1b      	ldrb	r3, [r3, #20]
 8004f70:	b25b      	sxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	da18      	bge.n	8004fa8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	7858      	ldrb	r0, [r3, #1]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a1a      	ldr	r2, [r3, #32]
 8004f84:	2301      	movs	r3, #1
 8004f86:	f7fd f8e5 	bl	8002154 <disk_write>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d004      	beq.n	8004f9a <f_write+0x150>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	755a      	strb	r2, [r3, #21]
 8004f96:	2301      	movs	r3, #1
 8004f98:	e0c8      	b.n	800512c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	7d1b      	ldrb	r3, [r3, #20]
 8004f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	f7fd fc61 	bl	8002878 <clust2sect>
 8004fb6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d104      	bne.n	8004fc8 <f_write+0x17e>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	755a      	strb	r2, [r3, #21]
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e0b1      	b.n	800512c <f_write+0x2e2>
			sect += csect;
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	4413      	add	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	0a5b      	lsrs	r3, r3, #9
 8004fd4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d03c      	beq.n	8005056 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	8952      	ldrh	r2, [r2, #10]
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d905      	bls.n	8004ff6 <f_write+0x1ac>
					cc = fs->csize - csect;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	895b      	ldrh	r3, [r3, #10]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	7858      	ldrb	r0, [r3, #1]
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	69f9      	ldr	r1, [r7, #28]
 8005000:	f7fd f8a8 	bl	8002154 <disk_write>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d004      	beq.n	8005014 <f_write+0x1ca>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	755a      	strb	r2, [r3, #21]
 8005010:	2301      	movs	r3, #1
 8005012:	e08b      	b.n	800512c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1a      	ldr	r2, [r3, #32]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	6a3a      	ldr	r2, [r7, #32]
 800501e:	429a      	cmp	r2, r3
 8005020:	d915      	bls.n	800504e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a1a      	ldr	r2, [r3, #32]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	025b      	lsls	r3, r3, #9
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	4413      	add	r3, r2
 8005036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800503a:	4619      	mov	r1, r3
 800503c:	f7fd f952 	bl	80022e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	7d1b      	ldrb	r3, [r3, #20]
 8005044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005048:	b2da      	uxtb	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	025b      	lsls	r3, r3, #9
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005054:	e03f      	b.n	80050d6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	429a      	cmp	r2, r3
 800505e:	d016      	beq.n	800508e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	699a      	ldr	r2, [r3, #24]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005068:	429a      	cmp	r2, r3
 800506a:	d210      	bcs.n	800508e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	7858      	ldrb	r0, [r3, #1]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005076:	2301      	movs	r3, #1
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	f7fd f84b 	bl	8002114 <disk_read>
 800507e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005080:	2b00      	cmp	r3, #0
 8005082:	d004      	beq.n	800508e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2201      	movs	r2, #1
 8005088:	755a      	strb	r2, [r3, #21]
 800508a:	2301      	movs	r3, #1
 800508c:	e04e      	b.n	800512c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80050a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d901      	bls.n	80050ae <f_write+0x264>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050bc:	4413      	add	r3, r2
 80050be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c0:	69f9      	ldr	r1, [r7, #28]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fd f90e 	bl	80022e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	7d1b      	ldrb	r3, [r3, #20]
 80050cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80050d6:	69fa      	ldr	r2, [r7, #28]
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	4413      	add	r3, r2
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	441a      	add	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	619a      	str	r2, [r3, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	bf38      	it	cc
 80050f6:	461a      	movcc	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	60da      	str	r2, [r3, #12]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	441a      	add	r2, r3
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	f47f aed4 	bne.w	8004ec0 <f_write+0x76>
 8005118:	e000      	b.n	800511c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800511a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	7d1b      	ldrb	r3, [r3, #20]
 8005120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005124:	b2da      	uxtb	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3730      	adds	r7, #48	; 0x30
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f107 0208 	add.w	r2, r7, #8
 8005142:	4611      	mov	r1, r2
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fa7b 	bl	8004640 <validate>
 800514a:	4603      	mov	r3, r0
 800514c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800514e:	7dfb      	ldrb	r3, [r7, #23]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d168      	bne.n	8005226 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	7d1b      	ldrb	r3, [r3, #20]
 8005158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515c:	2b00      	cmp	r3, #0
 800515e:	d062      	beq.n	8005226 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	7d1b      	ldrb	r3, [r3, #20]
 8005164:	b25b      	sxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	da15      	bge.n	8005196 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	7858      	ldrb	r0, [r3, #1]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1a      	ldr	r2, [r3, #32]
 8005178:	2301      	movs	r3, #1
 800517a:	f7fc ffeb 	bl	8002154 <disk_write>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <f_sync+0x54>
 8005184:	2301      	movs	r3, #1
 8005186:	e04f      	b.n	8005228 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	7d1b      	ldrb	r3, [r3, #20]
 800518c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005190:	b2da      	uxtb	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005196:	f7fd f81b 	bl	80021d0 <get_fattime>
 800519a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	4619      	mov	r1, r3
 80051a4:	4610      	mov	r0, r2
 80051a6:	f7fd facb 	bl	8002740 <move_window>
 80051aa:	4603      	mov	r3, r0
 80051ac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d138      	bne.n	8005226 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	330b      	adds	r3, #11
 80051be:	781a      	ldrb	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	330b      	adds	r3, #11
 80051c4:	f042 0220 	orr.w	r2, r2, #32
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	461a      	mov	r2, r3
 80051d6:	68f9      	ldr	r1, [r7, #12]
 80051d8:	f7fd ffd8 	bl	800318c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f103 021c 	add.w	r2, r3, #28
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	4619      	mov	r1, r3
 80051e8:	4610      	mov	r0, r2
 80051ea:	f7fd f84f 	bl	800228c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3316      	adds	r3, #22
 80051f2:	6939      	ldr	r1, [r7, #16]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fd f849 	bl	800228c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3312      	adds	r3, #18
 80051fe:	2100      	movs	r1, #0
 8005200:	4618      	mov	r0, r3
 8005202:	f7fd f828 	bl	8002256 <st_word>
					fs->wflag = 1;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2201      	movs	r2, #1
 800520a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4618      	mov	r0, r3
 8005210:	f7fd fac4 	bl	800279c <sync_fs>
 8005214:	4603      	mov	r3, r0
 8005216:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	7d1b      	ldrb	r3, [r3, #20]
 800521c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005220:	b2da      	uxtb	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005226:	7dfb      	ldrb	r3, [r7, #23]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff ff7b 	bl	8005134 <f_sync>
 800523e:	4603      	mov	r3, r0
 8005240:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d118      	bne.n	800527a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f107 0208 	add.w	r2, r7, #8
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff f9f5 	bl	8004640 <validate>
 8005256:	4603      	mov	r3, r0
 8005258:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800525a:	7bfb      	ldrb	r3, [r7, #15]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10c      	bne.n	800527a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	4618      	mov	r0, r3
 8005266:	f7fd f9c7 	bl	80025f8 <dec_lock>
 800526a:	4603      	mov	r3, r0
 800526c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d102      	bne.n	800527a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800527a:	7bfb      	ldrb	r3, [r7, #15]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b090      	sub	sp, #64	; 0x40
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f107 0208 	add.w	r2, r7, #8
 8005294:	4611      	mov	r1, r2
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff f9d2 	bl	8004640 <validate>
 800529c:	4603      	mov	r3, r0
 800529e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80052a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <f_lseek+0x2e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	7d5b      	ldrb	r3, [r3, #21]
 80052ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80052b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <f_lseek+0x3c>
 80052ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80052be:	e1e6      	b.n	800568e <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80d1 	beq.w	800546c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d0:	d15a      	bne.n	8005388 <f_lseek+0x104>
			tbl = fp->cltbl;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	1d1a      	adds	r2, r3, #4
 80052dc:	627a      	str	r2, [r7, #36]	; 0x24
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	2302      	movs	r3, #2
 80052e4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d03a      	beq.n	8005368 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	2300      	movs	r3, #0
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	3302      	adds	r3, #2
 80052fe:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	3301      	adds	r3, #1
 8005308:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800530e:	4618      	mov	r0, r3
 8005310:	f7fd fad1 	bl	80028b6 <get_fat>
 8005314:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	2b01      	cmp	r3, #1
 800531a:	d804      	bhi.n	8005326 <f_lseek+0xa2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	755a      	strb	r2, [r3, #21]
 8005322:	2302      	movs	r3, #2
 8005324:	e1b3      	b.n	800568e <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532c:	d104      	bne.n	8005338 <f_lseek+0xb4>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	755a      	strb	r2, [r3, #21]
 8005334:	2301      	movs	r3, #1
 8005336:	e1aa      	b.n	800568e <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3301      	adds	r3, #1
 800533c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533e:	429a      	cmp	r2, r3
 8005340:	d0de      	beq.n	8005300 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8005342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	429a      	cmp	r2, r3
 8005348:	d809      	bhi.n	800535e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	1d1a      	adds	r2, r3, #4
 800534e:	627a      	str	r2, [r7, #36]	; 0x24
 8005350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	1d1a      	adds	r2, r3, #4
 8005358:	627a      	str	r2, [r7, #36]	; 0x24
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005364:	429a      	cmp	r2, r3
 8005366:	d3c4      	bcc.n	80052f2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800536e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8005370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	429a      	cmp	r2, r3
 8005376:	d803      	bhi.n	8005380 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e184      	b.n	800568a <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8005380:	2311      	movs	r3, #17
 8005382:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005386:	e180      	b.n	800568a <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d902      	bls.n	8005398 <f_lseek+0x114>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 8172 	beq.w	800568a <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	3b01      	subs	r3, #1
 80053aa:	4619      	mov	r1, r3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fd fd13 	bl	8002dd8 <clmt_clust>
 80053b2:	4602      	mov	r2, r0
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	4619      	mov	r1, r3
 80053c0:	4610      	mov	r0, r2
 80053c2:	f7fd fa59 	bl	8002878 <clust2sect>
 80053c6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d104      	bne.n	80053d8 <f_lseek+0x154>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2202      	movs	r2, #2
 80053d2:	755a      	strb	r2, [r3, #21]
 80053d4:	2302      	movs	r3, #2
 80053d6:	e15a      	b.n	800568e <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	3b01      	subs	r3, #1
 80053dc:	0a5b      	lsrs	r3, r3, #9
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	8952      	ldrh	r2, [r2, #10]
 80053e2:	3a01      	subs	r2, #1
 80053e4:	4013      	ands	r3, r2
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	4413      	add	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 8148 	beq.w	800568a <f_lseek+0x406>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	429a      	cmp	r2, r3
 8005402:	f000 8142 	beq.w	800568a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	7d1b      	ldrb	r3, [r3, #20]
 800540a:	b25b      	sxtb	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	da18      	bge.n	8005442 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	7858      	ldrb	r0, [r3, #1]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1a      	ldr	r2, [r3, #32]
 800541e:	2301      	movs	r3, #1
 8005420:	f7fc fe98 	bl	8002154 <disk_write>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <f_lseek+0x1b0>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	755a      	strb	r2, [r3, #21]
 8005430:	2301      	movs	r3, #1
 8005432:	e12c      	b.n	800568e <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	7d1b      	ldrb	r3, [r3, #20]
 8005438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800543c:	b2da      	uxtb	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	7858      	ldrb	r0, [r3, #1]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800544c:	2301      	movs	r3, #1
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	f7fc fe60 	bl	8002114 <disk_read>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d004      	beq.n	8005464 <f_lseek+0x1e0>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	755a      	strb	r2, [r3, #21]
 8005460:	2301      	movs	r3, #1
 8005462:	e114      	b.n	800568e <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	621a      	str	r2, [r3, #32]
 800546a:	e10e      	b.n	800568a <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d908      	bls.n	8005488 <f_lseek+0x204>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	7d1b      	ldrb	r3, [r3, #20]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d102      	bne.n	8005488 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	637b      	str	r3, [r7, #52]	; 0x34
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005496:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 80a7 	beq.w	80055ee <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	895b      	ldrh	r3, [r3, #10]
 80054a4:	025b      	lsls	r3, r3, #9
 80054a6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d01b      	beq.n	80054e6 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	1e5a      	subs	r2, r3, #1
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	1e59      	subs	r1, r3, #1
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d30f      	bcc.n	80054e6 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	1e5a      	subs	r2, r3, #1
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	425b      	negs	r3, r3
 80054ce:	401a      	ands	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e4:	e022      	b.n	800552c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80054ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d119      	bne.n	8005526 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2100      	movs	r1, #0
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fd fbd6 	bl	8002ca8 <create_chain>
 80054fc:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	2b01      	cmp	r3, #1
 8005502:	d104      	bne.n	800550e <f_lseek+0x28a>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	755a      	strb	r2, [r3, #21]
 800550a:	2302      	movs	r3, #2
 800550c:	e0bf      	b.n	800568e <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005514:	d104      	bne.n	8005520 <f_lseek+0x29c>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	755a      	strb	r2, [r3, #21]
 800551c:	2301      	movs	r3, #1
 800551e:	e0b6      	b.n	800568e <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005524:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800552a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800552c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552e:	2b00      	cmp	r3, #0
 8005530:	d05d      	beq.n	80055ee <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8005532:	e03a      	b.n	80055aa <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699a      	ldr	r2, [r3, #24]
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	441a      	add	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	7d1b      	ldrb	r3, [r3, #20]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00b      	beq.n	800556c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005558:	4618      	mov	r0, r3
 800555a:	f7fd fba5 	bl	8002ca8 <create_chain>
 800555e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8005560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005562:	2b00      	cmp	r3, #0
 8005564:	d108      	bne.n	8005578 <f_lseek+0x2f4>
							ofs = 0; break;
 8005566:	2300      	movs	r3, #0
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	e022      	b.n	80055b2 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005570:	4618      	mov	r0, r3
 8005572:	f7fd f9a0 	bl	80028b6 <get_fat>
 8005576:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557e:	d104      	bne.n	800558a <f_lseek+0x306>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	755a      	strb	r2, [r3, #21]
 8005586:	2301      	movs	r3, #1
 8005588:	e081      	b.n	800568e <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	2b01      	cmp	r3, #1
 800558e:	d904      	bls.n	800559a <f_lseek+0x316>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005596:	429a      	cmp	r2, r3
 8005598:	d304      	bcc.n	80055a4 <f_lseek+0x320>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2202      	movs	r2, #2
 800559e:	755a      	strb	r2, [r3, #21]
 80055a0:	2302      	movs	r3, #2
 80055a2:	e074      	b.n	800568e <f_lseek+0x40a>
					fp->clust = clst;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055a8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d8c0      	bhi.n	8005534 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	441a      	add	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d012      	beq.n	80055ee <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fd f953 	bl	8002878 <clust2sect>
 80055d2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80055d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d104      	bne.n	80055e4 <f_lseek+0x360>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	755a      	strb	r2, [r3, #21]
 80055e0:	2302      	movs	r3, #2
 80055e2:	e054      	b.n	800568e <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	0a5b      	lsrs	r3, r3, #9
 80055e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ea:	4413      	add	r3, r2
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	699a      	ldr	r2, [r3, #24]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d90a      	bls.n	8005610 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699a      	ldr	r2, [r3, #24]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	7d1b      	ldrb	r3, [r3, #20]
 8005606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800560a:	b2da      	uxtb	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005618:	2b00      	cmp	r3, #0
 800561a:	d036      	beq.n	800568a <f_lseek+0x406>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005622:	429a      	cmp	r2, r3
 8005624:	d031      	beq.n	800568a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	7d1b      	ldrb	r3, [r3, #20]
 800562a:	b25b      	sxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	da18      	bge.n	8005662 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	7858      	ldrb	r0, [r3, #1]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1a      	ldr	r2, [r3, #32]
 800563e:	2301      	movs	r3, #1
 8005640:	f7fc fd88 	bl	8002154 <disk_write>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d004      	beq.n	8005654 <f_lseek+0x3d0>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	755a      	strb	r2, [r3, #21]
 8005650:	2301      	movs	r3, #1
 8005652:	e01c      	b.n	800568e <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	7d1b      	ldrb	r3, [r3, #20]
 8005658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800565c:	b2da      	uxtb	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	7858      	ldrb	r0, [r3, #1]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800566c:	2301      	movs	r3, #1
 800566e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005670:	f7fc fd50 	bl	8002114 <disk_read>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d004      	beq.n	8005684 <f_lseek+0x400>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	755a      	strb	r2, [r3, #21]
 8005680:	2301      	movs	r3, #1
 8005682:	e004      	b.n	800568e <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005688:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800568a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800568e:	4618      	mov	r0, r3
 8005690:	3740      	adds	r7, #64	; 0x40
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800569c:	af00      	add	r7, sp, #0
 800569e:	1d3b      	adds	r3, r7, #4
 80056a0:	6018      	str	r0, [r3, #0]
 80056a2:	463b      	mov	r3, r7
 80056a4:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80056a6:	1d3b      	adds	r3, r7, #4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <f_opendir+0x1c>
 80056ae:	2309      	movs	r3, #9
 80056b0:	e08a      	b.n	80057c8 <f_opendir+0x132>

	/* Get logical drive */
	obj = &dp->obj;
 80056b2:	1d3b      	adds	r3, r7, #4
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 80056ba:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 80056be:	463b      	mov	r3, r7
 80056c0:	2200      	movs	r2, #0
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fe fd70 	bl	80041a8 <find_volume>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 80056ce:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d16e      	bne.n	80057b4 <f_opendir+0x11e>
		obj->fs = fs;
 80056d6:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80056da:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80056de:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 80056e0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80056e4:	f107 020c 	add.w	r2, r7, #12
 80056e8:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80056ea:	463b      	mov	r3, r7
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	1d3b      	adds	r3, r7, #4
 80056f0:	4611      	mov	r1, r2
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	f7fe fc4c 	bl	8003f90 <follow_path>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 80056fe:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005702:	2b00      	cmp	r3, #0
 8005704:	d14f      	bne.n	80057a6 <f_opendir+0x110>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8005706:	1d3b      	adds	r3, r7, #4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800570e:	b25b      	sxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	db17      	blt.n	8005744 <f_opendir+0xae>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8005714:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005718:	799b      	ldrb	r3, [r3, #6]
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00d      	beq.n	800573e <f_opendir+0xa8>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8005722:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8005726:	1d3b      	adds	r3, r7, #4
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f7fd fd0d 	bl	800314e <ld_clust>
 8005734:	4602      	mov	r2, r0
 8005736:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800573a:	609a      	str	r2, [r3, #8]
 800573c:	e002      	b.n	8005744 <f_opendir+0xae>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800573e:	2305      	movs	r3, #5
 8005740:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 8005744:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005748:	2b00      	cmp	r3, #0
 800574a:	d12c      	bne.n	80057a6 <f_opendir+0x110>
				obj->id = fs->id;
 800574c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005750:	88da      	ldrh	r2, [r3, #6]
 8005752:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005756:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8005758:	1d3b      	adds	r3, r7, #4
 800575a:	2100      	movs	r1, #0
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	f7fd fb6f 	bl	8002e40 <dir_sdi>
 8005762:	4603      	mov	r3, r0
 8005764:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8005768:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800576c:	2b00      	cmp	r3, #0
 800576e:	d11a      	bne.n	80057a6 <f_opendir+0x110>
					if (obj->sclust) {
 8005770:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d011      	beq.n	800579e <f_opendir+0x108>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800577a:	1d3b      	adds	r3, r7, #4
 800577c:	2100      	movs	r1, #0
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	f7fc feac 	bl	80024dc <inc_lock>
 8005784:	4602      	mov	r2, r0
 8005786:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800578a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800578c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d107      	bne.n	80057a6 <f_opendir+0x110>
 8005796:	2312      	movs	r3, #18
 8005798:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 800579c:	e003      	b.n	80057a6 <f_opendir+0x110>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800579e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80057a2:	2200      	movs	r2, #0
 80057a4:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80057a6:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d102      	bne.n	80057b4 <f_opendir+0x11e>
 80057ae:	2305      	movs	r3, #5
 80057b0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80057b4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <f_opendir+0x12e>
 80057bc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80057c4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b084      	sub	sp, #16
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f107 0208 	add.w	r2, r7, #8
 80057e0:	4611      	mov	r1, r2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fe ff2c 	bl	8004640 <validate>
 80057e8:	4603      	mov	r3, r0
 80057ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d110      	bne.n	8005814 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d006      	beq.n	8005808 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fc fefa 	bl	80025f8 <dec_lock>
 8005804:	4603      	mov	r3, r0
 8005806:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d102      	bne.n	8005814 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8005824:	af00      	add	r7, sp, #0
 8005826:	1d3b      	adds	r3, r7, #4
 8005828:	6018      	str	r0, [r3, #0]
 800582a:	463b      	mov	r3, r7
 800582c:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800582e:	1d3b      	adds	r3, r7, #4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005836:	4611      	mov	r1, r2
 8005838:	4618      	mov	r0, r3
 800583a:	f7fe ff01 	bl	8004640 <validate>
 800583e:	4603      	mov	r3, r0
 8005840:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 8005844:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8005848:	2b00      	cmp	r3, #0
 800584a:	d139      	bne.n	80058c0 <f_readdir+0xa2>
		if (!fno) {
 800584c:	463b      	mov	r3, r7
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d108      	bne.n	8005866 <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8005854:	1d3b      	adds	r3, r7, #4
 8005856:	2100      	movs	r1, #0
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	f7fd faf1 	bl	8002e40 <dir_sdi>
 800585e:	4603      	mov	r3, r0
 8005860:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8005864:	e02c      	b.n	80058c0 <f_readdir+0xa2>
		} else {
			INIT_NAMBUF(fs);
 8005866:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800586a:	f107 0208 	add.w	r2, r7, #8
 800586e:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8005870:	1d3b      	adds	r3, r7, #4
 8005872:	2100      	movs	r1, #0
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	f7fd fe96 	bl	80035a6 <dir_read>
 800587a:	4603      	mov	r3, r0
 800587c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8005880:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8005884:	2b04      	cmp	r3, #4
 8005886:	d102      	bne.n	800588e <f_readdir+0x70>
 8005888:	2300      	movs	r3, #0
 800588a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 800588e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8005892:	2b00      	cmp	r3, #0
 8005894:	d114      	bne.n	80058c0 <f_readdir+0xa2>
				get_fileinfo(dp, fno);		/* Get the object information */
 8005896:	463a      	mov	r2, r7
 8005898:	1d3b      	adds	r3, r7, #4
 800589a:	6811      	ldr	r1, [r2, #0]
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	f7fe f8e1 	bl	8003a64 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80058a2:	1d3b      	adds	r3, r7, #4
 80058a4:	2100      	movs	r1, #0
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	f7fd fb45 	bl	8002f36 <dir_next>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80058b2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	d102      	bne.n	80058c0 <f_readdir+0xa2>
 80058ba:	2300      	movs	r3, #0
 80058bc:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80058c0:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b092      	sub	sp, #72	; 0x48
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80058da:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80058de:	f107 030c 	add.w	r3, r7, #12
 80058e2:	2200      	movs	r2, #0
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fe fc5f 	bl	80041a8 <find_volume>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80058f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f040 8099 	bne.w	8005a2c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80058fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	695a      	ldr	r2, [r3, #20]
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	3b02      	subs	r3, #2
 800590a:	429a      	cmp	r2, r3
 800590c:	d804      	bhi.n	8005918 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	695a      	ldr	r2, [r3, #20]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	e089      	b.n	8005a2c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d128      	bne.n	8005976 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8005924:	2302      	movs	r3, #2
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800592c:	f107 0314 	add.w	r3, r7, #20
 8005930:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005932:	4618      	mov	r0, r3
 8005934:	f7fc ffbf 	bl	80028b6 <get_fat>
 8005938:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005940:	d103      	bne.n	800594a <f_getfree+0x7c>
 8005942:	2301      	movs	r3, #1
 8005944:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005948:	e063      	b.n	8005a12 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	2b01      	cmp	r3, #1
 800594e:	d103      	bne.n	8005958 <f_getfree+0x8a>
 8005950:	2302      	movs	r3, #2
 8005952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005956:	e05c      	b.n	8005a12 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d102      	bne.n	8005964 <f_getfree+0x96>
 800595e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005960:	3301      	adds	r3, #1
 8005962:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8005964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005966:	3301      	adds	r3, #1
 8005968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005970:	429a      	cmp	r2, r3
 8005972:	d3db      	bcc.n	800592c <f_getfree+0x5e>
 8005974:	e04d      	b.n	8005a12 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8005982:	2300      	movs	r3, #0
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
 8005986:	2300      	movs	r3, #0
 8005988:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800598a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598c:	2b00      	cmp	r3, #0
 800598e:	d113      	bne.n	80059b8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	63ba      	str	r2, [r7, #56]	; 0x38
 8005998:	4619      	mov	r1, r3
 800599a:	f7fc fed1 	bl	8002740 <move_window>
 800599e:	4603      	mov	r3, r0
 80059a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80059a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d131      	bne.n	8005a10 <f_getfree+0x142>
							p = fs->win;
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	3334      	adds	r3, #52	; 0x34
 80059b0:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80059b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059b6:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d10f      	bne.n	80059e0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80059c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059c2:	f7fc fc0d 	bl	80021e0 <ld_word>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d102      	bne.n	80059d2 <f_getfree+0x104>
 80059cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ce:	3301      	adds	r3, #1
 80059d0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	3302      	adds	r3, #2
 80059d6:	633b      	str	r3, [r7, #48]	; 0x30
 80059d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059da:	3b02      	subs	r3, #2
 80059dc:	637b      	str	r3, [r7, #52]	; 0x34
 80059de:	e010      	b.n	8005a02 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80059e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059e2:	f7fc fc15 	bl	8002210 <ld_dword>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d102      	bne.n	80059f6 <f_getfree+0x128>
 80059f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f2:	3301      	adds	r3, #1
 80059f4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80059f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f8:	3304      	adds	r3, #4
 80059fa:	633b      	str	r3, [r7, #48]	; 0x30
 80059fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fe:	3b04      	subs	r3, #4
 8005a00:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8005a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a04:	3b01      	subs	r3, #1
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1bd      	bne.n	800598a <f_getfree+0xbc>
 8005a0e:	e000      	b.n	8005a12 <f_getfree+0x144>
							if (res != FR_OK) break;
 8005a10:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a16:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a1c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8005a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a20:	791a      	ldrb	r2, [r3, #4]
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	f042 0201 	orr.w	r2, r2, #1
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8005a2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3748      	adds	r7, #72	; 0x48
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	70fb      	strb	r3, [r7, #3]

	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	db25      	blt.n	8005a9c <putc_bfd+0x64>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	60fa      	str	r2, [r7, #12]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	4413      	add	r3, r2
 8005a5a:	78fa      	ldrb	r2, [r7, #3]
 8005a5c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b3c      	cmp	r3, #60	; 0x3c
 8005a62:	dd12      	ble.n	8005a8a <putc_bfd+0x52>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6818      	ldr	r0, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f103 010c 	add.w	r1, r3, #12
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	f107 0308 	add.w	r3, r7, #8
 8005a74:	f7ff f9e9 	bl	8004e4a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d101      	bne.n	8005a84 <putc_bfd+0x4c>
 8005a80:	2300      	movs	r3, #0
 8005a82:	e001      	b.n	8005a88 <putc_bfd+0x50>
 8005a84:	f04f 33ff 	mov.w	r3, #4294967295
 8005a88:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	609a      	str	r2, [r3, #8]
 8005a9a:	e000      	b.n	8005a9e <putc_bfd+0x66>
	if (i < 0) return;
 8005a9c:	bf00      	nop
}
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	db16      	blt.n	8005ae2 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6818      	ldr	r0, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f103 010c 	add.w	r1, r3, #12
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f107 030c 	add.w	r3, r7, #12
 8005ac8:	f7ff f9bf 	bl	8004e4a <f_write>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d107      	bne.n	8005ae2 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d102      	bne.n	8005ae2 <putc_flush+0x3e>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	e001      	b.n	8005ae6 <putc_flush+0x42>
	return EOF;
 8005ae2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	605a      	str	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	609a      	str	r2, [r3, #8]
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8005b18:	b40e      	push	{r1, r2, r3}
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b0a7      	sub	sp, #156	; 0x9c
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8005b22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff ffe0 	bl	8005aee <putc_init>

	va_start(arp, fmt);
 8005b2e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005b32:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8005b34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8005b44:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 81f4 	beq.w	8005f36 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8005b4e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005b52:	2b25      	cmp	r3, #37	; 0x25
 8005b54:	d008      	beq.n	8005b68 <f_printf+0x50>
			putc_bfd(&pb, c);
 8005b56:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8005b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b5e:	4611      	mov	r1, r2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff ff69 	bl	8005a38 <putc_bfd>
			continue;
 8005b66:	e1e5      	b.n	8005f34 <f_printf+0x41c>
		}
		w = f = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8005b74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8005b84:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005b88:	2b30      	cmp	r3, #48	; 0x30
 8005b8a:	d10b      	bne.n	8005ba4 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005b92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8005ba2:	e024      	b.n	8005bee <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8005ba4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005ba8:	2b2d      	cmp	r3, #45	; 0x2d
 8005baa:	d120      	bne.n	8005bee <f_printf+0xd6>
				f = 2; c = *fmt++;
 8005bac:	2302      	movs	r3, #2
 8005bae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005bb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8005bc2:	e014      	b.n	8005bee <f_printf+0xd6>
			w = w * 10 + c - '0';
 8005bc4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005bd6:	4413      	add	r3, r2
 8005bd8:	3b30      	subs	r3, #48	; 0x30
 8005bda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8005bde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8005bee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005bf2:	2b2f      	cmp	r3, #47	; 0x2f
 8005bf4:	d903      	bls.n	8005bfe <f_printf+0xe6>
 8005bf6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005bfa:	2b39      	cmp	r3, #57	; 0x39
 8005bfc:	d9e2      	bls.n	8005bc4 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8005bfe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005c02:	2b6c      	cmp	r3, #108	; 0x6c
 8005c04:	d003      	beq.n	8005c0e <f_printf+0xf6>
 8005c06:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005c0a:	2b4c      	cmp	r3, #76	; 0x4c
 8005c0c:	d10d      	bne.n	8005c2a <f_printf+0x112>
			f |= 4; c = *fmt++;
 8005c0e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005c12:	f043 0304 	orr.w	r3, r3, #4
 8005c16:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005c1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8005c2a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 8183 	beq.w	8005f3a <f_printf+0x422>
		d = c;
 8005c34:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005c38:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8005c3c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005c40:	2b60      	cmp	r3, #96	; 0x60
 8005c42:	d908      	bls.n	8005c56 <f_printf+0x13e>
 8005c44:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005c48:	2b7a      	cmp	r3, #122	; 0x7a
 8005c4a:	d804      	bhi.n	8005c56 <f_printf+0x13e>
 8005c4c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005c50:	3b20      	subs	r3, #32
 8005c52:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8005c56:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005c5a:	3b42      	subs	r3, #66	; 0x42
 8005c5c:	2b16      	cmp	r3, #22
 8005c5e:	f200 8098 	bhi.w	8005d92 <f_printf+0x27a>
 8005c62:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <f_printf+0x150>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005d73 	.word	0x08005d73
 8005c6c:	08005d5b 	.word	0x08005d5b
 8005c70:	08005d83 	.word	0x08005d83
 8005c74:	08005d93 	.word	0x08005d93
 8005c78:	08005d93 	.word	0x08005d93
 8005c7c:	08005d93 	.word	0x08005d93
 8005c80:	08005d93 	.word	0x08005d93
 8005c84:	08005d93 	.word	0x08005d93
 8005c88:	08005d93 	.word	0x08005d93
 8005c8c:	08005d93 	.word	0x08005d93
 8005c90:	08005d93 	.word	0x08005d93
 8005c94:	08005d93 	.word	0x08005d93
 8005c98:	08005d93 	.word	0x08005d93
 8005c9c:	08005d7b 	.word	0x08005d7b
 8005ca0:	08005d93 	.word	0x08005d93
 8005ca4:	08005d93 	.word	0x08005d93
 8005ca8:	08005d93 	.word	0x08005d93
 8005cac:	08005cc5 	.word	0x08005cc5
 8005cb0:	08005d93 	.word	0x08005d93
 8005cb4:	08005d83 	.word	0x08005d83
 8005cb8:	08005d93 	.word	0x08005d93
 8005cbc:	08005d93 	.word	0x08005d93
 8005cc0:	08005d8b 	.word	0x08005d8b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8005cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cc6:	1d1a      	adds	r2, r3, #4
 8005cc8:	67ba      	str	r2, [r7, #120]	; 0x78
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005cd4:	e004      	b.n	8005ce0 <f_printf+0x1c8>
 8005cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cda:	3301      	adds	r3, #1
 8005cdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ce0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ce6:	4413      	add	r3, r2
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1f3      	bne.n	8005cd6 <f_printf+0x1be>
			if (!(f & 2)) {
 8005cee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d11a      	bne.n	8005d30 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8005cfa:	e005      	b.n	8005d08 <f_printf+0x1f0>
 8005cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d00:	2120      	movs	r1, #32
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff fe98 	bl	8005a38 <putc_bfd>
 8005d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d12:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d8f0      	bhi.n	8005cfc <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8005d1a:	e009      	b.n	8005d30 <f_printf+0x218>
 8005d1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d22:	781a      	ldrb	r2, [r3, #0]
 8005d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d28:	4611      	mov	r1, r2
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7ff fe84 	bl	8005a38 <putc_bfd>
 8005d30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1f1      	bne.n	8005d1c <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8005d38:	e005      	b.n	8005d46 <f_printf+0x22e>
 8005d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d3e:	2120      	movs	r1, #32
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff fe79 	bl	8005a38 <putc_bfd>
 8005d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d50:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d8f0      	bhi.n	8005d3a <f_printf+0x222>
			continue;
 8005d58:	e0ec      	b.n	8005f34 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8005d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d5c:	1d1a      	adds	r2, r3, #4
 8005d5e:	67ba      	str	r2, [r7, #120]	; 0x78
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d68:	4611      	mov	r1, r2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fe64 	bl	8005a38 <putc_bfd>
 8005d70:	e0e0      	b.n	8005f34 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8005d72:	2302      	movs	r3, #2
 8005d74:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8005d78:	e014      	b.n	8005da4 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8005d7a:	2308      	movs	r3, #8
 8005d7c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8005d80:	e010      	b.n	8005da4 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8005d82:	230a      	movs	r3, #10
 8005d84:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8005d88:	e00c      	b.n	8005da4 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8005d8a:	2310      	movs	r3, #16
 8005d8c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8005d90:	e008      	b.n	8005da4 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8005d92:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8005d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff fe4b 	bl	8005a38 <putc_bfd>
 8005da2:	e0c7      	b.n	8005f34 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8005da4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d004      	beq.n	8005dba <f_printf+0x2a2>
 8005db0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005db2:	1d1a      	adds	r2, r3, #4
 8005db4:	67ba      	str	r2, [r7, #120]	; 0x78
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	e00c      	b.n	8005dd4 <f_printf+0x2bc>
 8005dba:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005dbe:	2b44      	cmp	r3, #68	; 0x44
 8005dc0:	d104      	bne.n	8005dcc <f_printf+0x2b4>
 8005dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dc4:	1d1a      	adds	r2, r3, #4
 8005dc6:	67ba      	str	r2, [r7, #120]	; 0x78
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	e003      	b.n	8005dd4 <f_printf+0x2bc>
 8005dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dce:	1d1a      	adds	r2, r3, #4
 8005dd0:	67ba      	str	r2, [r7, #120]	; 0x78
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8005dd8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005ddc:	2b44      	cmp	r3, #68	; 0x44
 8005dde:	d10e      	bne.n	8005dfe <f_printf+0x2e6>
 8005de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	da0a      	bge.n	8005dfe <f_printf+0x2e6>
			v = 0 - v;
 8005de8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dec:	425b      	negs	r3, r3
 8005dee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8005df2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005df6:	f043 0308 	orr.w	r3, r3, #8
 8005dfa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8005e04:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8005e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e10:	fb02 f201 	mul.w	r2, r2, r1
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8005e1a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8005e1e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8005e2a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005e2e:	2b09      	cmp	r3, #9
 8005e30:	d90b      	bls.n	8005e4a <f_printf+0x332>
 8005e32:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005e36:	2b78      	cmp	r3, #120	; 0x78
 8005e38:	d101      	bne.n	8005e3e <f_printf+0x326>
 8005e3a:	2227      	movs	r2, #39	; 0x27
 8005e3c:	e000      	b.n	8005e40 <f_printf+0x328>
 8005e3e:	2207      	movs	r2, #7
 8005e40:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005e44:	4413      	add	r3, r2
 8005e46:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8005e4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005e54:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8005e58:	3230      	adds	r2, #48	; 0x30
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8005e60:	440b      	add	r3, r1
 8005e62:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8005e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <f_printf+0x35e>
 8005e6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e72:	2b1f      	cmp	r3, #31
 8005e74:	d9c6      	bls.n	8005e04 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8005e76:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <f_printf+0x380>
 8005e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005e8c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8005e90:	4413      	add	r3, r2
 8005e92:	222d      	movs	r2, #45	; 0x2d
 8005e94:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8005e98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ea0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <f_printf+0x398>
 8005eac:	2330      	movs	r3, #48	; 0x30
 8005eae:	e000      	b.n	8005eb2 <f_printf+0x39a>
 8005eb0:	2320      	movs	r3, #32
 8005eb2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8005eb6:	e007      	b.n	8005ec8 <f_printf+0x3b0>
 8005eb8:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8005ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff fdb8 	bl	8005a38 <putc_bfd>
 8005ec8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d108      	bne.n	8005ee6 <f_printf+0x3ce>
 8005ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ede:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d8e8      	bhi.n	8005eb8 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8005ee6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005eea:	3b01      	subs	r3, #1
 8005eec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ef0:	f107 020c 	add.w	r2, r7, #12
 8005ef4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ef8:	4413      	add	r3, r2
 8005efa:	781a      	ldrb	r2, [r3, #0]
 8005efc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f00:	4611      	mov	r1, r2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff fd98 	bl	8005a38 <putc_bfd>
		} while (i);
 8005f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1ea      	bne.n	8005ee6 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 8005f10:	e007      	b.n	8005f22 <f_printf+0x40a>
 8005f12:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8005f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff fd8b 	bl	8005a38 <putc_bfd>
 8005f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f2c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d8ee      	bhi.n	8005f12 <f_printf+0x3fa>
		c = *fmt++;
 8005f34:	e5fe      	b.n	8005b34 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8005f36:	bf00      	nop
 8005f38:	e000      	b.n	8005f3c <f_printf+0x424>
		if (!c) break;
 8005f3a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8005f3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff fdaf 	bl	8005aa4 <putc_flush>
 8005f46:	4603      	mov	r3, r0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	379c      	adds	r7, #156	; 0x9c
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f52:	b003      	add	sp, #12
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop

08005f58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	4613      	mov	r3, r2
 8005f64:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005f66:	2301      	movs	r3, #1
 8005f68:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005f6e:	4b1f      	ldr	r3, [pc, #124]	; (8005fec <FATFS_LinkDriverEx+0x94>)
 8005f70:	7b9b      	ldrb	r3, [r3, #14]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d831      	bhi.n	8005fdc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005f78:	4b1c      	ldr	r3, [pc, #112]	; (8005fec <FATFS_LinkDriverEx+0x94>)
 8005f7a:	7b9b      	ldrb	r3, [r3, #14]
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	461a      	mov	r2, r3
 8005f80:	4b1a      	ldr	r3, [pc, #104]	; (8005fec <FATFS_LinkDriverEx+0x94>)
 8005f82:	2100      	movs	r1, #0
 8005f84:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005f86:	4b19      	ldr	r3, [pc, #100]	; (8005fec <FATFS_LinkDriverEx+0x94>)
 8005f88:	7b9b      	ldrb	r3, [r3, #14]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	4a17      	ldr	r2, [pc, #92]	; (8005fec <FATFS_LinkDriverEx+0x94>)
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005f96:	4b15      	ldr	r3, [pc, #84]	; (8005fec <FATFS_LinkDriverEx+0x94>)
 8005f98:	7b9b      	ldrb	r3, [r3, #14]
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	4b13      	ldr	r3, [pc, #76]	; (8005fec <FATFS_LinkDriverEx+0x94>)
 8005fa0:	4413      	add	r3, r2
 8005fa2:	79fa      	ldrb	r2, [r7, #7]
 8005fa4:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 8005fa6:	4b11      	ldr	r3, [pc, #68]	; (8005fec <FATFS_LinkDriverEx+0x94>)
 8005fa8:	7b9b      	ldrb	r3, [r3, #14]
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	b2d1      	uxtb	r1, r2
 8005fb0:	4a0e      	ldr	r2, [pc, #56]	; (8005fec <FATFS_LinkDriverEx+0x94>)
 8005fb2:	7391      	strb	r1, [r2, #14]
 8005fb4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005fb6:	7dbb      	ldrb	r3, [r7, #22]
 8005fb8:	3330      	adds	r3, #48	; 0x30
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	223a      	movs	r2, #58	; 0x3a
 8005fc6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	3302      	adds	r3, #2
 8005fcc:	222f      	movs	r2, #47	; 0x2f
 8005fce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	3303      	adds	r3, #3
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	200002f0 	.word	0x200002f0

08005ff0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff ffaa 	bl	8005f58 <FATFS_LinkDriverEx>
 8006004:	4603      	mov	r3, r0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	6039      	str	r1, [r7, #0]
 800601a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800601c:	88fb      	ldrh	r3, [r7, #6]
 800601e:	2b7f      	cmp	r3, #127	; 0x7f
 8006020:	d802      	bhi.n	8006028 <ff_convert+0x18>
		c = chr;
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	81fb      	strh	r3, [r7, #14]
 8006026:	e025      	b.n	8006074 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800602e:	88fb      	ldrh	r3, [r7, #6]
 8006030:	2bff      	cmp	r3, #255	; 0xff
 8006032:	d805      	bhi.n	8006040 <ff_convert+0x30>
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	3b80      	subs	r3, #128	; 0x80
 8006038:	4a12      	ldr	r2, [pc, #72]	; (8006084 <ff_convert+0x74>)
 800603a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800603e:	e000      	b.n	8006042 <ff_convert+0x32>
 8006040:	2300      	movs	r3, #0
 8006042:	81fb      	strh	r3, [r7, #14]
 8006044:	e016      	b.n	8006074 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006046:	2300      	movs	r3, #0
 8006048:	81fb      	strh	r3, [r7, #14]
 800604a:	e009      	b.n	8006060 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800604c:	89fb      	ldrh	r3, [r7, #14]
 800604e:	4a0d      	ldr	r2, [pc, #52]	; (8006084 <ff_convert+0x74>)
 8006050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006054:	88fa      	ldrh	r2, [r7, #6]
 8006056:	429a      	cmp	r2, r3
 8006058:	d006      	beq.n	8006068 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800605a:	89fb      	ldrh	r3, [r7, #14]
 800605c:	3301      	adds	r3, #1
 800605e:	81fb      	strh	r3, [r7, #14]
 8006060:	89fb      	ldrh	r3, [r7, #14]
 8006062:	2b7f      	cmp	r3, #127	; 0x7f
 8006064:	d9f2      	bls.n	800604c <ff_convert+0x3c>
 8006066:	e000      	b.n	800606a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006068:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800606a:	89fb      	ldrh	r3, [r7, #14]
 800606c:	3380      	adds	r3, #128	; 0x80
 800606e:	b29b      	uxth	r3, r3
 8006070:	b2db      	uxtb	r3, r3
 8006072:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006074:	89fb      	ldrh	r3, [r7, #14]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	0800be88 	.word	0x0800be88

08006088 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	4603      	mov	r3, r0
 8006090:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006098:	d201      	bcs.n	800609e <ff_wtoupper+0x16>
 800609a:	4b3e      	ldr	r3, [pc, #248]	; (8006194 <ff_wtoupper+0x10c>)
 800609c:	e000      	b.n	80060a0 <ff_wtoupper+0x18>
 800609e:	4b3e      	ldr	r3, [pc, #248]	; (8006198 <ff_wtoupper+0x110>)
 80060a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	1c9a      	adds	r2, r3, #2
 80060a6:	617a      	str	r2, [r7, #20]
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80060ac:	8a7b      	ldrh	r3, [r7, #18]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d068      	beq.n	8006184 <ff_wtoupper+0xfc>
 80060b2:	88fa      	ldrh	r2, [r7, #6]
 80060b4:	8a7b      	ldrh	r3, [r7, #18]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d364      	bcc.n	8006184 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	1c9a      	adds	r2, r3, #2
 80060be:	617a      	str	r2, [r7, #20]
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	823b      	strh	r3, [r7, #16]
 80060c4:	8a3b      	ldrh	r3, [r7, #16]
 80060c6:	0a1b      	lsrs	r3, r3, #8
 80060c8:	81fb      	strh	r3, [r7, #14]
 80060ca:	8a3b      	ldrh	r3, [r7, #16]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80060d0:	88fa      	ldrh	r2, [r7, #6]
 80060d2:	8a79      	ldrh	r1, [r7, #18]
 80060d4:	8a3b      	ldrh	r3, [r7, #16]
 80060d6:	440b      	add	r3, r1
 80060d8:	429a      	cmp	r2, r3
 80060da:	da49      	bge.n	8006170 <ff_wtoupper+0xe8>
			switch (cmd) {
 80060dc:	89fb      	ldrh	r3, [r7, #14]
 80060de:	2b08      	cmp	r3, #8
 80060e0:	d84f      	bhi.n	8006182 <ff_wtoupper+0xfa>
 80060e2:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <ff_wtoupper+0x60>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	0800610d 	.word	0x0800610d
 80060ec:	0800611f 	.word	0x0800611f
 80060f0:	08006135 	.word	0x08006135
 80060f4:	0800613d 	.word	0x0800613d
 80060f8:	08006145 	.word	0x08006145
 80060fc:	0800614d 	.word	0x0800614d
 8006100:	08006155 	.word	0x08006155
 8006104:	0800615d 	.word	0x0800615d
 8006108:	08006165 	.word	0x08006165
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800610c:	88fa      	ldrh	r2, [r7, #6]
 800610e:	8a7b      	ldrh	r3, [r7, #18]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	4413      	add	r3, r2
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	80fb      	strh	r3, [r7, #6]
 800611c:	e027      	b.n	800616e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800611e:	88fa      	ldrh	r2, [r7, #6]
 8006120:	8a7b      	ldrh	r3, [r7, #18]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	b29b      	uxth	r3, r3
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	b29b      	uxth	r3, r3
 800612c:	88fa      	ldrh	r2, [r7, #6]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	80fb      	strh	r3, [r7, #6]
 8006132:	e01c      	b.n	800616e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006134:	88fb      	ldrh	r3, [r7, #6]
 8006136:	3b10      	subs	r3, #16
 8006138:	80fb      	strh	r3, [r7, #6]
 800613a:	e018      	b.n	800616e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	3b20      	subs	r3, #32
 8006140:	80fb      	strh	r3, [r7, #6]
 8006142:	e014      	b.n	800616e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006144:	88fb      	ldrh	r3, [r7, #6]
 8006146:	3b30      	subs	r3, #48	; 0x30
 8006148:	80fb      	strh	r3, [r7, #6]
 800614a:	e010      	b.n	800616e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800614c:	88fb      	ldrh	r3, [r7, #6]
 800614e:	3b1a      	subs	r3, #26
 8006150:	80fb      	strh	r3, [r7, #6]
 8006152:	e00c      	b.n	800616e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006154:	88fb      	ldrh	r3, [r7, #6]
 8006156:	3308      	adds	r3, #8
 8006158:	80fb      	strh	r3, [r7, #6]
 800615a:	e008      	b.n	800616e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800615c:	88fb      	ldrh	r3, [r7, #6]
 800615e:	3b50      	subs	r3, #80	; 0x50
 8006160:	80fb      	strh	r3, [r7, #6]
 8006162:	e004      	b.n	800616e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006164:	88fb      	ldrh	r3, [r7, #6]
 8006166:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800616a:	80fb      	strh	r3, [r7, #6]
 800616c:	bf00      	nop
			}
			break;
 800616e:	e008      	b.n	8006182 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006170:	89fb      	ldrh	r3, [r7, #14]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d195      	bne.n	80060a2 <ff_wtoupper+0x1a>
 8006176:	8a3b      	ldrh	r3, [r7, #16]
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4413      	add	r3, r2
 800617e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006180:	e78f      	b.n	80060a2 <ff_wtoupper+0x1a>
			break;
 8006182:	bf00      	nop
	}

	return chr;
 8006184:	88fb      	ldrh	r3, [r7, #6]
}
 8006186:	4618      	mov	r0, r3
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	0800bf88 	.word	0x0800bf88
 8006198:	0800c17c 	.word	0x0800c17c

0800619c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80061a0:	4b0e      	ldr	r3, [pc, #56]	; (80061dc <HAL_Init+0x40>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a0d      	ldr	r2, [pc, #52]	; (80061dc <HAL_Init+0x40>)
 80061a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80061ac:	4b0b      	ldr	r3, [pc, #44]	; (80061dc <HAL_Init+0x40>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a0a      	ldr	r2, [pc, #40]	; (80061dc <HAL_Init+0x40>)
 80061b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061b8:	4b08      	ldr	r3, [pc, #32]	; (80061dc <HAL_Init+0x40>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a07      	ldr	r2, [pc, #28]	; (80061dc <HAL_Init+0x40>)
 80061be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061c4:	2003      	movs	r0, #3
 80061c6:	f000 f973 	bl	80064b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80061ca:	2000      	movs	r0, #0
 80061cc:	f000 f808 	bl	80061e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80061d0:	f7fa fd1c 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	40023c00 	.word	0x40023c00

080061e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80061e8:	4b12      	ldr	r3, [pc, #72]	; (8006234 <HAL_InitTick+0x54>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	4b12      	ldr	r3, [pc, #72]	; (8006238 <HAL_InitTick+0x58>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	4619      	mov	r1, r3
 80061f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80061fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 f999 	bl	8006536 <HAL_SYSTICK_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e00e      	b.n	800622c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b0f      	cmp	r3, #15
 8006212:	d80a      	bhi.n	800622a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006214:	2200      	movs	r2, #0
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	f000 f953 	bl	80064c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006220:	4a06      	ldr	r2, [pc, #24]	; (800623c <HAL_InitTick+0x5c>)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	e000      	b.n	800622c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
}
 800622c:	4618      	mov	r0, r3
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	20000000 	.word	0x20000000
 8006238:	20000020 	.word	0x20000020
 800623c:	2000001c 	.word	0x2000001c

08006240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006244:	4b06      	ldr	r3, [pc, #24]	; (8006260 <HAL_IncTick+0x20>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	4b06      	ldr	r3, [pc, #24]	; (8006264 <HAL_IncTick+0x24>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4413      	add	r3, r2
 8006250:	4a04      	ldr	r2, [pc, #16]	; (8006264 <HAL_IncTick+0x24>)
 8006252:	6013      	str	r3, [r2, #0]
}
 8006254:	bf00      	nop
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	20000020 	.word	0x20000020
 8006264:	2000088c 	.word	0x2000088c

08006268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0
  return uwTick;
 800626c:	4b03      	ldr	r3, [pc, #12]	; (800627c <HAL_GetTick+0x14>)
 800626e:	681b      	ldr	r3, [r3, #0]
}
 8006270:	4618      	mov	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	2000088c 	.word	0x2000088c

08006280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006288:	f7ff ffee 	bl	8006268 <HAL_GetTick>
 800628c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006298:	d005      	beq.n	80062a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800629a:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <HAL_Delay+0x44>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4413      	add	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80062a6:	bf00      	nop
 80062a8:	f7ff ffde 	bl	8006268 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d8f7      	bhi.n	80062a8 <HAL_Delay+0x28>
  {
  }
}
 80062b8:	bf00      	nop
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000020 	.word	0x20000020

080062c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062d8:	4b0c      	ldr	r3, [pc, #48]	; (800630c <__NVIC_SetPriorityGrouping+0x44>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062e4:	4013      	ands	r3, r2
 80062e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062fa:	4a04      	ldr	r2, [pc, #16]	; (800630c <__NVIC_SetPriorityGrouping+0x44>)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	60d3      	str	r3, [r2, #12]
}
 8006300:	bf00      	nop
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	e000ed00 	.word	0xe000ed00

08006310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006314:	4b04      	ldr	r3, [pc, #16]	; (8006328 <__NVIC_GetPriorityGrouping+0x18>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	0a1b      	lsrs	r3, r3, #8
 800631a:	f003 0307 	and.w	r3, r3, #7
}
 800631e:	4618      	mov	r0, r3
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	e000ed00 	.word	0xe000ed00

0800632c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	4603      	mov	r3, r0
 8006334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800633a:	2b00      	cmp	r3, #0
 800633c:	db0b      	blt.n	8006356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	f003 021f 	and.w	r2, r3, #31
 8006344:	4907      	ldr	r1, [pc, #28]	; (8006364 <__NVIC_EnableIRQ+0x38>)
 8006346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	2001      	movs	r0, #1
 800634e:	fa00 f202 	lsl.w	r2, r0, r2
 8006352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	e000e100 	.word	0xe000e100

08006368 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006376:	2b00      	cmp	r3, #0
 8006378:	db12      	blt.n	80063a0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	f003 021f 	and.w	r2, r3, #31
 8006380:	490a      	ldr	r1, [pc, #40]	; (80063ac <__NVIC_DisableIRQ+0x44>)
 8006382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	2001      	movs	r0, #1
 800638a:	fa00 f202 	lsl.w	r2, r0, r2
 800638e:	3320      	adds	r3, #32
 8006390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006394:	f3bf 8f4f 	dsb	sy
}
 8006398:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800639a:	f3bf 8f6f 	isb	sy
}
 800639e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	e000e100 	.word	0xe000e100

080063b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	6039      	str	r1, [r7, #0]
 80063ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	db0a      	blt.n	80063da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	490c      	ldr	r1, [pc, #48]	; (80063fc <__NVIC_SetPriority+0x4c>)
 80063ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ce:	0112      	lsls	r2, r2, #4
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	440b      	add	r3, r1
 80063d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063d8:	e00a      	b.n	80063f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	4908      	ldr	r1, [pc, #32]	; (8006400 <__NVIC_SetPriority+0x50>)
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	f003 030f 	and.w	r3, r3, #15
 80063e6:	3b04      	subs	r3, #4
 80063e8:	0112      	lsls	r2, r2, #4
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	440b      	add	r3, r1
 80063ee:	761a      	strb	r2, [r3, #24]
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	e000e100 	.word	0xe000e100
 8006400:	e000ed00 	.word	0xe000ed00

08006404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006404:	b480      	push	{r7}
 8006406:	b089      	sub	sp, #36	; 0x24
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	f1c3 0307 	rsb	r3, r3, #7
 800641e:	2b04      	cmp	r3, #4
 8006420:	bf28      	it	cs
 8006422:	2304      	movcs	r3, #4
 8006424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	3304      	adds	r3, #4
 800642a:	2b06      	cmp	r3, #6
 800642c:	d902      	bls.n	8006434 <NVIC_EncodePriority+0x30>
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	3b03      	subs	r3, #3
 8006432:	e000      	b.n	8006436 <NVIC_EncodePriority+0x32>
 8006434:	2300      	movs	r3, #0
 8006436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006438:	f04f 32ff 	mov.w	r2, #4294967295
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	43da      	mvns	r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	401a      	ands	r2, r3
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800644c:	f04f 31ff 	mov.w	r1, #4294967295
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	fa01 f303 	lsl.w	r3, r1, r3
 8006456:	43d9      	mvns	r1, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800645c:	4313      	orrs	r3, r2
         );
}
 800645e:	4618      	mov	r0, r3
 8006460:	3724      	adds	r7, #36	; 0x24
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3b01      	subs	r3, #1
 8006478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800647c:	d301      	bcc.n	8006482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800647e:	2301      	movs	r3, #1
 8006480:	e00f      	b.n	80064a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006482:	4a0a      	ldr	r2, [pc, #40]	; (80064ac <SysTick_Config+0x40>)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3b01      	subs	r3, #1
 8006488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800648a:	210f      	movs	r1, #15
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	f7ff ff8e 	bl	80063b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <SysTick_Config+0x40>)
 8006496:	2200      	movs	r2, #0
 8006498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800649a:	4b04      	ldr	r3, [pc, #16]	; (80064ac <SysTick_Config+0x40>)
 800649c:	2207      	movs	r2, #7
 800649e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	e000e010 	.word	0xe000e010

080064b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff ff05 	bl	80062c8 <__NVIC_SetPriorityGrouping>
}
 80064be:	bf00      	nop
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b086      	sub	sp, #24
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	4603      	mov	r3, r0
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
 80064d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064d8:	f7ff ff1a 	bl	8006310 <__NVIC_GetPriorityGrouping>
 80064dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	6978      	ldr	r0, [r7, #20]
 80064e4:	f7ff ff8e 	bl	8006404 <NVIC_EncodePriority>
 80064e8:	4602      	mov	r2, r0
 80064ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ee:	4611      	mov	r1, r2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff ff5d 	bl	80063b0 <__NVIC_SetPriority>
}
 80064f6:	bf00      	nop
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	4603      	mov	r3, r0
 8006506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff ff0d 	bl	800632c <__NVIC_EnableIRQ>
}
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	4603      	mov	r3, r0
 8006522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff ff1d 	bl	8006368 <__NVIC_DisableIRQ>
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b082      	sub	sp, #8
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff ff94 	bl	800646c <SysTick_Config>
 8006544:	4603      	mov	r3, r0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800655c:	f7ff fe84 	bl	8006268 <HAL_GetTick>
 8006560:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e099      	b.n	80066a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0201 	bic.w	r2, r2, #1
 800658a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800658c:	e00f      	b.n	80065ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800658e:	f7ff fe6b 	bl	8006268 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b05      	cmp	r3, #5
 800659a:	d908      	bls.n	80065ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2220      	movs	r2, #32
 80065a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2203      	movs	r2, #3
 80065a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e078      	b.n	80066a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e8      	bne.n	800658e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4b38      	ldr	r3, [pc, #224]	; (80066a8 <HAL_DMA_Init+0x158>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	2b04      	cmp	r3, #4
 8006606:	d107      	bne.n	8006618 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	4313      	orrs	r3, r2
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f023 0307 	bic.w	r3, r3, #7
 800662e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	2b04      	cmp	r3, #4
 8006640:	d117      	bne.n	8006672 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00e      	beq.n	8006672 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fb6b 	bl	8006d30 <DMA_CheckFifoParam>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d008      	beq.n	8006672 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2240      	movs	r2, #64	; 0x40
 8006664:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800666e:	2301      	movs	r3, #1
 8006670:	e016      	b.n	80066a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fb22 	bl	8006cc4 <DMA_CalcBaseAndBitshift>
 8006680:	4603      	mov	r3, r0
 8006682:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006688:	223f      	movs	r2, #63	; 0x3f
 800668a:	409a      	lsls	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	f010803f 	.word	0xf010803f

080066ac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e050      	b.n	8006760 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d101      	bne.n	80066ce <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80066ca:	2302      	movs	r3, #2
 80066cc:	e048      	b.n	8006760 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0201 	bic.w	r2, r2, #1
 80066dc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2200      	movs	r2, #0
 80066ec:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2200      	movs	r2, #0
 80066f4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2200      	movs	r2, #0
 80066fc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2200      	movs	r2, #0
 8006704:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2221      	movs	r2, #33	; 0x21
 800670c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fad8 	bl	8006cc4 <DMA_CalcBaseAndBitshift>
 8006714:	4603      	mov	r3, r0
 8006716:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006740:	223f      	movs	r2, #63	; 0x3f
 8006742:	409a      	lsls	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <HAL_DMA_Start_IT+0x26>
 800678a:	2302      	movs	r3, #2
 800678c:	e040      	b.n	8006810 <HAL_DMA_Start_IT+0xa8>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d12f      	bne.n	8006802 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2202      	movs	r2, #2
 80067a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fa56 	bl	8006c68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c0:	223f      	movs	r2, #63	; 0x3f
 80067c2:	409a      	lsls	r2, r3
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0216 	orr.w	r2, r2, #22
 80067d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d007      	beq.n	80067f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0208 	orr.w	r2, r2, #8
 80067ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0201 	orr.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	e005      	b.n	800680e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800680a:	2302      	movs	r3, #2
 800680c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800680e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006824:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006826:	f7ff fd1f 	bl	8006268 <HAL_GetTick>
 800682a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d008      	beq.n	800684a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2280      	movs	r2, #128	; 0x80
 800683c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e052      	b.n	80068f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0216 	bic.w	r2, r2, #22
 8006858:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695a      	ldr	r2, [r3, #20]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006868:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d103      	bne.n	800687a <HAL_DMA_Abort+0x62>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0208 	bic.w	r2, r2, #8
 8006888:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0201 	bic.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800689a:	e013      	b.n	80068c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800689c:	f7ff fce4 	bl	8006268 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b05      	cmp	r3, #5
 80068a8:	d90c      	bls.n	80068c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2220      	movs	r2, #32
 80068ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2203      	movs	r2, #3
 80068b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e015      	b.n	80068f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e4      	bne.n	800689c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d6:	223f      	movs	r2, #63	; 0x3f
 80068d8:	409a      	lsls	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d004      	beq.n	8006916 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2280      	movs	r2, #128	; 0x80
 8006910:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e00c      	b.n	8006930 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2205      	movs	r2, #5
 800691a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0201 	bic.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006948:	4b92      	ldr	r3, [pc, #584]	; (8006b94 <HAL_DMA_IRQHandler+0x258>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a92      	ldr	r2, [pc, #584]	; (8006b98 <HAL_DMA_IRQHandler+0x25c>)
 800694e:	fba2 2303 	umull	r2, r3, r2, r3
 8006952:	0a9b      	lsrs	r3, r3, #10
 8006954:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006966:	2208      	movs	r2, #8
 8006968:	409a      	lsls	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4013      	ands	r3, r2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d01a      	beq.n	80069a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b00      	cmp	r3, #0
 800697e:	d013      	beq.n	80069a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0204 	bic.w	r2, r2, #4
 800698e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006994:	2208      	movs	r2, #8
 8006996:	409a      	lsls	r2, r3
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a0:	f043 0201 	orr.w	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ac:	2201      	movs	r2, #1
 80069ae:	409a      	lsls	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4013      	ands	r3, r2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d012      	beq.n	80069de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00b      	beq.n	80069de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ca:	2201      	movs	r2, #1
 80069cc:	409a      	lsls	r2, r3
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d6:	f043 0202 	orr.w	r2, r3, #2
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e2:	2204      	movs	r2, #4
 80069e4:	409a      	lsls	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4013      	ands	r3, r2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d012      	beq.n	8006a14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00b      	beq.n	8006a14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a00:	2204      	movs	r2, #4
 8006a02:	409a      	lsls	r2, r3
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0c:	f043 0204 	orr.w	r2, r3, #4
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a18:	2210      	movs	r2, #16
 8006a1a:	409a      	lsls	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d043      	beq.n	8006aac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0308 	and.w	r3, r3, #8
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d03c      	beq.n	8006aac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a36:	2210      	movs	r2, #16
 8006a38:	409a      	lsls	r2, r3
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d018      	beq.n	8006a7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d108      	bne.n	8006a6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d024      	beq.n	8006aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3
 8006a6a:	e01f      	b.n	8006aac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01b      	beq.n	8006aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	4798      	blx	r3
 8006a7c:	e016      	b.n	8006aac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d107      	bne.n	8006a9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0208 	bic.w	r2, r2, #8
 8006a9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	409a      	lsls	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 808e 	beq.w	8006bda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0310 	and.w	r3, r3, #16
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 8086 	beq.w	8006bda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	409a      	lsls	r2, r3
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b05      	cmp	r3, #5
 8006ae4:	d136      	bne.n	8006b54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0216 	bic.w	r2, r2, #22
 8006af4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	695a      	ldr	r2, [r3, #20]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d103      	bne.n	8006b16 <HAL_DMA_IRQHandler+0x1da>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d007      	beq.n	8006b26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f022 0208 	bic.w	r2, r2, #8
 8006b24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b2a:	223f      	movs	r2, #63	; 0x3f
 8006b2c:	409a      	lsls	r2, r3
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d07d      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	4798      	blx	r3
        }
        return;
 8006b52:	e078      	b.n	8006c46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d01c      	beq.n	8006b9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d108      	bne.n	8006b82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d030      	beq.n	8006bda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	4798      	blx	r3
 8006b80:	e02b      	b.n	8006bda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d027      	beq.n	8006bda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	4798      	blx	r3
 8006b92:	e022      	b.n	8006bda <HAL_DMA_IRQHandler+0x29e>
 8006b94:	20000000 	.word	0x20000000
 8006b98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10f      	bne.n	8006bca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0210 	bic.w	r2, r2, #16
 8006bb8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d032      	beq.n	8006c48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d022      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2205      	movs	r2, #5
 8006bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 0201 	bic.w	r2, r2, #1
 8006c04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	60bb      	str	r3, [r7, #8]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d307      	bcc.n	8006c22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1f2      	bne.n	8006c06 <HAL_DMA_IRQHandler+0x2ca>
 8006c20:	e000      	b.n	8006c24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006c22:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d005      	beq.n	8006c48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	4798      	blx	r3
 8006c44:	e000      	b.n	8006c48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006c46:	bf00      	nop
    }
  }
}
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop

08006c50 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	2b40      	cmp	r3, #64	; 0x40
 8006c94:	d108      	bne.n	8006ca8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006ca6:	e007      	b.n	8006cb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	60da      	str	r2, [r3, #12]
}
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	3b10      	subs	r3, #16
 8006cd4:	4a14      	ldr	r2, [pc, #80]	; (8006d28 <DMA_CalcBaseAndBitshift+0x64>)
 8006cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cda:	091b      	lsrs	r3, r3, #4
 8006cdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006cde:	4a13      	ldr	r2, [pc, #76]	; (8006d2c <DMA_CalcBaseAndBitshift+0x68>)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d909      	bls.n	8006d06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006cfa:	f023 0303 	bic.w	r3, r3, #3
 8006cfe:	1d1a      	adds	r2, r3, #4
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	659a      	str	r2, [r3, #88]	; 0x58
 8006d04:	e007      	b.n	8006d16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d0e:	f023 0303 	bic.w	r3, r3, #3
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	aaaaaaab 	.word	0xaaaaaaab
 8006d2c:	0800c238 	.word	0x0800c238

08006d30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d11f      	bne.n	8006d8a <DMA_CheckFifoParam+0x5a>
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d856      	bhi.n	8006dfe <DMA_CheckFifoParam+0xce>
 8006d50:	a201      	add	r2, pc, #4	; (adr r2, 8006d58 <DMA_CheckFifoParam+0x28>)
 8006d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d56:	bf00      	nop
 8006d58:	08006d69 	.word	0x08006d69
 8006d5c:	08006d7b 	.word	0x08006d7b
 8006d60:	08006d69 	.word	0x08006d69
 8006d64:	08006dff 	.word	0x08006dff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d046      	beq.n	8006e02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d78:	e043      	b.n	8006e02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d82:	d140      	bne.n	8006e06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d88:	e03d      	b.n	8006e06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d92:	d121      	bne.n	8006dd8 <DMA_CheckFifoParam+0xa8>
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d837      	bhi.n	8006e0a <DMA_CheckFifoParam+0xda>
 8006d9a:	a201      	add	r2, pc, #4	; (adr r2, 8006da0 <DMA_CheckFifoParam+0x70>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006db1 	.word	0x08006db1
 8006da4:	08006db7 	.word	0x08006db7
 8006da8:	08006db1 	.word	0x08006db1
 8006dac:	08006dc9 	.word	0x08006dc9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	73fb      	strb	r3, [r7, #15]
      break;
 8006db4:	e030      	b.n	8006e18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d025      	beq.n	8006e0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dc6:	e022      	b.n	8006e0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006dd0:	d11f      	bne.n	8006e12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006dd6:	e01c      	b.n	8006e12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d903      	bls.n	8006de6 <DMA_CheckFifoParam+0xb6>
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b03      	cmp	r3, #3
 8006de2:	d003      	beq.n	8006dec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006de4:	e018      	b.n	8006e18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	73fb      	strb	r3, [r7, #15]
      break;
 8006dea:	e015      	b.n	8006e18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00e      	beq.n	8006e16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8006dfc:	e00b      	b.n	8006e16 <DMA_CheckFifoParam+0xe6>
      break;
 8006dfe:	bf00      	nop
 8006e00:	e00a      	b.n	8006e18 <DMA_CheckFifoParam+0xe8>
      break;
 8006e02:	bf00      	nop
 8006e04:	e008      	b.n	8006e18 <DMA_CheckFifoParam+0xe8>
      break;
 8006e06:	bf00      	nop
 8006e08:	e006      	b.n	8006e18 <DMA_CheckFifoParam+0xe8>
      break;
 8006e0a:	bf00      	nop
 8006e0c:	e004      	b.n	8006e18 <DMA_CheckFifoParam+0xe8>
      break;
 8006e0e:	bf00      	nop
 8006e10:	e002      	b.n	8006e18 <DMA_CheckFifoParam+0xe8>
      break;   
 8006e12:	bf00      	nop
 8006e14:	e000      	b.n	8006e18 <DMA_CheckFifoParam+0xe8>
      break;
 8006e16:	bf00      	nop
    }
  } 
  
  return status; 
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop

08006e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b089      	sub	sp, #36	; 0x24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e3e:	2300      	movs	r3, #0
 8006e40:	61fb      	str	r3, [r7, #28]
 8006e42:	e159      	b.n	80070f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006e44:	2201      	movs	r2, #1
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	4013      	ands	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	f040 8148 	bne.w	80070f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d005      	beq.n	8006e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d130      	bne.n	8006edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	2203      	movs	r2, #3
 8006e86:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8a:	43db      	mvns	r3, r3
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb8:	43db      	mvns	r3, r3
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	091b      	lsrs	r3, r3, #4
 8006ec6:	f003 0201 	and.w	r2, r3, #1
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f003 0303 	and.w	r3, r3, #3
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d017      	beq.n	8006f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	2203      	movs	r2, #3
 8006ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef8:	43db      	mvns	r3, r3
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	4013      	ands	r3, r2
 8006efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f003 0303 	and.w	r3, r3, #3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d123      	bne.n	8006f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	08da      	lsrs	r2, r3, #3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3208      	adds	r2, #8
 8006f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	f003 0307 	and.w	r3, r3, #7
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	220f      	movs	r2, #15
 8006f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f40:	43db      	mvns	r3, r3
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	4013      	ands	r3, r2
 8006f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	691a      	ldr	r2, [r3, #16]
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	fa02 f303 	lsl.w	r3, r2, r3
 8006f58:	69ba      	ldr	r2, [r7, #24]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	08da      	lsrs	r2, r3, #3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	3208      	adds	r2, #8
 8006f66:	69b9      	ldr	r1, [r7, #24]
 8006f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	2203      	movs	r2, #3
 8006f78:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	4013      	ands	r3, r2
 8006f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f003 0203 	and.w	r2, r3, #3
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 80a2 	beq.w	80070f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	4b57      	ldr	r3, [pc, #348]	; (8007110 <HAL_GPIO_Init+0x2e8>)
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb6:	4a56      	ldr	r2, [pc, #344]	; (8007110 <HAL_GPIO_Init+0x2e8>)
 8006fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8006fbe:	4b54      	ldr	r3, [pc, #336]	; (8007110 <HAL_GPIO_Init+0x2e8>)
 8006fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006fca:	4a52      	ldr	r2, [pc, #328]	; (8007114 <HAL_GPIO_Init+0x2ec>)
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	089b      	lsrs	r3, r3, #2
 8006fd0:	3302      	adds	r3, #2
 8006fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	220f      	movs	r2, #15
 8006fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe6:	43db      	mvns	r3, r3
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	4013      	ands	r3, r2
 8006fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a49      	ldr	r2, [pc, #292]	; (8007118 <HAL_GPIO_Init+0x2f0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d019      	beq.n	800702a <HAL_GPIO_Init+0x202>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a48      	ldr	r2, [pc, #288]	; (800711c <HAL_GPIO_Init+0x2f4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d013      	beq.n	8007026 <HAL_GPIO_Init+0x1fe>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a47      	ldr	r2, [pc, #284]	; (8007120 <HAL_GPIO_Init+0x2f8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d00d      	beq.n	8007022 <HAL_GPIO_Init+0x1fa>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a46      	ldr	r2, [pc, #280]	; (8007124 <HAL_GPIO_Init+0x2fc>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d007      	beq.n	800701e <HAL_GPIO_Init+0x1f6>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a45      	ldr	r2, [pc, #276]	; (8007128 <HAL_GPIO_Init+0x300>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d101      	bne.n	800701a <HAL_GPIO_Init+0x1f2>
 8007016:	2304      	movs	r3, #4
 8007018:	e008      	b.n	800702c <HAL_GPIO_Init+0x204>
 800701a:	2307      	movs	r3, #7
 800701c:	e006      	b.n	800702c <HAL_GPIO_Init+0x204>
 800701e:	2303      	movs	r3, #3
 8007020:	e004      	b.n	800702c <HAL_GPIO_Init+0x204>
 8007022:	2302      	movs	r3, #2
 8007024:	e002      	b.n	800702c <HAL_GPIO_Init+0x204>
 8007026:	2301      	movs	r3, #1
 8007028:	e000      	b.n	800702c <HAL_GPIO_Init+0x204>
 800702a:	2300      	movs	r3, #0
 800702c:	69fa      	ldr	r2, [r7, #28]
 800702e:	f002 0203 	and.w	r2, r2, #3
 8007032:	0092      	lsls	r2, r2, #2
 8007034:	4093      	lsls	r3, r2
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	4313      	orrs	r3, r2
 800703a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800703c:	4935      	ldr	r1, [pc, #212]	; (8007114 <HAL_GPIO_Init+0x2ec>)
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	089b      	lsrs	r3, r3, #2
 8007042:	3302      	adds	r3, #2
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800704a:	4b38      	ldr	r3, [pc, #224]	; (800712c <HAL_GPIO_Init+0x304>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	43db      	mvns	r3, r3
 8007054:	69ba      	ldr	r2, [r7, #24]
 8007056:	4013      	ands	r3, r2
 8007058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	4313      	orrs	r3, r2
 800706c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800706e:	4a2f      	ldr	r2, [pc, #188]	; (800712c <HAL_GPIO_Init+0x304>)
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007074:	4b2d      	ldr	r3, [pc, #180]	; (800712c <HAL_GPIO_Init+0x304>)
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	43db      	mvns	r3, r3
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	4013      	ands	r3, r2
 8007082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007098:	4a24      	ldr	r2, [pc, #144]	; (800712c <HAL_GPIO_Init+0x304>)
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800709e:	4b23      	ldr	r3, [pc, #140]	; (800712c <HAL_GPIO_Init+0x304>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	43db      	mvns	r3, r3
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	4013      	ands	r3, r2
 80070ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070c2:	4a1a      	ldr	r2, [pc, #104]	; (800712c <HAL_GPIO_Init+0x304>)
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80070c8:	4b18      	ldr	r3, [pc, #96]	; (800712c <HAL_GPIO_Init+0x304>)
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	43db      	mvns	r3, r3
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	4013      	ands	r3, r2
 80070d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80070ec:	4a0f      	ldr	r2, [pc, #60]	; (800712c <HAL_GPIO_Init+0x304>)
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	3301      	adds	r3, #1
 80070f6:	61fb      	str	r3, [r7, #28]
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	2b0f      	cmp	r3, #15
 80070fc:	f67f aea2 	bls.w	8006e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	3724      	adds	r7, #36	; 0x24
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40023800 	.word	0x40023800
 8007114:	40013800 	.word	0x40013800
 8007118:	40020000 	.word	0x40020000
 800711c:	40020400 	.word	0x40020400
 8007120:	40020800 	.word	0x40020800
 8007124:	40020c00 	.word	0x40020c00
 8007128:	40021000 	.word	0x40021000
 800712c:	40013c00 	.word	0x40013c00

08007130 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800713a:	2300      	movs	r3, #0
 800713c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007142:	2300      	movs	r3, #0
 8007144:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007146:	2300      	movs	r3, #0
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	e0bb      	b.n	80072c4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800714c:	2201      	movs	r2, #1
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	4013      	ands	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	429a      	cmp	r2, r3
 8007164:	f040 80ab 	bne.w	80072be <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007168:	4a5c      	ldr	r2, [pc, #368]	; (80072dc <HAL_GPIO_DeInit+0x1ac>)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	089b      	lsrs	r3, r3, #2
 800716e:	3302      	adds	r3, #2
 8007170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007174:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f003 0303 	and.w	r3, r3, #3
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	220f      	movs	r2, #15
 8007180:	fa02 f303 	lsl.w	r3, r2, r3
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	4013      	ands	r3, r2
 8007188:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a54      	ldr	r2, [pc, #336]	; (80072e0 <HAL_GPIO_DeInit+0x1b0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d019      	beq.n	80071c6 <HAL_GPIO_DeInit+0x96>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a53      	ldr	r2, [pc, #332]	; (80072e4 <HAL_GPIO_DeInit+0x1b4>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d013      	beq.n	80071c2 <HAL_GPIO_DeInit+0x92>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a52      	ldr	r2, [pc, #328]	; (80072e8 <HAL_GPIO_DeInit+0x1b8>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00d      	beq.n	80071be <HAL_GPIO_DeInit+0x8e>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a51      	ldr	r2, [pc, #324]	; (80072ec <HAL_GPIO_DeInit+0x1bc>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d007      	beq.n	80071ba <HAL_GPIO_DeInit+0x8a>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a50      	ldr	r2, [pc, #320]	; (80072f0 <HAL_GPIO_DeInit+0x1c0>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d101      	bne.n	80071b6 <HAL_GPIO_DeInit+0x86>
 80071b2:	2304      	movs	r3, #4
 80071b4:	e008      	b.n	80071c8 <HAL_GPIO_DeInit+0x98>
 80071b6:	2307      	movs	r3, #7
 80071b8:	e006      	b.n	80071c8 <HAL_GPIO_DeInit+0x98>
 80071ba:	2303      	movs	r3, #3
 80071bc:	e004      	b.n	80071c8 <HAL_GPIO_DeInit+0x98>
 80071be:	2302      	movs	r3, #2
 80071c0:	e002      	b.n	80071c8 <HAL_GPIO_DeInit+0x98>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e000      	b.n	80071c8 <HAL_GPIO_DeInit+0x98>
 80071c6:	2300      	movs	r3, #0
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	f002 0203 	and.w	r2, r2, #3
 80071ce:	0092      	lsls	r2, r2, #2
 80071d0:	4093      	lsls	r3, r2
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d132      	bne.n	800723e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80071d8:	4b46      	ldr	r3, [pc, #280]	; (80072f4 <HAL_GPIO_DeInit+0x1c4>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	43db      	mvns	r3, r3
 80071e0:	4944      	ldr	r1, [pc, #272]	; (80072f4 <HAL_GPIO_DeInit+0x1c4>)
 80071e2:	4013      	ands	r3, r2
 80071e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80071e6:	4b43      	ldr	r3, [pc, #268]	; (80072f4 <HAL_GPIO_DeInit+0x1c4>)
 80071e8:	685a      	ldr	r2, [r3, #4]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	43db      	mvns	r3, r3
 80071ee:	4941      	ldr	r1, [pc, #260]	; (80072f4 <HAL_GPIO_DeInit+0x1c4>)
 80071f0:	4013      	ands	r3, r2
 80071f2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80071f4:	4b3f      	ldr	r3, [pc, #252]	; (80072f4 <HAL_GPIO_DeInit+0x1c4>)
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	43db      	mvns	r3, r3
 80071fc:	493d      	ldr	r1, [pc, #244]	; (80072f4 <HAL_GPIO_DeInit+0x1c4>)
 80071fe:	4013      	ands	r3, r2
 8007200:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007202:	4b3c      	ldr	r3, [pc, #240]	; (80072f4 <HAL_GPIO_DeInit+0x1c4>)
 8007204:	68da      	ldr	r2, [r3, #12]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	43db      	mvns	r3, r3
 800720a:	493a      	ldr	r1, [pc, #232]	; (80072f4 <HAL_GPIO_DeInit+0x1c4>)
 800720c:	4013      	ands	r3, r2
 800720e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	220f      	movs	r2, #15
 800721a:	fa02 f303 	lsl.w	r3, r2, r3
 800721e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007220:	4a2e      	ldr	r2, [pc, #184]	; (80072dc <HAL_GPIO_DeInit+0x1ac>)
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	089b      	lsrs	r3, r3, #2
 8007226:	3302      	adds	r3, #2
 8007228:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	43da      	mvns	r2, r3
 8007230:	482a      	ldr	r0, [pc, #168]	; (80072dc <HAL_GPIO_DeInit+0x1ac>)
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	089b      	lsrs	r3, r3, #2
 8007236:	400a      	ands	r2, r1
 8007238:	3302      	adds	r3, #2
 800723a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	2103      	movs	r1, #3
 8007248:	fa01 f303 	lsl.w	r3, r1, r3
 800724c:	43db      	mvns	r3, r3
 800724e:	401a      	ands	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	08da      	lsrs	r2, r3, #3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3208      	adds	r2, #8
 800725c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	220f      	movs	r2, #15
 800726a:	fa02 f303 	lsl.w	r3, r2, r3
 800726e:	43db      	mvns	r3, r3
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	08d2      	lsrs	r2, r2, #3
 8007274:	4019      	ands	r1, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3208      	adds	r2, #8
 800727a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68da      	ldr	r2, [r3, #12]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	2103      	movs	r1, #3
 8007288:	fa01 f303 	lsl.w	r3, r1, r3
 800728c:	43db      	mvns	r3, r3
 800728e:	401a      	ands	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	2101      	movs	r1, #1
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	fa01 f303 	lsl.w	r3, r1, r3
 80072a0:	43db      	mvns	r3, r3
 80072a2:	401a      	ands	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	2103      	movs	r1, #3
 80072b2:	fa01 f303 	lsl.w	r3, r1, r3
 80072b6:	43db      	mvns	r3, r3
 80072b8:	401a      	ands	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	3301      	adds	r3, #1
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2b0f      	cmp	r3, #15
 80072c8:	f67f af40 	bls.w	800714c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80072cc:	bf00      	nop
 80072ce:	bf00      	nop
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40013800 	.word	0x40013800
 80072e0:	40020000 	.word	0x40020000
 80072e4:	40020400 	.word	0x40020400
 80072e8:	40020800 	.word	0x40020800
 80072ec:	40020c00 	.word	0x40020c00
 80072f0:	40021000 	.word	0x40021000
 80072f4:	40013c00 	.word	0x40013c00

080072f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	887b      	ldrh	r3, [r7, #2]
 800730a:	4013      	ands	r3, r2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007310:	2301      	movs	r3, #1
 8007312:	73fb      	strb	r3, [r7, #15]
 8007314:	e001      	b.n	800731a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800731a:	7bfb      	ldrb	r3, [r7, #15]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	807b      	strh	r3, [r7, #2]
 8007334:	4613      	mov	r3, r2
 8007336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007338:	787b      	ldrb	r3, [r7, #1]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800733e:	887a      	ldrh	r2, [r7, #2]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007344:	e003      	b.n	800734e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007346:	887b      	ldrh	r3, [r7, #2]
 8007348:	041a      	lsls	r2, r3, #16
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	619a      	str	r2, [r3, #24]
}
 800734e:	bf00      	nop
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
	...

0800735c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e264      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d075      	beq.n	8007466 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800737a:	4ba3      	ldr	r3, [pc, #652]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f003 030c 	and.w	r3, r3, #12
 8007382:	2b04      	cmp	r3, #4
 8007384:	d00c      	beq.n	80073a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007386:	4ba0      	ldr	r3, [pc, #640]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800738e:	2b08      	cmp	r3, #8
 8007390:	d112      	bne.n	80073b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007392:	4b9d      	ldr	r3, [pc, #628]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800739a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800739e:	d10b      	bne.n	80073b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073a0:	4b99      	ldr	r3, [pc, #612]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d05b      	beq.n	8007464 <HAL_RCC_OscConfig+0x108>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d157      	bne.n	8007464 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e23f      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c0:	d106      	bne.n	80073d0 <HAL_RCC_OscConfig+0x74>
 80073c2:	4b91      	ldr	r3, [pc, #580]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a90      	ldr	r2, [pc, #576]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80073c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073cc:	6013      	str	r3, [r2, #0]
 80073ce:	e01d      	b.n	800740c <HAL_RCC_OscConfig+0xb0>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073d8:	d10c      	bne.n	80073f4 <HAL_RCC_OscConfig+0x98>
 80073da:	4b8b      	ldr	r3, [pc, #556]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a8a      	ldr	r2, [pc, #552]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80073e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073e4:	6013      	str	r3, [r2, #0]
 80073e6:	4b88      	ldr	r3, [pc, #544]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a87      	ldr	r2, [pc, #540]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80073ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073f0:	6013      	str	r3, [r2, #0]
 80073f2:	e00b      	b.n	800740c <HAL_RCC_OscConfig+0xb0>
 80073f4:	4b84      	ldr	r3, [pc, #528]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a83      	ldr	r2, [pc, #524]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80073fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073fe:	6013      	str	r3, [r2, #0]
 8007400:	4b81      	ldr	r3, [pc, #516]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a80      	ldr	r2, [pc, #512]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 8007406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800740a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d013      	beq.n	800743c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007414:	f7fe ff28 	bl	8006268 <HAL_GetTick>
 8007418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800741a:	e008      	b.n	800742e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800741c:	f7fe ff24 	bl	8006268 <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	2b64      	cmp	r3, #100	; 0x64
 8007428:	d901      	bls.n	800742e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e204      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800742e:	4b76      	ldr	r3, [pc, #472]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0f0      	beq.n	800741c <HAL_RCC_OscConfig+0xc0>
 800743a:	e014      	b.n	8007466 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800743c:	f7fe ff14 	bl	8006268 <HAL_GetTick>
 8007440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007444:	f7fe ff10 	bl	8006268 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b64      	cmp	r3, #100	; 0x64
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e1f0      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007456:	4b6c      	ldr	r3, [pc, #432]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1f0      	bne.n	8007444 <HAL_RCC_OscConfig+0xe8>
 8007462:	e000      	b.n	8007466 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d063      	beq.n	800753a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007472:	4b65      	ldr	r3, [pc, #404]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f003 030c 	and.w	r3, r3, #12
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00b      	beq.n	8007496 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800747e:	4b62      	ldr	r3, [pc, #392]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007486:	2b08      	cmp	r3, #8
 8007488:	d11c      	bne.n	80074c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800748a:	4b5f      	ldr	r3, [pc, #380]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d116      	bne.n	80074c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007496:	4b5c      	ldr	r3, [pc, #368]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <HAL_RCC_OscConfig+0x152>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d001      	beq.n	80074ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e1c4      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ae:	4b56      	ldr	r3, [pc, #344]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	00db      	lsls	r3, r3, #3
 80074bc:	4952      	ldr	r1, [pc, #328]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074c2:	e03a      	b.n	800753a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d020      	beq.n	800750e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074cc:	4b4f      	ldr	r3, [pc, #316]	; (800760c <HAL_RCC_OscConfig+0x2b0>)
 80074ce:	2201      	movs	r2, #1
 80074d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d2:	f7fe fec9 	bl	8006268 <HAL_GetTick>
 80074d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074d8:	e008      	b.n	80074ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074da:	f7fe fec5 	bl	8006268 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d901      	bls.n	80074ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e1a5      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ec:	4b46      	ldr	r3, [pc, #280]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0f0      	beq.n	80074da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074f8:	4b43      	ldr	r3, [pc, #268]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	4940      	ldr	r1, [pc, #256]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 8007508:	4313      	orrs	r3, r2
 800750a:	600b      	str	r3, [r1, #0]
 800750c:	e015      	b.n	800753a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800750e:	4b3f      	ldr	r3, [pc, #252]	; (800760c <HAL_RCC_OscConfig+0x2b0>)
 8007510:	2200      	movs	r2, #0
 8007512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007514:	f7fe fea8 	bl	8006268 <HAL_GetTick>
 8007518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800751a:	e008      	b.n	800752e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800751c:	f7fe fea4 	bl	8006268 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	2b02      	cmp	r3, #2
 8007528:	d901      	bls.n	800752e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e184      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800752e:	4b36      	ldr	r3, [pc, #216]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1f0      	bne.n	800751c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0308 	and.w	r3, r3, #8
 8007542:	2b00      	cmp	r3, #0
 8007544:	d030      	beq.n	80075a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d016      	beq.n	800757c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800754e:	4b30      	ldr	r3, [pc, #192]	; (8007610 <HAL_RCC_OscConfig+0x2b4>)
 8007550:	2201      	movs	r2, #1
 8007552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007554:	f7fe fe88 	bl	8006268 <HAL_GetTick>
 8007558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800755a:	e008      	b.n	800756e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800755c:	f7fe fe84 	bl	8006268 <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b02      	cmp	r3, #2
 8007568:	d901      	bls.n	800756e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e164      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800756e:	4b26      	ldr	r3, [pc, #152]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 8007570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0f0      	beq.n	800755c <HAL_RCC_OscConfig+0x200>
 800757a:	e015      	b.n	80075a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800757c:	4b24      	ldr	r3, [pc, #144]	; (8007610 <HAL_RCC_OscConfig+0x2b4>)
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007582:	f7fe fe71 	bl	8006268 <HAL_GetTick>
 8007586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007588:	e008      	b.n	800759c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800758a:	f7fe fe6d 	bl	8006268 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	2b02      	cmp	r3, #2
 8007596:	d901      	bls.n	800759c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e14d      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800759c:	4b1a      	ldr	r3, [pc, #104]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 800759e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1f0      	bne.n	800758a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 80a0 	beq.w	80076f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075b6:	2300      	movs	r3, #0
 80075b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075ba:	4b13      	ldr	r3, [pc, #76]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80075bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10f      	bne.n	80075e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075c6:	2300      	movs	r3, #0
 80075c8:	60bb      	str	r3, [r7, #8]
 80075ca:	4b0f      	ldr	r3, [pc, #60]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	4a0e      	ldr	r2, [pc, #56]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80075d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075d4:	6413      	str	r3, [r2, #64]	; 0x40
 80075d6:	4b0c      	ldr	r3, [pc, #48]	; (8007608 <HAL_RCC_OscConfig+0x2ac>)
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075de:	60bb      	str	r3, [r7, #8]
 80075e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075e2:	2301      	movs	r3, #1
 80075e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075e6:	4b0b      	ldr	r3, [pc, #44]	; (8007614 <HAL_RCC_OscConfig+0x2b8>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d121      	bne.n	8007636 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075f2:	4b08      	ldr	r3, [pc, #32]	; (8007614 <HAL_RCC_OscConfig+0x2b8>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a07      	ldr	r2, [pc, #28]	; (8007614 <HAL_RCC_OscConfig+0x2b8>)
 80075f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075fe:	f7fe fe33 	bl	8006268 <HAL_GetTick>
 8007602:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007604:	e011      	b.n	800762a <HAL_RCC_OscConfig+0x2ce>
 8007606:	bf00      	nop
 8007608:	40023800 	.word	0x40023800
 800760c:	42470000 	.word	0x42470000
 8007610:	42470e80 	.word	0x42470e80
 8007614:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007618:	f7fe fe26 	bl	8006268 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	2b02      	cmp	r3, #2
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e106      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800762a:	4b85      	ldr	r3, [pc, #532]	; (8007840 <HAL_RCC_OscConfig+0x4e4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0f0      	beq.n	8007618 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d106      	bne.n	800764c <HAL_RCC_OscConfig+0x2f0>
 800763e:	4b81      	ldr	r3, [pc, #516]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 8007640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007642:	4a80      	ldr	r2, [pc, #512]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 8007644:	f043 0301 	orr.w	r3, r3, #1
 8007648:	6713      	str	r3, [r2, #112]	; 0x70
 800764a:	e01c      	b.n	8007686 <HAL_RCC_OscConfig+0x32a>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	2b05      	cmp	r3, #5
 8007652:	d10c      	bne.n	800766e <HAL_RCC_OscConfig+0x312>
 8007654:	4b7b      	ldr	r3, [pc, #492]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 8007656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007658:	4a7a      	ldr	r2, [pc, #488]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 800765a:	f043 0304 	orr.w	r3, r3, #4
 800765e:	6713      	str	r3, [r2, #112]	; 0x70
 8007660:	4b78      	ldr	r3, [pc, #480]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 8007662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007664:	4a77      	ldr	r2, [pc, #476]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 8007666:	f043 0301 	orr.w	r3, r3, #1
 800766a:	6713      	str	r3, [r2, #112]	; 0x70
 800766c:	e00b      	b.n	8007686 <HAL_RCC_OscConfig+0x32a>
 800766e:	4b75      	ldr	r3, [pc, #468]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 8007670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007672:	4a74      	ldr	r2, [pc, #464]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 8007674:	f023 0301 	bic.w	r3, r3, #1
 8007678:	6713      	str	r3, [r2, #112]	; 0x70
 800767a:	4b72      	ldr	r3, [pc, #456]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 800767c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800767e:	4a71      	ldr	r2, [pc, #452]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 8007680:	f023 0304 	bic.w	r3, r3, #4
 8007684:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d015      	beq.n	80076ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800768e:	f7fe fdeb 	bl	8006268 <HAL_GetTick>
 8007692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007694:	e00a      	b.n	80076ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007696:	f7fe fde7 	bl	8006268 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e0c5      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076ac:	4b65      	ldr	r3, [pc, #404]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 80076ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0ee      	beq.n	8007696 <HAL_RCC_OscConfig+0x33a>
 80076b8:	e014      	b.n	80076e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076ba:	f7fe fdd5 	bl	8006268 <HAL_GetTick>
 80076be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076c0:	e00a      	b.n	80076d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076c2:	f7fe fdd1 	bl	8006268 <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d901      	bls.n	80076d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e0af      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076d8:	4b5a      	ldr	r3, [pc, #360]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 80076da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076dc:	f003 0302 	and.w	r3, r3, #2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1ee      	bne.n	80076c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d105      	bne.n	80076f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076ea:	4b56      	ldr	r3, [pc, #344]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	4a55      	ldr	r2, [pc, #340]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 80076f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 809b 	beq.w	8007836 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007700:	4b50      	ldr	r3, [pc, #320]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f003 030c 	and.w	r3, r3, #12
 8007708:	2b08      	cmp	r3, #8
 800770a:	d05c      	beq.n	80077c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	2b02      	cmp	r3, #2
 8007712:	d141      	bne.n	8007798 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007714:	4b4c      	ldr	r3, [pc, #304]	; (8007848 <HAL_RCC_OscConfig+0x4ec>)
 8007716:	2200      	movs	r2, #0
 8007718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800771a:	f7fe fda5 	bl	8006268 <HAL_GetTick>
 800771e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007720:	e008      	b.n	8007734 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007722:	f7fe fda1 	bl	8006268 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	2b02      	cmp	r3, #2
 800772e:	d901      	bls.n	8007734 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e081      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007734:	4b43      	ldr	r3, [pc, #268]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1f0      	bne.n	8007722 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	69da      	ldr	r2, [r3, #28]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	431a      	orrs	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	019b      	lsls	r3, r3, #6
 8007750:	431a      	orrs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007756:	085b      	lsrs	r3, r3, #1
 8007758:	3b01      	subs	r3, #1
 800775a:	041b      	lsls	r3, r3, #16
 800775c:	431a      	orrs	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007762:	061b      	lsls	r3, r3, #24
 8007764:	4937      	ldr	r1, [pc, #220]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 8007766:	4313      	orrs	r3, r2
 8007768:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800776a:	4b37      	ldr	r3, [pc, #220]	; (8007848 <HAL_RCC_OscConfig+0x4ec>)
 800776c:	2201      	movs	r2, #1
 800776e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007770:	f7fe fd7a 	bl	8006268 <HAL_GetTick>
 8007774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007776:	e008      	b.n	800778a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007778:	f7fe fd76 	bl	8006268 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	2b02      	cmp	r3, #2
 8007784:	d901      	bls.n	800778a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e056      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800778a:	4b2e      	ldr	r3, [pc, #184]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0f0      	beq.n	8007778 <HAL_RCC_OscConfig+0x41c>
 8007796:	e04e      	b.n	8007836 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007798:	4b2b      	ldr	r3, [pc, #172]	; (8007848 <HAL_RCC_OscConfig+0x4ec>)
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800779e:	f7fe fd63 	bl	8006268 <HAL_GetTick>
 80077a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077a4:	e008      	b.n	80077b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077a6:	f7fe fd5f 	bl	8006268 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d901      	bls.n	80077b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e03f      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077b8:	4b22      	ldr	r3, [pc, #136]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1f0      	bne.n	80077a6 <HAL_RCC_OscConfig+0x44a>
 80077c4:	e037      	b.n	8007836 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d101      	bne.n	80077d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e032      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077d2:	4b1c      	ldr	r3, [pc, #112]	; (8007844 <HAL_RCC_OscConfig+0x4e8>)
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d028      	beq.n	8007832 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d121      	bne.n	8007832 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d11a      	bne.n	8007832 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007802:	4013      	ands	r3, r2
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007808:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800780a:	4293      	cmp	r3, r2
 800780c:	d111      	bne.n	8007832 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007818:	085b      	lsrs	r3, r3, #1
 800781a:	3b01      	subs	r3, #1
 800781c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800781e:	429a      	cmp	r2, r3
 8007820:	d107      	bne.n	8007832 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800782e:	429a      	cmp	r2, r3
 8007830:	d001      	beq.n	8007836 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e000      	b.n	8007838 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	40007000 	.word	0x40007000
 8007844:	40023800 	.word	0x40023800
 8007848:	42470060 	.word	0x42470060

0800784c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e0cc      	b.n	80079fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007860:	4b68      	ldr	r3, [pc, #416]	; (8007a04 <HAL_RCC_ClockConfig+0x1b8>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0307 	and.w	r3, r3, #7
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	429a      	cmp	r2, r3
 800786c:	d90c      	bls.n	8007888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800786e:	4b65      	ldr	r3, [pc, #404]	; (8007a04 <HAL_RCC_ClockConfig+0x1b8>)
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	b2d2      	uxtb	r2, r2
 8007874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007876:	4b63      	ldr	r3, [pc, #396]	; (8007a04 <HAL_RCC_ClockConfig+0x1b8>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0307 	and.w	r3, r3, #7
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	429a      	cmp	r2, r3
 8007882:	d001      	beq.n	8007888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e0b8      	b.n	80079fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b00      	cmp	r3, #0
 8007892:	d020      	beq.n	80078d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	2b00      	cmp	r3, #0
 800789e:	d005      	beq.n	80078ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078a0:	4b59      	ldr	r3, [pc, #356]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	4a58      	ldr	r2, [pc, #352]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80078a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80078aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0308 	and.w	r3, r3, #8
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d005      	beq.n	80078c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078b8:	4b53      	ldr	r3, [pc, #332]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	4a52      	ldr	r2, [pc, #328]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80078be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80078c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078c4:	4b50      	ldr	r3, [pc, #320]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	494d      	ldr	r1, [pc, #308]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d044      	beq.n	800796c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d107      	bne.n	80078fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078ea:	4b47      	ldr	r3, [pc, #284]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d119      	bne.n	800792a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e07f      	b.n	80079fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d003      	beq.n	800790a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007906:	2b03      	cmp	r3, #3
 8007908:	d107      	bne.n	800791a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800790a:	4b3f      	ldr	r3, [pc, #252]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d109      	bne.n	800792a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e06f      	b.n	80079fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800791a:	4b3b      	ldr	r3, [pc, #236]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e067      	b.n	80079fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800792a:	4b37      	ldr	r3, [pc, #220]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f023 0203 	bic.w	r2, r3, #3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	4934      	ldr	r1, [pc, #208]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 8007938:	4313      	orrs	r3, r2
 800793a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800793c:	f7fe fc94 	bl	8006268 <HAL_GetTick>
 8007940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007942:	e00a      	b.n	800795a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007944:	f7fe fc90 	bl	8006268 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007952:	4293      	cmp	r3, r2
 8007954:	d901      	bls.n	800795a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e04f      	b.n	80079fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800795a:	4b2b      	ldr	r3, [pc, #172]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f003 020c 	and.w	r2, r3, #12
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	429a      	cmp	r2, r3
 800796a:	d1eb      	bne.n	8007944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800796c:	4b25      	ldr	r3, [pc, #148]	; (8007a04 <HAL_RCC_ClockConfig+0x1b8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d20c      	bcs.n	8007994 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800797a:	4b22      	ldr	r3, [pc, #136]	; (8007a04 <HAL_RCC_ClockConfig+0x1b8>)
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007982:	4b20      	ldr	r3, [pc, #128]	; (8007a04 <HAL_RCC_ClockConfig+0x1b8>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d001      	beq.n	8007994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e032      	b.n	80079fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0304 	and.w	r3, r3, #4
 800799c:	2b00      	cmp	r3, #0
 800799e:	d008      	beq.n	80079b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079a0:	4b19      	ldr	r3, [pc, #100]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	4916      	ldr	r1, [pc, #88]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0308 	and.w	r3, r3, #8
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d009      	beq.n	80079d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079be:	4b12      	ldr	r3, [pc, #72]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	490e      	ldr	r1, [pc, #56]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80079d2:	f000 f821 	bl	8007a18 <HAL_RCC_GetSysClockFreq>
 80079d6:	4602      	mov	r2, r0
 80079d8:	4b0b      	ldr	r3, [pc, #44]	; (8007a08 <HAL_RCC_ClockConfig+0x1bc>)
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	091b      	lsrs	r3, r3, #4
 80079de:	f003 030f 	and.w	r3, r3, #15
 80079e2:	490a      	ldr	r1, [pc, #40]	; (8007a0c <HAL_RCC_ClockConfig+0x1c0>)
 80079e4:	5ccb      	ldrb	r3, [r1, r3]
 80079e6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ea:	4a09      	ldr	r2, [pc, #36]	; (8007a10 <HAL_RCC_ClockConfig+0x1c4>)
 80079ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80079ee:	4b09      	ldr	r3, [pc, #36]	; (8007a14 <HAL_RCC_ClockConfig+0x1c8>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fe fbf4 	bl	80061e0 <HAL_InitTick>

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	40023c00 	.word	0x40023c00
 8007a08:	40023800 	.word	0x40023800
 8007a0c:	0800bdcc 	.word	0x0800bdcc
 8007a10:	20000000 	.word	0x20000000
 8007a14:	2000001c 	.word	0x2000001c

08007a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a18:	b5b0      	push	{r4, r5, r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007a1e:	2100      	movs	r1, #0
 8007a20:	6079      	str	r1, [r7, #4]
 8007a22:	2100      	movs	r1, #0
 8007a24:	60f9      	str	r1, [r7, #12]
 8007a26:	2100      	movs	r1, #0
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a2e:	4952      	ldr	r1, [pc, #328]	; (8007b78 <HAL_RCC_GetSysClockFreq+0x160>)
 8007a30:	6889      	ldr	r1, [r1, #8]
 8007a32:	f001 010c 	and.w	r1, r1, #12
 8007a36:	2908      	cmp	r1, #8
 8007a38:	d00d      	beq.n	8007a56 <HAL_RCC_GetSysClockFreq+0x3e>
 8007a3a:	2908      	cmp	r1, #8
 8007a3c:	f200 8094 	bhi.w	8007b68 <HAL_RCC_GetSysClockFreq+0x150>
 8007a40:	2900      	cmp	r1, #0
 8007a42:	d002      	beq.n	8007a4a <HAL_RCC_GetSysClockFreq+0x32>
 8007a44:	2904      	cmp	r1, #4
 8007a46:	d003      	beq.n	8007a50 <HAL_RCC_GetSysClockFreq+0x38>
 8007a48:	e08e      	b.n	8007b68 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a4a:	4b4c      	ldr	r3, [pc, #304]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x164>)
 8007a4c:	60bb      	str	r3, [r7, #8]
       break;
 8007a4e:	e08e      	b.n	8007b6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a50:	4b4b      	ldr	r3, [pc, #300]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x168>)
 8007a52:	60bb      	str	r3, [r7, #8]
      break;
 8007a54:	e08b      	b.n	8007b6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a56:	4948      	ldr	r1, [pc, #288]	; (8007b78 <HAL_RCC_GetSysClockFreq+0x160>)
 8007a58:	6849      	ldr	r1, [r1, #4]
 8007a5a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007a5e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a60:	4945      	ldr	r1, [pc, #276]	; (8007b78 <HAL_RCC_GetSysClockFreq+0x160>)
 8007a62:	6849      	ldr	r1, [r1, #4]
 8007a64:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007a68:	2900      	cmp	r1, #0
 8007a6a:	d024      	beq.n	8007ab6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a6c:	4942      	ldr	r1, [pc, #264]	; (8007b78 <HAL_RCC_GetSysClockFreq+0x160>)
 8007a6e:	6849      	ldr	r1, [r1, #4]
 8007a70:	0989      	lsrs	r1, r1, #6
 8007a72:	4608      	mov	r0, r1
 8007a74:	f04f 0100 	mov.w	r1, #0
 8007a78:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007a7c:	f04f 0500 	mov.w	r5, #0
 8007a80:	ea00 0204 	and.w	r2, r0, r4
 8007a84:	ea01 0305 	and.w	r3, r1, r5
 8007a88:	493d      	ldr	r1, [pc, #244]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x168>)
 8007a8a:	fb01 f003 	mul.w	r0, r1, r3
 8007a8e:	2100      	movs	r1, #0
 8007a90:	fb01 f102 	mul.w	r1, r1, r2
 8007a94:	1844      	adds	r4, r0, r1
 8007a96:	493a      	ldr	r1, [pc, #232]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x168>)
 8007a98:	fba2 0101 	umull	r0, r1, r2, r1
 8007a9c:	1863      	adds	r3, r4, r1
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f04f 0300 	mov.w	r3, #0
 8007aa8:	f7f8 fbea 	bl	8000280 <__aeabi_uldivmod>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	e04a      	b.n	8007b4c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ab6:	4b30      	ldr	r3, [pc, #192]	; (8007b78 <HAL_RCC_GetSysClockFreq+0x160>)
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	099b      	lsrs	r3, r3, #6
 8007abc:	461a      	mov	r2, r3
 8007abe:	f04f 0300 	mov.w	r3, #0
 8007ac2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007ac6:	f04f 0100 	mov.w	r1, #0
 8007aca:	ea02 0400 	and.w	r4, r2, r0
 8007ace:	ea03 0501 	and.w	r5, r3, r1
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	f04f 0200 	mov.w	r2, #0
 8007ada:	f04f 0300 	mov.w	r3, #0
 8007ade:	014b      	lsls	r3, r1, #5
 8007ae0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ae4:	0142      	lsls	r2, r0, #5
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	4619      	mov	r1, r3
 8007aea:	1b00      	subs	r0, r0, r4
 8007aec:	eb61 0105 	sbc.w	r1, r1, r5
 8007af0:	f04f 0200 	mov.w	r2, #0
 8007af4:	f04f 0300 	mov.w	r3, #0
 8007af8:	018b      	lsls	r3, r1, #6
 8007afa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007afe:	0182      	lsls	r2, r0, #6
 8007b00:	1a12      	subs	r2, r2, r0
 8007b02:	eb63 0301 	sbc.w	r3, r3, r1
 8007b06:	f04f 0000 	mov.w	r0, #0
 8007b0a:	f04f 0100 	mov.w	r1, #0
 8007b0e:	00d9      	lsls	r1, r3, #3
 8007b10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b14:	00d0      	lsls	r0, r2, #3
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	1912      	adds	r2, r2, r4
 8007b1c:	eb45 0303 	adc.w	r3, r5, r3
 8007b20:	f04f 0000 	mov.w	r0, #0
 8007b24:	f04f 0100 	mov.w	r1, #0
 8007b28:	0299      	lsls	r1, r3, #10
 8007b2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007b2e:	0290      	lsls	r0, r2, #10
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	4610      	mov	r0, r2
 8007b36:	4619      	mov	r1, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f04f 0300 	mov.w	r3, #0
 8007b40:	f7f8 fb9e 	bl	8000280 <__aeabi_uldivmod>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	4613      	mov	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b4c:	4b0a      	ldr	r3, [pc, #40]	; (8007b78 <HAL_RCC_GetSysClockFreq+0x160>)
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	0c1b      	lsrs	r3, r3, #16
 8007b52:	f003 0303 	and.w	r3, r3, #3
 8007b56:	3301      	adds	r3, #1
 8007b58:	005b      	lsls	r3, r3, #1
 8007b5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b64:	60bb      	str	r3, [r7, #8]
      break;
 8007b66:	e002      	b.n	8007b6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b68:	4b04      	ldr	r3, [pc, #16]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x164>)
 8007b6a:	60bb      	str	r3, [r7, #8]
      break;
 8007b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bdb0      	pop	{r4, r5, r7, pc}
 8007b78:	40023800 	.word	0x40023800
 8007b7c:	00f42400 	.word	0x00f42400
 8007b80:	017d7840 	.word	0x017d7840

08007b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b84:	b480      	push	{r7}
 8007b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b88:	4b03      	ldr	r3, [pc, #12]	; (8007b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	20000000 	.word	0x20000000

08007b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ba0:	f7ff fff0 	bl	8007b84 <HAL_RCC_GetHCLKFreq>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	0a9b      	lsrs	r3, r3, #10
 8007bac:	f003 0307 	and.w	r3, r3, #7
 8007bb0:	4903      	ldr	r1, [pc, #12]	; (8007bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bb2:	5ccb      	ldrb	r3, [r1, r3]
 8007bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	40023800 	.word	0x40023800
 8007bc0:	0800bddc 	.word	0x0800bddc

08007bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007bc8:	f7ff ffdc 	bl	8007b84 <HAL_RCC_GetHCLKFreq>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	0b5b      	lsrs	r3, r3, #13
 8007bd4:	f003 0307 	and.w	r3, r3, #7
 8007bd8:	4903      	ldr	r1, [pc, #12]	; (8007be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bda:	5ccb      	ldrb	r3, [r1, r3]
 8007bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	40023800 	.word	0x40023800
 8007be8:	0800bddc 	.word	0x0800bddc

08007bec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e022      	b.n	8007c44 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d105      	bne.n	8007c16 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7f9 fdcf 	bl	80017b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2203      	movs	r2, #3
 8007c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f814 	bl	8007c4c <HAL_SD_InitCard>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e00a      	b.n	8007c44 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c4c:	b5b0      	push	{r4, r5, r7, lr}
 8007c4e:	b08e      	sub	sp, #56	; 0x38
 8007c50:	af04      	add	r7, sp, #16
 8007c52:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007c54:	2300      	movs	r3, #0
 8007c56:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007c60:	2300      	movs	r3, #0
 8007c62:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007c64:	2300      	movs	r3, #0
 8007c66:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007c68:	2376      	movs	r3, #118	; 0x76
 8007c6a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681d      	ldr	r5, [r3, #0]
 8007c70:	466c      	mov	r4, sp
 8007c72:	f107 0314 	add.w	r3, r7, #20
 8007c76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007c7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007c7e:	f107 0308 	add.w	r3, r7, #8
 8007c82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c84:	4628      	mov	r0, r5
 8007c86:	f002 fc3b 	bl	800a500 <SDIO_Init>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e04c      	b.n	8007d36 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007c9c:	4b28      	ldr	r3, [pc, #160]	; (8007d40 <HAL_SD_InitCard+0xf4>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f002 fc73 	bl	800a592 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007cac:	4b24      	ldr	r3, [pc, #144]	; (8007d40 <HAL_SD_InitCard+0xf4>)
 8007cae:	2201      	movs	r2, #1
 8007cb0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 f80e 	bl	8008cd4 <SD_PowerON>
 8007cb8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e02e      	b.n	8007d36 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 ff2f 	bl	8008b3c <SD_InitCard>
 8007cde:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00b      	beq.n	8007cfe <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e01b      	b.n	8007d36 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d06:	4618      	mov	r0, r3
 8007d08:	f002 fcd6 	bl	800a6b8 <SDMMC_CmdBlockLength>
 8007d0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d0e:	6a3b      	ldr	r3, [r7, #32]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00f      	beq.n	8007d34 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a0a      	ldr	r2, [pc, #40]	; (8007d44 <HAL_SD_InitCard+0xf8>)
 8007d1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	431a      	orrs	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e000      	b.n	8007d36 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3728      	adds	r7, #40	; 0x28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	422580a0 	.word	0x422580a0
 8007d44:	004005ff 	.word	0x004005ff

08007d48 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08c      	sub	sp, #48	; 0x30
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d107      	bne.n	8007d70 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e0c0      	b.n	8007ef2 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	f040 80b9 	bne.w	8007ef0 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	441a      	add	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d907      	bls.n	8007da2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e0a7      	b.n	8007ef2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2203      	movs	r2, #3
 8007da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2200      	movs	r2, #0
 8007db0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	6812      	ldr	r2, [r2, #0]
 8007dbc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8007dc0:	f043 0302 	orr.w	r3, r3, #2
 8007dc4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dca:	4a4c      	ldr	r2, [pc, #304]	; (8007efc <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007dcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd2:	4a4b      	ldr	r2, [pc, #300]	; (8007f00 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007dd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dda:	2200      	movs	r2, #0
 8007ddc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	2200      	movs	r2, #0
 8007de4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	689a      	ldr	r2, [r3, #8]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3380      	adds	r3, #128	; 0x80
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	025b      	lsls	r3, r3, #9
 8007e14:	089b      	lsrs	r3, r3, #2
 8007e16:	f7fe fca7 	bl	8006768 <HAL_DMA_Start_IT>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d017      	beq.n	8007e50 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007e2e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a33      	ldr	r2, [pc, #204]	; (8007f04 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007e36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e050      	b.n	8007ef2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007e50:	4b2d      	ldr	r3, [pc, #180]	; (8007f08 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007e52:	2201      	movs	r2, #1
 8007e54:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d002      	beq.n	8007e64 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	025b      	lsls	r3, r3, #9
 8007e62:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e64:	f04f 33ff 	mov.w	r3, #4294967295
 8007e68:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	025b      	lsls	r3, r3, #9
 8007e6e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007e70:	2390      	movs	r3, #144	; 0x90
 8007e72:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007e74:	2302      	movs	r3, #2
 8007e76:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f107 0210 	add.w	r2, r7, #16
 8007e88:	4611      	mov	r1, r2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f002 fbe8 	bl	800a660 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d90a      	bls.n	8007eac <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2282      	movs	r2, #130	; 0x82
 8007e9a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f002 fc4c 	bl	800a740 <SDMMC_CmdReadMultiBlock>
 8007ea8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007eaa:	e009      	b.n	8007ec0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2281      	movs	r2, #129	; 0x81
 8007eb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f002 fc1f 	bl	800a6fc <SDMMC_CmdReadSingleBlock>
 8007ebe:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d012      	beq.n	8007eec <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a0e      	ldr	r2, [pc, #56]	; (8007f04 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007ecc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e002      	b.n	8007ef2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	e000      	b.n	8007ef2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8007ef0:	2302      	movs	r3, #2
  }
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3730      	adds	r7, #48	; 0x30
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	0800894b 	.word	0x0800894b
 8007f00:	080089bd 	.word	0x080089bd
 8007f04:	004005ff 	.word	0x004005ff
 8007f08:	4225858c 	.word	0x4225858c

08007f0c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08c      	sub	sp, #48	; 0x30
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d107      	bne.n	8007f34 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e0c5      	b.n	80080c0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	f040 80be 	bne.w	80080be <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	441a      	add	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d907      	bls.n	8007f66 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e0ac      	b.n	80080c0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2203      	movs	r2, #3
 8007f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2200      	movs	r2, #0
 8007f74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	6812      	ldr	r2, [r2, #0]
 8007f80:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8007f84:	f043 0302 	orr.w	r3, r3, #2
 8007f88:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	4a4e      	ldr	r2, [pc, #312]	; (80080c8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007f90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f96:	4a4d      	ldr	r2, [pc, #308]	; (80080cc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007f98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d002      	beq.n	8007fb0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fac:	025b      	lsls	r3, r3, #9
 8007fae:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d90a      	bls.n	8007fcc <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	22a0      	movs	r2, #160	; 0xa0
 8007fba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f002 fc00 	bl	800a7c8 <SDMMC_CmdWriteMultiBlock>
 8007fc8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007fca:	e009      	b.n	8007fe0 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2290      	movs	r2, #144	; 0x90
 8007fd0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f002 fbd3 	bl	800a784 <SDMMC_CmdWriteSingleBlock>
 8007fde:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d012      	beq.n	800800c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a39      	ldr	r2, [pc, #228]	; (80080d0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007fec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff4:	431a      	orrs	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e059      	b.n	80080c0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800800c:	4b31      	ldr	r3, [pc, #196]	; (80080d4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800800e:	2201      	movs	r2, #1
 8008010:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008016:	2240      	movs	r2, #64	; 0x40
 8008018:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800803a:	68b9      	ldr	r1, [r7, #8]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3380      	adds	r3, #128	; 0x80
 8008042:	461a      	mov	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	025b      	lsls	r3, r3, #9
 8008048:	089b      	lsrs	r3, r3, #2
 800804a:	f7fe fb8d 	bl	8006768 <HAL_DMA_Start_IT>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d01c      	beq.n	800808e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8008062:	f023 0302 	bic.w	r3, r3, #2
 8008066:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a18      	ldr	r2, [pc, #96]	; (80080d0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800806e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008074:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e018      	b.n	80080c0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800808e:	f04f 33ff 	mov.w	r3, #4294967295
 8008092:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	025b      	lsls	r3, r3, #9
 8008098:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800809a:	2390      	movs	r3, #144	; 0x90
 800809c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800809e:	2300      	movs	r3, #0
 80080a0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80080a6:	2301      	movs	r3, #1
 80080a8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f107 0210 	add.w	r2, r7, #16
 80080b2:	4611      	mov	r1, r2
 80080b4:	4618      	mov	r0, r3
 80080b6:	f002 fad3 	bl	800a660 <SDIO_ConfigData>

      return HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	e000      	b.n	80080c0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80080be:	2302      	movs	r3, #2
  }
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3730      	adds	r7, #48	; 0x30
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	08008921 	.word	0x08008921
 80080cc:	080089bd 	.word	0x080089bd
 80080d0:	004005ff 	.word	0x004005ff
 80080d4:	4225858c 	.word	0x4225858c

080080d8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d008      	beq.n	8008106 <HAL_SD_IRQHandler+0x2e>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f003 0308 	and.w	r3, r3, #8
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 f807 	bl	8009112 <SD_Read_IT>
 8008104:	e165      	b.n	80083d2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008110:	2b00      	cmp	r3, #0
 8008112:	f000 808f 	beq.w	8008234 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800811e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	6812      	ldr	r2, [r2, #0]
 800812a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800812e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008132:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0201 	bic.w	r2, r2, #1
 8008142:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d039      	beq.n	80081c2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b00      	cmp	r3, #0
 8008156:	d104      	bne.n	8008162 <HAL_SD_IRQHandler+0x8a>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f003 0320 	and.w	r3, r3, #32
 800815e:	2b00      	cmp	r3, #0
 8008160:	d011      	beq.n	8008186 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4618      	mov	r0, r3
 8008168:	f002 fb50 	bl	800a80c <SDMMC_CmdStopTransfer>
 800816c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d008      	beq.n	8008186 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	431a      	orrs	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f92f 	bl	80083e4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f240 523a 	movw	r2, #1338	; 0x53a
 800818e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d104      	bne.n	80081b2 <HAL_SD_IRQHandler+0xda>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7f9 fa94 	bl	80016e0 <HAL_SD_RxCpltCallback>
 80081b8:	e10b      	b.n	80083d2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7f9 faa0 	bl	8001700 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80081c0:	e107      	b.n	80083d2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 8102 	beq.w	80083d2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d011      	beq.n	80081fc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4618      	mov	r0, r3
 80081de:	f002 fb15 	bl	800a80c <SDMMC_CmdStopTransfer>
 80081e2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d008      	beq.n	80081fc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	431a      	orrs	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f8f4 	bl	80083e4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	f040 80e5 	bne.w	80083d2 <HAL_SD_IRQHandler+0x2fa>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f003 0302 	and.w	r3, r3, #2
 800820e:	2b00      	cmp	r3, #0
 8008210:	f040 80df 	bne.w	80083d2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 0208 	bic.w	r2, r2, #8
 8008222:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7f9 fa67 	bl	8001700 <HAL_SD_TxCpltCallback>
}
 8008232:	e0ce      	b.n	80083d2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d008      	beq.n	8008254 <HAL_SD_IRQHandler+0x17c>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f003 0308 	and.w	r3, r3, #8
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 ffb1 	bl	80091b4 <SD_Write_IT>
 8008252:	e0be      	b.n	80083d2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800825a:	f240 233a 	movw	r3, #570	; 0x23a
 800825e:	4013      	ands	r3, r2
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 80b6 	beq.w	80083d2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826c:	f003 0302 	and.w	r3, r3, #2
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008278:	f043 0202 	orr.w	r2, r3, #2
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008286:	f003 0308 	and.w	r3, r3, #8
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008292:	f043 0208 	orr.w	r2, r3, #8
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d005      	beq.n	80082b4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ac:	f043 0220 	orr.w	r2, r3, #32
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ba:	f003 0310 	and.w	r3, r3, #16
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d005      	beq.n	80082ce <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c6:	f043 0210 	orr.w	r2, r3, #16
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e0:	f043 0208 	orr.w	r2, r3, #8
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f240 723a 	movw	r2, #1850	; 0x73a
 80082f0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	6812      	ldr	r2, [r2, #0]
 80082fc:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8008300:	f023 0302 	bic.w	r3, r3, #2
 8008304:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4618      	mov	r0, r3
 800830c:	f002 fa7e 	bl	800a80c <SDMMC_CmdStopTransfer>
 8008310:	4602      	mov	r2, r0
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008316:	431a      	orrs	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f003 0308 	and.w	r3, r3, #8
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00a      	beq.n	800833c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f855 	bl	80083e4 <HAL_SD_ErrorCallback>
}
 800833a:	e04a      	b.n	80083d2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008342:	2b00      	cmp	r3, #0
 8008344:	d045      	beq.n	80083d2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f003 0310 	and.w	r3, r3, #16
 800834c:	2b00      	cmp	r3, #0
 800834e:	d104      	bne.n	800835a <HAL_SD_IRQHandler+0x282>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f003 0320 	and.w	r3, r3, #32
 8008356:	2b00      	cmp	r3, #0
 8008358:	d011      	beq.n	800837e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835e:	4a1f      	ldr	r2, [pc, #124]	; (80083dc <HAL_SD_IRQHandler+0x304>)
 8008360:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe fac6 	bl	80068f8 <HAL_DMA_Abort_IT>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d02f      	beq.n	80083d2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fb72 	bl	8008a60 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800837c:	e029      	b.n	80083d2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	d104      	bne.n	8008392 <HAL_SD_IRQHandler+0x2ba>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d011      	beq.n	80083b6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008396:	4a12      	ldr	r2, [pc, #72]	; (80083e0 <HAL_SD_IRQHandler+0x308>)
 8008398:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fe faaa 	bl	80068f8 <HAL_DMA_Abort_IT>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d013      	beq.n	80083d2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fb8d 	bl	8008ace <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80083b4:	e00d      	b.n	80083d2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f814 	bl	80083f8 <HAL_SD_AbortCallback>
}
 80083d0:	e7ff      	b.n	80083d2 <HAL_SD_IRQHandler+0x2fa>
 80083d2:	bf00      	nop
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	08008a61 	.word	0x08008a61
 80083e0:	08008acf 	.word	0x08008acf

080083e4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800841a:	0f9b      	lsrs	r3, r3, #30
 800841c:	b2da      	uxtb	r2, r3
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008426:	0e9b      	lsrs	r3, r3, #26
 8008428:	b2db      	uxtb	r3, r3
 800842a:	f003 030f 	and.w	r3, r3, #15
 800842e:	b2da      	uxtb	r2, r3
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008438:	0e1b      	lsrs	r3, r3, #24
 800843a:	b2db      	uxtb	r3, r3
 800843c:	f003 0303 	and.w	r3, r3, #3
 8008440:	b2da      	uxtb	r2, r3
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800844a:	0c1b      	lsrs	r3, r3, #16
 800844c:	b2da      	uxtb	r2, r3
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008456:	0a1b      	lsrs	r3, r3, #8
 8008458:	b2da      	uxtb	r2, r3
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008462:	b2da      	uxtb	r2, r3
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800846c:	0d1b      	lsrs	r3, r3, #20
 800846e:	b29a      	uxth	r2, r3
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008478:	0c1b      	lsrs	r3, r3, #16
 800847a:	b2db      	uxtb	r3, r3
 800847c:	f003 030f 	and.w	r3, r3, #15
 8008480:	b2da      	uxtb	r2, r3
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800848a:	0bdb      	lsrs	r3, r3, #15
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	b2da      	uxtb	r2, r3
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800849c:	0b9b      	lsrs	r3, r3, #14
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	b2da      	uxtb	r2, r3
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084ae:	0b5b      	lsrs	r3, r3, #13
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084c0:	0b1b      	lsrs	r3, r3, #12
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2200      	movs	r2, #0
 80084d2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d163      	bne.n	80085a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084e0:	009a      	lsls	r2, r3, #2
 80084e2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80084e6:	4013      	ands	r3, r2
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80084ec:	0f92      	lsrs	r2, r2, #30
 80084ee:	431a      	orrs	r2, r3
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084f8:	0edb      	lsrs	r3, r3, #27
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	f003 0307 	and.w	r3, r3, #7
 8008500:	b2da      	uxtb	r2, r3
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800850a:	0e1b      	lsrs	r3, r3, #24
 800850c:	b2db      	uxtb	r3, r3
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	b2da      	uxtb	r2, r3
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800851c:	0d5b      	lsrs	r3, r3, #21
 800851e:	b2db      	uxtb	r3, r3
 8008520:	f003 0307 	and.w	r3, r3, #7
 8008524:	b2da      	uxtb	r2, r3
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800852e:	0c9b      	lsrs	r3, r3, #18
 8008530:	b2db      	uxtb	r3, r3
 8008532:	f003 0307 	and.w	r3, r3, #7
 8008536:	b2da      	uxtb	r2, r3
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008540:	0bdb      	lsrs	r3, r3, #15
 8008542:	b2db      	uxtb	r3, r3
 8008544:	f003 0307 	and.w	r3, r3, #7
 8008548:	b2da      	uxtb	r2, r3
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	1c5a      	adds	r2, r3, #1
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	7e1b      	ldrb	r3, [r3, #24]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	f003 0307 	and.w	r3, r3, #7
 8008562:	3302      	adds	r3, #2
 8008564:	2201      	movs	r2, #1
 8008566:	fa02 f303 	lsl.w	r3, r2, r3
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800856e:	fb02 f203 	mul.w	r2, r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	7a1b      	ldrb	r3, [r3, #8]
 800857a:	b2db      	uxtb	r3, r3
 800857c:	f003 030f 	and.w	r3, r3, #15
 8008580:	2201      	movs	r2, #1
 8008582:	409a      	lsls	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008590:	0a52      	lsrs	r2, r2, #9
 8008592:	fb02 f203 	mul.w	r2, r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085a0:	661a      	str	r2, [r3, #96]	; 0x60
 80085a2:	e031      	b.n	8008608 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d11d      	bne.n	80085e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085b0:	041b      	lsls	r3, r3, #16
 80085b2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ba:	0c1b      	lsrs	r3, r3, #16
 80085bc:	431a      	orrs	r2, r3
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	3301      	adds	r3, #1
 80085c8:	029a      	lsls	r2, r3, #10
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085dc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	661a      	str	r2, [r3, #96]	; 0x60
 80085e6:	e00f      	b.n	8008608 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a58      	ldr	r2, [pc, #352]	; (8008750 <HAL_SD_GetCardCSD+0x344>)
 80085ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e09d      	b.n	8008744 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800860c:	0b9b      	lsrs	r3, r3, #14
 800860e:	b2db      	uxtb	r3, r3
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	b2da      	uxtb	r2, r3
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800861e:	09db      	lsrs	r3, r3, #7
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008626:	b2da      	uxtb	r2, r3
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008630:	b2db      	uxtb	r3, r3
 8008632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008636:	b2da      	uxtb	r2, r3
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008640:	0fdb      	lsrs	r3, r3, #31
 8008642:	b2da      	uxtb	r2, r3
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800864c:	0f5b      	lsrs	r3, r3, #29
 800864e:	b2db      	uxtb	r3, r3
 8008650:	f003 0303 	and.w	r3, r3, #3
 8008654:	b2da      	uxtb	r2, r3
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800865e:	0e9b      	lsrs	r3, r3, #26
 8008660:	b2db      	uxtb	r3, r3
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	b2da      	uxtb	r2, r3
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008670:	0d9b      	lsrs	r3, r3, #22
 8008672:	b2db      	uxtb	r3, r3
 8008674:	f003 030f 	and.w	r3, r3, #15
 8008678:	b2da      	uxtb	r2, r3
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008682:	0d5b      	lsrs	r3, r3, #21
 8008684:	b2db      	uxtb	r3, r3
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	b2da      	uxtb	r2, r3
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869e:	0c1b      	lsrs	r3, r3, #16
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	f003 0301 	and.w	r3, r3, #1
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b2:	0bdb      	lsrs	r3, r3, #15
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c6:	0b9b      	lsrs	r3, r3, #14
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086da:	0b5b      	lsrs	r3, r3, #13
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ee:	0b1b      	lsrs	r3, r3, #12
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008702:	0a9b      	lsrs	r3, r3, #10
 8008704:	b2db      	uxtb	r3, r3
 8008706:	f003 0303 	and.w	r3, r3, #3
 800870a:	b2da      	uxtb	r2, r3
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008716:	0a1b      	lsrs	r3, r3, #8
 8008718:	b2db      	uxtb	r3, r3
 800871a:	f003 0303 	and.w	r3, r3, #3
 800871e:	b2da      	uxtb	r2, r3
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800872a:	085b      	lsrs	r3, r3, #1
 800872c:	b2db      	uxtb	r3, r3
 800872e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008732:	b2da      	uxtb	r2, r3
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr
 8008750:	004005ff 	.word	0x004005ff

08008754 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80087ac:	b5b0      	push	{r4, r5, r7, lr}
 80087ae:	b08e      	sub	sp, #56	; 0x38
 80087b0:	af04      	add	r7, sp, #16
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2203      	movs	r2, #3
 80087c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d02e      	beq.n	800882a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087d2:	d106      	bne.n	80087e2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	639a      	str	r2, [r3, #56]	; 0x38
 80087e0:	e029      	b.n	8008836 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087e8:	d10a      	bne.n	8008800 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fb28 	bl	8008e40 <SD_WideBus_Enable>
 80087f0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	431a      	orrs	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	639a      	str	r2, [r3, #56]	; 0x38
 80087fe:	e01a      	b.n	8008836 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10a      	bne.n	800881c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fb65 	bl	8008ed6 <SD_WideBus_Disable>
 800880c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	431a      	orrs	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	639a      	str	r2, [r3, #56]	; 0x38
 800881a:	e00c      	b.n	8008836 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008820:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	639a      	str	r2, [r3, #56]	; 0x38
 8008828:	e005      	b.n	8008836 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00b      	beq.n	8008856 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a26      	ldr	r2, [pc, #152]	; (80088dc <HAL_SD_ConfigWideBusOperation+0x130>)
 8008844:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008854:	e01f      	b.n	8008896 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681d      	ldr	r5, [r3, #0]
 800887c:	466c      	mov	r4, sp
 800887e:	f107 0314 	add.w	r3, r7, #20
 8008882:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008886:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800888a:	f107 0308 	add.w	r3, r7, #8
 800888e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008890:	4628      	mov	r0, r5
 8008892:	f001 fe35 	bl	800a500 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800889e:	4618      	mov	r0, r3
 80088a0:	f001 ff0a 	bl	800a6b8 <SDMMC_CmdBlockLength>
 80088a4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088a6:	6a3b      	ldr	r3, [r7, #32]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00c      	beq.n	80088c6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a0a      	ldr	r2, [pc, #40]	; (80088dc <HAL_SD_ConfigWideBusOperation+0x130>)
 80088b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088b8:	6a3b      	ldr	r3, [r7, #32]
 80088ba:	431a      	orrs	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80088ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3728      	adds	r7, #40	; 0x28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bdb0      	pop	{r4, r5, r7, pc}
 80088da:	bf00      	nop
 80088dc:	004005ff 	.word	0x004005ff

080088e0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80088e8:	2300      	movs	r3, #0
 80088ea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80088ec:	f107 030c 	add.w	r3, r7, #12
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fa7c 	bl	8008df0 <SD_SendStatus>
 80088f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d005      	beq.n	800890c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	431a      	orrs	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	0a5b      	lsrs	r3, r3, #9
 8008910:	f003 030f 	and.w	r3, r3, #15
 8008914:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008916:	693b      	ldr	r3, [r7, #16]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3718      	adds	r7, #24
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800893c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800893e:	bf00      	nop
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008956:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895c:	2b82      	cmp	r3, #130	; 0x82
 800895e:	d111      	bne.n	8008984 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4618      	mov	r0, r3
 8008966:	f001 ff51 	bl	800a80c <SDMMC_CmdStopTransfer>
 800896a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d008      	beq.n	8008984 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	431a      	orrs	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f7ff fd30 	bl	80083e4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f022 0208 	bic.w	r2, r2, #8
 8008992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f240 523a 	movw	r2, #1338	; 0x53a
 800899c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f7f8 fe97 	bl	80016e0 <HAL_SD_RxCpltCallback>
#endif
}
 80089b2:	bf00      	nop
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
	...

080089bc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b086      	sub	sp, #24
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7fe f940 	bl	8006c50 <HAL_DMA_GetError>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d03e      	beq.n	8008a54 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089dc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d002      	beq.n	80089f2 <SD_DMAError+0x36>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d12d      	bne.n	8008a4e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a19      	ldr	r2, [pc, #100]	; (8008a5c <SD_DMAError+0xa0>)
 80089f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008a08:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008a16:	6978      	ldr	r0, [r7, #20]
 8008a18:	f7ff ff62 	bl	80088e0 <HAL_SD_GetCardState>
 8008a1c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	2b06      	cmp	r3, #6
 8008a22:	d002      	beq.n	8008a2a <SD_DMAError+0x6e>
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	d10a      	bne.n	8008a40 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f001 feec 	bl	800a80c <SDMMC_CmdStopTransfer>
 8008a34:	4602      	mov	r2, r0
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3a:	431a      	orrs	r2, r3
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008a4e:	6978      	ldr	r0, [r7, #20]
 8008a50:	f7ff fcc8 	bl	80083e4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008a54:	bf00      	nop
 8008a56:	3718      	adds	r7, #24
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	004005ff 	.word	0x004005ff

08008a60 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a76:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f7ff ff31 	bl	80088e0 <HAL_SD_GetCardState>
 8008a7e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2b06      	cmp	r3, #6
 8008a92:	d002      	beq.n	8008a9a <SD_DMATxAbort+0x3a>
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b05      	cmp	r3, #5
 8008a98:	d10a      	bne.n	8008ab0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f001 feb4 	bl	800a80c <SDMMC_CmdStopTransfer>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d103      	bne.n	8008ac0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f7ff fc9d 	bl	80083f8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008abe:	e002      	b.n	8008ac6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f7ff fc8f 	bl	80083e4 <HAL_SD_ErrorCallback>
}
 8008ac6:	bf00      	nop
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ada:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ae4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f7ff fefa 	bl	80088e0 <HAL_SD_GetCardState>
 8008aec:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2b06      	cmp	r3, #6
 8008b00:	d002      	beq.n	8008b08 <SD_DMARxAbort+0x3a>
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2b05      	cmp	r3, #5
 8008b06:	d10a      	bne.n	8008b1e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f001 fe7d 	bl	800a80c <SDMMC_CmdStopTransfer>
 8008b12:	4602      	mov	r2, r0
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d103      	bne.n	8008b2e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f7ff fc66 	bl	80083f8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008b2c:	e002      	b.n	8008b34 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f7ff fc58 	bl	80083e4 <HAL_SD_ErrorCallback>
}
 8008b34:	bf00      	nop
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008b3c:	b5b0      	push	{r4, r5, r7, lr}
 8008b3e:	b094      	sub	sp, #80	; 0x50
 8008b40:	af04      	add	r7, sp, #16
 8008b42:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008b44:	2301      	movs	r3, #1
 8008b46:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f001 fd2f 	bl	800a5b0 <SDIO_GetPowerState>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d102      	bne.n	8008b5e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008b5c:	e0b6      	b.n	8008ccc <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d02f      	beq.n	8008bc6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f001 ff58 	bl	800aa20 <SDMMC_CmdSendCID>
 8008b70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <SD_InitCard+0x40>
    {
      return errorstate;
 8008b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7a:	e0a7      	b.n	8008ccc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2100      	movs	r1, #0
 8008b82:	4618      	mov	r0, r3
 8008b84:	f001 fd59 	bl	800a63a <SDIO_GetResponse>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2104      	movs	r1, #4
 8008b94:	4618      	mov	r0, r3
 8008b96:	f001 fd50 	bl	800a63a <SDIO_GetResponse>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2108      	movs	r1, #8
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f001 fd47 	bl	800a63a <SDIO_GetResponse>
 8008bac:	4602      	mov	r2, r0
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	210c      	movs	r1, #12
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f001 fd3e 	bl	800a63a <SDIO_GetResponse>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d00d      	beq.n	8008bea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f107 020e 	add.w	r2, r7, #14
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f001 ff5e 	bl	800aa9a <SDMMC_CmdSetRelAdd>
 8008bde:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <SD_InitCard+0xae>
    {
      return errorstate;
 8008be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be8:	e070      	b.n	8008ccc <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d036      	beq.n	8008c60 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008bf2:	89fb      	ldrh	r3, [r7, #14]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c02:	041b      	lsls	r3, r3, #16
 8008c04:	4619      	mov	r1, r3
 8008c06:	4610      	mov	r0, r2
 8008c08:	f001 ff28 	bl	800aa5c <SDMMC_CmdSendCSD>
 8008c0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c16:	e059      	b.n	8008ccc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f001 fd0b 	bl	800a63a <SDIO_GetResponse>
 8008c24:	4602      	mov	r2, r0
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2104      	movs	r1, #4
 8008c30:	4618      	mov	r0, r3
 8008c32:	f001 fd02 	bl	800a63a <SDIO_GetResponse>
 8008c36:	4602      	mov	r2, r0
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2108      	movs	r1, #8
 8008c42:	4618      	mov	r0, r3
 8008c44:	f001 fcf9 	bl	800a63a <SDIO_GetResponse>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	210c      	movs	r1, #12
 8008c54:	4618      	mov	r0, r3
 8008c56:	f001 fcf0 	bl	800a63a <SDIO_GetResponse>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2104      	movs	r1, #4
 8008c66:	4618      	mov	r0, r3
 8008c68:	f001 fce7 	bl	800a63a <SDIO_GetResponse>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	0d1a      	lsrs	r2, r3, #20
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008c74:	f107 0310 	add.w	r3, r7, #16
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7ff fbc6 	bl	800840c <HAL_SD_GetCardCSD>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d002      	beq.n	8008c8c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c8a:	e01f      	b.n	8008ccc <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6819      	ldr	r1, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c94:	041b      	lsls	r3, r3, #16
 8008c96:	461a      	mov	r2, r3
 8008c98:	f04f 0300 	mov.w	r3, #0
 8008c9c:	4608      	mov	r0, r1
 8008c9e:	f001 fdd7 	bl	800a850 <SDMMC_CmdSelDesel>
 8008ca2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <SD_InitCard+0x172>
  {
    return errorstate;
 8008caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cac:	e00e      	b.n	8008ccc <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681d      	ldr	r5, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	466c      	mov	r4, sp
 8008cb6:	f103 0210 	add.w	r2, r3, #16
 8008cba:	ca07      	ldmia	r2, {r0, r1, r2}
 8008cbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	f001 fc1b 	bl	800a500 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3740      	adds	r7, #64	; 0x40
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bdb0      	pop	{r4, r5, r7, pc}

08008cd4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	617b      	str	r3, [r7, #20]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f001 fdd2 	bl	800a896 <SDMMC_CmdGoIdleState>
 8008cf2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <SD_PowerON+0x2a>
  {
    return errorstate;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	e072      	b.n	8008de4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f001 fde5 	bl	800a8d2 <SDMMC_CmdOperCond>
 8008d08:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00d      	beq.n	8008d2c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f001 fdbb 	bl	800a896 <SDMMC_CmdGoIdleState>
 8008d20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d004      	beq.n	8008d32 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	e05b      	b.n	8008de4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d137      	bne.n	8008daa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2100      	movs	r1, #0
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 fde5 	bl	800a910 <SDMMC_CmdAppCommand>
 8008d46:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d02d      	beq.n	8008daa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d52:	e047      	b.n	8008de4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2100      	movs	r1, #0
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f001 fdd8 	bl	800a910 <SDMMC_CmdAppCommand>
 8008d60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <SD_PowerON+0x98>
    {
      return errorstate;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	e03b      	b.n	8008de4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	491e      	ldr	r1, [pc, #120]	; (8008dec <SD_PowerON+0x118>)
 8008d72:	4618      	mov	r0, r3
 8008d74:	f001 fdee 	bl	800a954 <SDMMC_CmdAppOperCommand>
 8008d78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d84:	e02e      	b.n	8008de4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f001 fc54 	bl	800a63a <SDIO_GetResponse>
 8008d92:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	0fdb      	lsrs	r3, r3, #31
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d101      	bne.n	8008da0 <SD_PowerON+0xcc>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e000      	b.n	8008da2 <SD_PowerON+0xce>
 8008da0:	2300      	movs	r3, #0
 8008da2:	613b      	str	r3, [r7, #16]

    count++;
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	3301      	adds	r3, #1
 8008da8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d802      	bhi.n	8008dba <SD_PowerON+0xe6>
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d0cc      	beq.n	8008d54 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d902      	bls.n	8008dca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008dc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008dc8:	e00c      	b.n	8008de4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	645a      	str	r2, [r3, #68]	; 0x44
 8008dda:	e002      	b.n	8008de2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3718      	adds	r7, #24
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	c1100000 	.word	0xc1100000

08008df0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d102      	bne.n	8008e06 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008e00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e04:	e018      	b.n	8008e38 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e0e:	041b      	lsls	r3, r3, #16
 8008e10:	4619      	mov	r1, r3
 8008e12:	4610      	mov	r0, r2
 8008e14:	f001 fe62 	bl	800aadc <SDMMC_CmdSendStatus>
 8008e18:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	e009      	b.n	8008e38 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2100      	movs	r1, #0
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f001 fc05 	bl	800a63a <SDIO_GetResponse>
 8008e30:	4602      	mov	r2, r0
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008e48:	2300      	movs	r3, #0
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2100      	movs	r1, #0
 8008e56:	4618      	mov	r0, r3
 8008e58:	f001 fbef 	bl	800a63a <SDIO_GetResponse>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e66:	d102      	bne.n	8008e6e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e6c:	e02f      	b.n	8008ece <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008e6e:	f107 030c 	add.w	r3, r7, #12
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f879 	bl	8008f6c <SD_FindSCR>
 8008e7a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	e023      	b.n	8008ece <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d01c      	beq.n	8008eca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e98:	041b      	lsls	r3, r3, #16
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	f001 fd37 	bl	800a910 <SDMMC_CmdAppCommand>
 8008ea2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	e00f      	b.n	8008ece <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2102      	movs	r1, #2
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f001 fd70 	bl	800a99a <SDMMC_CmdBusWidth>
 8008eba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	e003      	b.n	8008ece <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	e001      	b.n	8008ece <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008eca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3718      	adds	r7, #24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b086      	sub	sp, #24
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60fb      	str	r3, [r7, #12]
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2100      	movs	r1, #0
 8008eec:	4618      	mov	r0, r3
 8008eee:	f001 fba4 	bl	800a63a <SDIO_GetResponse>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008efc:	d102      	bne.n	8008f04 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008efe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f02:	e02f      	b.n	8008f64 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008f04:	f107 030c 	add.w	r3, r7, #12
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f82e 	bl	8008f6c <SD_FindSCR>
 8008f10:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	e023      	b.n	8008f64 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d01c      	beq.n	8008f60 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f2e:	041b      	lsls	r3, r3, #16
 8008f30:	4619      	mov	r1, r3
 8008f32:	4610      	mov	r0, r2
 8008f34:	f001 fcec 	bl	800a910 <SDMMC_CmdAppCommand>
 8008f38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	e00f      	b.n	8008f64 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2100      	movs	r1, #0
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f001 fd25 	bl	800a99a <SDMMC_CmdBusWidth>
 8008f50:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	e003      	b.n	8008f64 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	e001      	b.n	8008f64 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3718      	adds	r7, #24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008f6c:	b590      	push	{r4, r7, lr}
 8008f6e:	b08f      	sub	sp, #60	; 0x3c
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008f76:	f7fd f977 	bl	8006268 <HAL_GetTick>
 8008f7a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008f80:	2300      	movs	r3, #0
 8008f82:	60bb      	str	r3, [r7, #8]
 8008f84:	2300      	movs	r3, #0
 8008f86:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2108      	movs	r1, #8
 8008f92:	4618      	mov	r0, r3
 8008f94:	f001 fb90 	bl	800a6b8 <SDMMC_CmdBlockLength>
 8008f98:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d001      	beq.n	8008fa4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa2:	e0b2      	b.n	800910a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fac:	041b      	lsls	r3, r3, #16
 8008fae:	4619      	mov	r1, r3
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	f001 fcad 	bl	800a910 <SDMMC_CmdAppCommand>
 8008fb6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc0:	e0a3      	b.n	800910a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008fc8:	2308      	movs	r3, #8
 8008fca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008fcc:	2330      	movs	r3, #48	; 0x30
 8008fce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f107 0210 	add.w	r2, r7, #16
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f001 fb3a 	bl	800a660 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f001 fcf4 	bl	800a9de <SDMMC_CmdSendSCR>
 8008ff6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d02a      	beq.n	8009054 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009000:	e083      	b.n	800910a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00f      	beq.n	8009030 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6819      	ldr	r1, [r3, #0]
 8009014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	f107 0208 	add.w	r2, r7, #8
 800901c:	18d4      	adds	r4, r2, r3
 800901e:	4608      	mov	r0, r1
 8009020:	f001 fa99 	bl	800a556 <SDIO_ReadFIFO>
 8009024:	4603      	mov	r3, r0
 8009026:	6023      	str	r3, [r4, #0]
      index++;
 8009028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902a:	3301      	adds	r3, #1
 800902c:	637b      	str	r3, [r7, #52]	; 0x34
 800902e:	e006      	b.n	800903e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d012      	beq.n	8009064 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800903e:	f7fd f913 	bl	8006268 <HAL_GetTick>
 8009042:	4602      	mov	r2, r0
 8009044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904c:	d102      	bne.n	8009054 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800904e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009052:	e05a      	b.n	800910a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800905a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800905e:	2b00      	cmp	r3, #0
 8009060:	d0cf      	beq.n	8009002 <SD_FindSCR+0x96>
 8009062:	e000      	b.n	8009066 <SD_FindSCR+0xfa>
      break;
 8009064:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800906c:	f003 0308 	and.w	r3, r3, #8
 8009070:	2b00      	cmp	r3, #0
 8009072:	d005      	beq.n	8009080 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2208      	movs	r2, #8
 800907a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800907c:	2308      	movs	r3, #8
 800907e:	e044      	b.n	800910a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009086:	f003 0302 	and.w	r3, r3, #2
 800908a:	2b00      	cmp	r3, #0
 800908c:	d005      	beq.n	800909a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2202      	movs	r2, #2
 8009094:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009096:	2302      	movs	r3, #2
 8009098:	e037      	b.n	800910a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a0:	f003 0320 	and.w	r3, r3, #32
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d005      	beq.n	80090b4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2220      	movs	r2, #32
 80090ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80090b0:	2320      	movs	r3, #32
 80090b2:	e02a      	b.n	800910a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f240 523a 	movw	r2, #1338	; 0x53a
 80090bc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	061a      	lsls	r2, r3, #24
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	021b      	lsls	r3, r3, #8
 80090c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80090ca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	0a1b      	lsrs	r3, r3, #8
 80090d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80090d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	0e1b      	lsrs	r3, r3, #24
 80090da:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80090dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090de:	601a      	str	r2, [r3, #0]
    scr++;
 80090e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e2:	3304      	adds	r3, #4
 80090e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	061a      	lsls	r2, r3, #24
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	021b      	lsls	r3, r3, #8
 80090ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80090f2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	0a1b      	lsrs	r3, r3, #8
 80090f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80090fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	0e1b      	lsrs	r3, r3, #24
 8009102:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009106:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	373c      	adds	r7, #60	; 0x3c
 800910e:	46bd      	mov	sp, r7
 8009110:	bd90      	pop	{r4, r7, pc}

08009112 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b086      	sub	sp, #24
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009124:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d03f      	beq.n	80091ac <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800912c:	2300      	movs	r3, #0
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	e033      	b.n	800919a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4618      	mov	r0, r3
 8009138:	f001 fa0d 	bl	800a556 <SDIO_ReadFIFO>
 800913c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	b2da      	uxtb	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	3301      	adds	r3, #1
 800914a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	3b01      	subs	r3, #1
 8009150:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	0a1b      	lsrs	r3, r3, #8
 8009156:	b2da      	uxtb	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3301      	adds	r3, #1
 8009160:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	3b01      	subs	r3, #1
 8009166:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	0c1b      	lsrs	r3, r3, #16
 800916c:	b2da      	uxtb	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	3301      	adds	r3, #1
 8009176:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	3b01      	subs	r3, #1
 800917c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	0e1b      	lsrs	r3, r3, #24
 8009182:	b2da      	uxtb	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	3301      	adds	r3, #1
 800918c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	3b01      	subs	r3, #1
 8009192:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	3301      	adds	r3, #1
 8009198:	617b      	str	r3, [r7, #20]
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	2b07      	cmp	r3, #7
 800919e:	d9c8      	bls.n	8009132 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80091ac:	bf00      	nop
 80091ae:	3718      	adds	r7, #24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a1b      	ldr	r3, [r3, #32]
 80091c0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d043      	beq.n	8009256 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80091ce:	2300      	movs	r3, #0
 80091d0:	617b      	str	r3, [r7, #20]
 80091d2:	e037      	b.n	8009244 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3301      	adds	r3, #1
 80091de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	3b01      	subs	r3, #1
 80091e4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	021a      	lsls	r2, r3, #8
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	3301      	adds	r3, #1
 80091f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	3b01      	subs	r3, #1
 80091fc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	041a      	lsls	r2, r3, #16
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	4313      	orrs	r3, r2
 8009208:	60bb      	str	r3, [r7, #8]
      tmp++;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3301      	adds	r3, #1
 800920e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	3b01      	subs	r3, #1
 8009214:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	061a      	lsls	r2, r3, #24
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	4313      	orrs	r3, r2
 8009220:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3301      	adds	r3, #1
 8009226:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	3b01      	subs	r3, #1
 800922c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f107 0208 	add.w	r2, r7, #8
 8009236:	4611      	mov	r1, r2
 8009238:	4618      	mov	r0, r3
 800923a:	f001 f999 	bl	800a570 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	3301      	adds	r3, #1
 8009242:	617b      	str	r3, [r7, #20]
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	2b07      	cmp	r3, #7
 8009248:	d9c4      	bls.n	80091d4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009256:	bf00      	nop
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e03f      	b.n	80092f0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b00      	cmp	r3, #0
 800927a:	d106      	bne.n	800928a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7f8 fe0f 	bl	8001ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2224      	movs	r2, #36	; 0x24
 800928e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68da      	ldr	r2, [r3, #12]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092a0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 ff64 	bl	800a170 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	691a      	ldr	r2, [r3, #16]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	695a      	ldr	r2, [r3, #20]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092c6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68da      	ldr	r2, [r3, #12]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092d6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2220      	movs	r2, #32
 80092e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2220      	movs	r2, #32
 80092ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d101      	bne.n	800930a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e021      	b.n	800934e <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2224      	movs	r2, #36	; 0x24
 800930e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68da      	ldr	r2, [r3, #12]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009320:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7f8 fe76 	bl	8002014 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
	...

08009358 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08c      	sub	sp, #48	; 0x30
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	4613      	mov	r3, r2
 8009364:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b20      	cmp	r3, #32
 8009370:	d165      	bne.n	800943e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <HAL_UART_Transmit_DMA+0x26>
 8009378:	88fb      	ldrh	r3, [r7, #6]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e05e      	b.n	8009440 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009388:	2b01      	cmp	r3, #1
 800938a:	d101      	bne.n	8009390 <HAL_UART_Transmit_DMA+0x38>
 800938c:	2302      	movs	r3, #2
 800938e:	e057      	b.n	8009440 <HAL_UART_Transmit_DMA+0xe8>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	88fa      	ldrh	r2, [r7, #6]
 80093a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	88fa      	ldrh	r2, [r7, #6]
 80093a8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2221      	movs	r2, #33	; 0x21
 80093b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093bc:	4a22      	ldr	r2, [pc, #136]	; (8009448 <HAL_UART_Transmit_DMA+0xf0>)
 80093be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c4:	4a21      	ldr	r2, [pc, #132]	; (800944c <HAL_UART_Transmit_DMA+0xf4>)
 80093c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093cc:	4a20      	ldr	r2, [pc, #128]	; (8009450 <HAL_UART_Transmit_DMA+0xf8>)
 80093ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d4:	2200      	movs	r2, #0
 80093d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80093d8:	f107 0308 	add.w	r3, r7, #8
 80093dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80093e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e4:	6819      	ldr	r1, [r3, #0]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3304      	adds	r3, #4
 80093ec:	461a      	mov	r2, r3
 80093ee:	88fb      	ldrh	r3, [r7, #6]
 80093f0:	f7fd f9ba 	bl	8006768 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093fc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3314      	adds	r3, #20
 800940c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	617b      	str	r3, [r7, #20]
   return(result);
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800941c:	62bb      	str	r3, [r7, #40]	; 0x28
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3314      	adds	r3, #20
 8009424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009426:	627a      	str	r2, [r7, #36]	; 0x24
 8009428:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	6a39      	ldr	r1, [r7, #32]
 800942c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	61fb      	str	r3, [r7, #28]
   return(result);
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e5      	bne.n	8009406 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800943a:	2300      	movs	r3, #0
 800943c:	e000      	b.n	8009440 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800943e:	2302      	movs	r3, #2
  }
}
 8009440:	4618      	mov	r0, r3
 8009442:	3730      	adds	r7, #48	; 0x30
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	08009a11 	.word	0x08009a11
 800944c:	08009aab 	.word	0x08009aab
 8009450:	08009c23 	.word	0x08009c23

08009454 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	4613      	mov	r3, r2
 8009460:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b20      	cmp	r3, #32
 800946c:	d11d      	bne.n	80094aa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <HAL_UART_Receive_DMA+0x26>
 8009474:	88fb      	ldrh	r3, [r7, #6]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e016      	b.n	80094ac <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009484:	2b01      	cmp	r3, #1
 8009486:	d101      	bne.n	800948c <HAL_UART_Receive_DMA+0x38>
 8009488:	2302      	movs	r3, #2
 800948a:	e00f      	b.n	80094ac <HAL_UART_Receive_DMA+0x58>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800949a:	88fb      	ldrh	r3, [r7, #6]
 800949c:	461a      	mov	r2, r3
 800949e:	68b9      	ldr	r1, [r7, #8]
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 fc09 	bl	8009cb8 <UART_Start_Receive_DMA>
 80094a6:	4603      	mov	r3, r0
 80094a8:	e000      	b.n	80094ac <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80094aa:	2302      	movs	r3, #2
  }
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b0ba      	sub	sp, #232	; 0xe8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	695b      	ldr	r3, [r3, #20]
 80094d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80094da:	2300      	movs	r3, #0
 80094dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80094e0:	2300      	movs	r3, #0
 80094e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80094e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ea:	f003 030f 	and.w	r3, r3, #15
 80094ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80094f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10f      	bne.n	800951a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80094fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094fe:	f003 0320 	and.w	r3, r3, #32
 8009502:	2b00      	cmp	r3, #0
 8009504:	d009      	beq.n	800951a <HAL_UART_IRQHandler+0x66>
 8009506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800950a:	f003 0320 	and.w	r3, r3, #32
 800950e:	2b00      	cmp	r3, #0
 8009510:	d003      	beq.n	800951a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fd71 	bl	8009ffa <UART_Receive_IT>
      return;
 8009518:	e256      	b.n	80099c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800951a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800951e:	2b00      	cmp	r3, #0
 8009520:	f000 80de 	beq.w	80096e0 <HAL_UART_IRQHandler+0x22c>
 8009524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009528:	f003 0301 	and.w	r3, r3, #1
 800952c:	2b00      	cmp	r3, #0
 800952e:	d106      	bne.n	800953e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009534:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 80d1 	beq.w	80096e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800953e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00b      	beq.n	8009562 <HAL_UART_IRQHandler+0xae>
 800954a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800954e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009552:	2b00      	cmp	r3, #0
 8009554:	d005      	beq.n	8009562 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955a:	f043 0201 	orr.w	r2, r3, #1
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009566:	f003 0304 	and.w	r3, r3, #4
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00b      	beq.n	8009586 <HAL_UART_IRQHandler+0xd2>
 800956e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	d005      	beq.n	8009586 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957e:	f043 0202 	orr.w	r2, r3, #2
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00b      	beq.n	80095aa <HAL_UART_IRQHandler+0xf6>
 8009592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d005      	beq.n	80095aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a2:	f043 0204 	orr.w	r2, r3, #4
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80095aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ae:	f003 0308 	and.w	r3, r3, #8
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d011      	beq.n	80095da <HAL_UART_IRQHandler+0x126>
 80095b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095ba:	f003 0320 	and.w	r3, r3, #32
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d105      	bne.n	80095ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80095c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d005      	beq.n	80095da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d2:	f043 0208 	orr.w	r2, r3, #8
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f000 81ed 	beq.w	80099be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095e8:	f003 0320 	and.w	r3, r3, #32
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d008      	beq.n	8009602 <HAL_UART_IRQHandler+0x14e>
 80095f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095f4:	f003 0320 	and.w	r3, r3, #32
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 fcfc 	bl	8009ffa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	695b      	ldr	r3, [r3, #20]
 8009608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960c:	2b40      	cmp	r3, #64	; 0x40
 800960e:	bf0c      	ite	eq
 8009610:	2301      	moveq	r3, #1
 8009612:	2300      	movne	r3, #0
 8009614:	b2db      	uxtb	r3, r3
 8009616:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961e:	f003 0308 	and.w	r3, r3, #8
 8009622:	2b00      	cmp	r3, #0
 8009624:	d103      	bne.n	800962e <HAL_UART_IRQHandler+0x17a>
 8009626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800962a:	2b00      	cmp	r3, #0
 800962c:	d04f      	beq.n	80096ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fc04 	bl	8009e3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800963e:	2b40      	cmp	r3, #64	; 0x40
 8009640:	d141      	bne.n	80096c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	3314      	adds	r3, #20
 8009648:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009650:	e853 3f00 	ldrex	r3, [r3]
 8009654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009658:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800965c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009660:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3314      	adds	r3, #20
 800966a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800966e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009676:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800967a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800967e:	e841 2300 	strex	r3, r2, [r1]
 8009682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1d9      	bne.n	8009642 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009692:	2b00      	cmp	r3, #0
 8009694:	d013      	beq.n	80096be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969a:	4a7d      	ldr	r2, [pc, #500]	; (8009890 <HAL_UART_IRQHandler+0x3dc>)
 800969c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fd f928 	bl	80068f8 <HAL_DMA_Abort_IT>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d016      	beq.n	80096dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80096b8:	4610      	mov	r0, r2
 80096ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096bc:	e00e      	b.n	80096dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7f8 fbd4 	bl	8001e6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c4:	e00a      	b.n	80096dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7f8 fbd0 	bl	8001e6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096cc:	e006      	b.n	80096dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7f8 fbcc 	bl	8001e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80096da:	e170      	b.n	80099be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096dc:	bf00      	nop
    return;
 80096de:	e16e      	b.n	80099be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	f040 814a 	bne.w	800997e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80096ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ee:	f003 0310 	and.w	r3, r3, #16
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 8143 	beq.w	800997e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80096f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096fc:	f003 0310 	and.w	r3, r3, #16
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 813c 	beq.w	800997e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009706:	2300      	movs	r3, #0
 8009708:	60bb      	str	r3, [r7, #8]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	60bb      	str	r3, [r7, #8]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	60bb      	str	r3, [r7, #8]
 800971a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009726:	2b40      	cmp	r3, #64	; 0x40
 8009728:	f040 80b4 	bne.w	8009894 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009738:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 8140 	beq.w	80099c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800974a:	429a      	cmp	r2, r3
 800974c:	f080 8139 	bcs.w	80099c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009756:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975c:	69db      	ldr	r3, [r3, #28]
 800975e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009762:	f000 8088 	beq.w	8009876 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	330c      	adds	r3, #12
 800976c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009770:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009774:	e853 3f00 	ldrex	r3, [r3]
 8009778:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800977c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	330c      	adds	r3, #12
 800978e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009792:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009796:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800979e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097a2:	e841 2300 	strex	r3, r2, [r1]
 80097a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80097aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1d9      	bne.n	8009766 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	3314      	adds	r3, #20
 80097b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097bc:	e853 3f00 	ldrex	r3, [r3]
 80097c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80097c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097c4:	f023 0301 	bic.w	r3, r3, #1
 80097c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	3314      	adds	r3, #20
 80097d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80097d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80097da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80097de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80097e2:	e841 2300 	strex	r3, r2, [r1]
 80097e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80097e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1e1      	bne.n	80097b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3314      	adds	r3, #20
 80097f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80097fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	3314      	adds	r3, #20
 800980e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009812:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009814:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009816:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009818:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800981a:	e841 2300 	strex	r3, r2, [r1]
 800981e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1e3      	bne.n	80097ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2220      	movs	r2, #32
 800982a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	330c      	adds	r3, #12
 800983a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800983e:	e853 3f00 	ldrex	r3, [r3]
 8009842:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009846:	f023 0310 	bic.w	r3, r3, #16
 800984a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	330c      	adds	r3, #12
 8009854:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009858:	65ba      	str	r2, [r7, #88]	; 0x58
 800985a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800985e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009860:	e841 2300 	strex	r3, r2, [r1]
 8009864:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1e3      	bne.n	8009834 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009870:	4618      	mov	r0, r3
 8009872:	f7fc ffd1 	bl	8006818 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800987e:	b29b      	uxth	r3, r3
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	b29b      	uxth	r3, r3
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f8b6 	bl	80099f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800988c:	e099      	b.n	80099c2 <HAL_UART_IRQHandler+0x50e>
 800988e:	bf00      	nop
 8009890:	08009f03 	.word	0x08009f03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800989c:	b29b      	uxth	r3, r3
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 808b 	beq.w	80099c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80098b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 8086 	beq.w	80099c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	330c      	adds	r3, #12
 80098c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c4:	e853 3f00 	ldrex	r3, [r3]
 80098c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	330c      	adds	r3, #12
 80098da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80098de:	647a      	str	r2, [r7, #68]	; 0x44
 80098e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098e6:	e841 2300 	strex	r3, r2, [r1]
 80098ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e3      	bne.n	80098ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3314      	adds	r3, #20
 80098f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	e853 3f00 	ldrex	r3, [r3]
 8009900:	623b      	str	r3, [r7, #32]
   return(result);
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	f023 0301 	bic.w	r3, r3, #1
 8009908:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	3314      	adds	r3, #20
 8009912:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009916:	633a      	str	r2, [r7, #48]	; 0x30
 8009918:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800991c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800991e:	e841 2300 	strex	r3, r2, [r1]
 8009922:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e3      	bne.n	80098f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2220      	movs	r2, #32
 800992e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	330c      	adds	r3, #12
 800993e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	e853 3f00 	ldrex	r3, [r3]
 8009946:	60fb      	str	r3, [r7, #12]
   return(result);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f023 0310 	bic.w	r3, r3, #16
 800994e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	330c      	adds	r3, #12
 8009958:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800995c:	61fa      	str	r2, [r7, #28]
 800995e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009960:	69b9      	ldr	r1, [r7, #24]
 8009962:	69fa      	ldr	r2, [r7, #28]
 8009964:	e841 2300 	strex	r3, r2, [r1]
 8009968:	617b      	str	r3, [r7, #20]
   return(result);
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1e3      	bne.n	8009938 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009970:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f83e 	bl	80099f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800997c:	e023      	b.n	80099c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800997e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009986:	2b00      	cmp	r3, #0
 8009988:	d009      	beq.n	800999e <HAL_UART_IRQHandler+0x4ea>
 800998a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800998e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fac7 	bl	8009f2a <UART_Transmit_IT>
    return;
 800999c:	e014      	b.n	80099c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800999e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00e      	beq.n	80099c8 <HAL_UART_IRQHandler+0x514>
 80099aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d008      	beq.n	80099c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fb07 	bl	8009fca <UART_EndTransmit_IT>
    return;
 80099bc:	e004      	b.n	80099c8 <HAL_UART_IRQHandler+0x514>
    return;
 80099be:	bf00      	nop
 80099c0:	e002      	b.n	80099c8 <HAL_UART_IRQHandler+0x514>
      return;
 80099c2:	bf00      	nop
 80099c4:	e000      	b.n	80099c8 <HAL_UART_IRQHandler+0x514>
      return;
 80099c6:	bf00      	nop
  }
}
 80099c8:	37e8      	adds	r7, #232	; 0xe8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop

080099d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80099ec:	bf00      	nop
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b090      	sub	sp, #64	; 0x40
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d137      	bne.n	8009a9c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a2e:	2200      	movs	r2, #0
 8009a30:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	3314      	adds	r3, #20
 8009a38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	e853 3f00 	ldrex	r3, [r3]
 8009a40:	623b      	str	r3, [r7, #32]
   return(result);
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a48:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	3314      	adds	r3, #20
 8009a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a52:	633a      	str	r2, [r7, #48]	; 0x30
 8009a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a5a:	e841 2300 	strex	r3, r2, [r1]
 8009a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1e5      	bne.n	8009a32 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	330c      	adds	r3, #12
 8009a6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	e853 3f00 	ldrex	r3, [r3]
 8009a74:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	330c      	adds	r3, #12
 8009a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a86:	61fa      	str	r2, [r7, #28]
 8009a88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8a:	69b9      	ldr	r1, [r7, #24]
 8009a8c:	69fa      	ldr	r2, [r7, #28]
 8009a8e:	e841 2300 	strex	r3, r2, [r1]
 8009a92:	617b      	str	r3, [r7, #20]
   return(result);
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1e5      	bne.n	8009a66 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a9a:	e002      	b.n	8009aa2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009a9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009a9e:	f7f8 f9f9 	bl	8001e94 <HAL_UART_TxCpltCallback>
}
 8009aa2:	bf00      	nop
 8009aa4:	3740      	adds	r7, #64	; 0x40
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f7ff ff89 	bl	80099d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009abe:	bf00      	nop
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b09c      	sub	sp, #112	; 0x70
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d172      	bne.n	8009bc8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	330c      	adds	r3, #12
 8009aee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009af2:	e853 3f00 	ldrex	r3, [r3]
 8009af6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009afe:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	330c      	adds	r3, #12
 8009b06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b08:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e5      	bne.n	8009ae8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3314      	adds	r3, #20
 8009b22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b26:	e853 3f00 	ldrex	r3, [r3]
 8009b2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b2e:	f023 0301 	bic.w	r3, r3, #1
 8009b32:	667b      	str	r3, [r7, #100]	; 0x64
 8009b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	3314      	adds	r3, #20
 8009b3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b3c:	647a      	str	r2, [r7, #68]	; 0x44
 8009b3e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b44:	e841 2300 	strex	r3, r2, [r1]
 8009b48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1e5      	bne.n	8009b1c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3314      	adds	r3, #20
 8009b56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	e853 3f00 	ldrex	r3, [r3]
 8009b5e:	623b      	str	r3, [r7, #32]
   return(result);
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b66:	663b      	str	r3, [r7, #96]	; 0x60
 8009b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	3314      	adds	r3, #20
 8009b6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b70:	633a      	str	r2, [r7, #48]	; 0x30
 8009b72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b78:	e841 2300 	strex	r3, r2, [r1]
 8009b7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1e5      	bne.n	8009b50 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b86:	2220      	movs	r2, #32
 8009b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d119      	bne.n	8009bc8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	330c      	adds	r3, #12
 8009b9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	e853 3f00 	ldrex	r3, [r3]
 8009ba2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f023 0310 	bic.w	r3, r3, #16
 8009baa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	330c      	adds	r3, #12
 8009bb2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009bb4:	61fa      	str	r2, [r7, #28]
 8009bb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb8:	69b9      	ldr	r1, [r7, #24]
 8009bba:	69fa      	ldr	r2, [r7, #28]
 8009bbc:	e841 2300 	strex	r3, r2, [r1]
 8009bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1e5      	bne.n	8009b94 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d106      	bne.n	8009bde <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bd2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009bd8:	f7ff ff0e 	bl	80099f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009bdc:	e002      	b.n	8009be4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009bde:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009be0:	f7f8 f94e 	bl	8001e80 <HAL_UART_RxCpltCallback>
}
 8009be4:	bf00      	nop
 8009be6:	3770      	adds	r7, #112	; 0x70
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d108      	bne.n	8009c14 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c06:	085b      	lsrs	r3, r3, #1
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f7ff fef3 	bl	80099f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c12:	e002      	b.n	8009c1a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f7ff fee5 	bl	80099e4 <HAL_UART_RxHalfCpltCallback>
}
 8009c1a:	bf00      	nop
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b084      	sub	sp, #16
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c32:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c3e:	2b80      	cmp	r3, #128	; 0x80
 8009c40:	bf0c      	ite	eq
 8009c42:	2301      	moveq	r3, #1
 8009c44:	2300      	movne	r3, #0
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b21      	cmp	r3, #33	; 0x21
 8009c54:	d108      	bne.n	8009c68 <UART_DMAError+0x46>
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d005      	beq.n	8009c68 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009c62:	68b8      	ldr	r0, [r7, #8]
 8009c64:	f000 f8c2 	bl	8009dec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	695b      	ldr	r3, [r3, #20]
 8009c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c72:	2b40      	cmp	r3, #64	; 0x40
 8009c74:	bf0c      	ite	eq
 8009c76:	2301      	moveq	r3, #1
 8009c78:	2300      	movne	r3, #0
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b22      	cmp	r3, #34	; 0x22
 8009c88:	d108      	bne.n	8009c9c <UART_DMAError+0x7a>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d005      	beq.n	8009c9c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	2200      	movs	r2, #0
 8009c94:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009c96:	68b8      	ldr	r0, [r7, #8]
 8009c98:	f000 f8d0 	bl	8009e3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca0:	f043 0210 	orr.w	r2, r3, #16
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ca8:	68b8      	ldr	r0, [r7, #8]
 8009caa:	f7f8 f8df 	bl	8001e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cae:	bf00      	nop
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
	...

08009cb8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b098      	sub	sp, #96	; 0x60
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	88fa      	ldrh	r2, [r7, #6]
 8009cd0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2222      	movs	r2, #34	; 0x22
 8009cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce4:	4a3e      	ldr	r2, [pc, #248]	; (8009de0 <UART_Start_Receive_DMA+0x128>)
 8009ce6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cec:	4a3d      	ldr	r2, [pc, #244]	; (8009de4 <UART_Start_Receive_DMA+0x12c>)
 8009cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf4:	4a3c      	ldr	r2, [pc, #240]	; (8009de8 <UART_Start_Receive_DMA+0x130>)
 8009cf6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009d00:	f107 0308 	add.w	r3, r7, #8
 8009d04:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3304      	adds	r3, #4
 8009d10:	4619      	mov	r1, r3
 8009d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	88fb      	ldrh	r3, [r7, #6]
 8009d18:	f7fc fd26 	bl	8006768 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	613b      	str	r3, [r7, #16]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	613b      	str	r3, [r7, #16]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	613b      	str	r3, [r7, #16]
 8009d30:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	330c      	adds	r3, #12
 8009d40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d44:	e853 3f00 	ldrex	r3, [r3]
 8009d48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d50:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	330c      	adds	r3, #12
 8009d58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d5a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009d5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009d60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d62:	e841 2300 	strex	r3, r2, [r1]
 8009d66:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1e5      	bne.n	8009d3a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3314      	adds	r3, #20
 8009d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d78:	e853 3f00 	ldrex	r3, [r3]
 8009d7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d80:	f043 0301 	orr.w	r3, r3, #1
 8009d84:	657b      	str	r3, [r7, #84]	; 0x54
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3314      	adds	r3, #20
 8009d8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d8e:	63ba      	str	r2, [r7, #56]	; 0x38
 8009d90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d96:	e841 2300 	strex	r3, r2, [r1]
 8009d9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1e5      	bne.n	8009d6e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	3314      	adds	r3, #20
 8009da8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	e853 3f00 	ldrex	r3, [r3]
 8009db0:	617b      	str	r3, [r7, #20]
   return(result);
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009db8:	653b      	str	r3, [r7, #80]	; 0x50
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3314      	adds	r3, #20
 8009dc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009dc2:	627a      	str	r2, [r7, #36]	; 0x24
 8009dc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc6:	6a39      	ldr	r1, [r7, #32]
 8009dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dca:	e841 2300 	strex	r3, r2, [r1]
 8009dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1e5      	bne.n	8009da2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3760      	adds	r7, #96	; 0x60
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	08009ac7 	.word	0x08009ac7
 8009de4:	08009bed 	.word	0x08009bed
 8009de8:	08009c23 	.word	0x08009c23

08009dec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b089      	sub	sp, #36	; 0x24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	330c      	adds	r3, #12
 8009dfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	e853 3f00 	ldrex	r3, [r3]
 8009e02:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009e0a:	61fb      	str	r3, [r7, #28]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	330c      	adds	r3, #12
 8009e12:	69fa      	ldr	r2, [r7, #28]
 8009e14:	61ba      	str	r2, [r7, #24]
 8009e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e18:	6979      	ldr	r1, [r7, #20]
 8009e1a:	69ba      	ldr	r2, [r7, #24]
 8009e1c:	e841 2300 	strex	r3, r2, [r1]
 8009e20:	613b      	str	r3, [r7, #16]
   return(result);
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1e5      	bne.n	8009df4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2220      	movs	r2, #32
 8009e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009e30:	bf00      	nop
 8009e32:	3724      	adds	r7, #36	; 0x24
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b095      	sub	sp, #84	; 0x54
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	330c      	adds	r3, #12
 8009e4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e4e:	e853 3f00 	ldrex	r3, [r3]
 8009e52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	330c      	adds	r3, #12
 8009e62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e64:	643a      	str	r2, [r7, #64]	; 0x40
 8009e66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e6c:	e841 2300 	strex	r3, r2, [r1]
 8009e70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1e5      	bne.n	8009e44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3314      	adds	r3, #20
 8009e7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e80:	6a3b      	ldr	r3, [r7, #32]
 8009e82:	e853 3f00 	ldrex	r3, [r3]
 8009e86:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	f023 0301 	bic.w	r3, r3, #1
 8009e8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3314      	adds	r3, #20
 8009e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ea0:	e841 2300 	strex	r3, r2, [r1]
 8009ea4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1e5      	bne.n	8009e78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d119      	bne.n	8009ee8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	330c      	adds	r3, #12
 8009eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	e853 3f00 	ldrex	r3, [r3]
 8009ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f023 0310 	bic.w	r3, r3, #16
 8009eca:	647b      	str	r3, [r7, #68]	; 0x44
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	330c      	adds	r3, #12
 8009ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ed4:	61ba      	str	r2, [r7, #24]
 8009ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed8:	6979      	ldr	r1, [r7, #20]
 8009eda:	69ba      	ldr	r2, [r7, #24]
 8009edc:	e841 2300 	strex	r3, r2, [r1]
 8009ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1e5      	bne.n	8009eb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2220      	movs	r2, #32
 8009eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009ef6:	bf00      	nop
 8009ef8:	3754      	adds	r7, #84	; 0x54
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b084      	sub	sp, #16
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f7f7 ffa5 	bl	8001e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f22:	bf00      	nop
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b085      	sub	sp, #20
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b21      	cmp	r3, #33	; 0x21
 8009f3c:	d13e      	bne.n	8009fbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f46:	d114      	bne.n	8009f72 <UART_Transmit_IT+0x48>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d110      	bne.n	8009f72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	881b      	ldrh	r3, [r3, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	1c9a      	adds	r2, r3, #2
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	621a      	str	r2, [r3, #32]
 8009f70:	e008      	b.n	8009f84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a1b      	ldr	r3, [r3, #32]
 8009f76:	1c59      	adds	r1, r3, #1
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	6211      	str	r1, [r2, #32]
 8009f7c:	781a      	ldrb	r2, [r3, #0]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	4619      	mov	r1, r3
 8009f92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10f      	bne.n	8009fb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68da      	ldr	r2, [r3, #12]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009fa6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68da      	ldr	r2, [r3, #12]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	e000      	b.n	8009fbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009fbc:	2302      	movs	r3, #2
  }
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3714      	adds	r7, #20
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b082      	sub	sp, #8
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	68da      	ldr	r2, [r3, #12]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fe0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7f7 ff52 	bl	8001e94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b08c      	sub	sp, #48	; 0x30
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	2b22      	cmp	r3, #34	; 0x22
 800a00c:	f040 80ab 	bne.w	800a166 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a018:	d117      	bne.n	800a04a <UART_Receive_IT+0x50>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d113      	bne.n	800a04a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a022:	2300      	movs	r3, #0
 800a024:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	b29b      	uxth	r3, r3
 800a034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a038:	b29a      	uxth	r2, r3
 800a03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a042:	1c9a      	adds	r2, r3, #2
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	629a      	str	r2, [r3, #40]	; 0x28
 800a048:	e026      	b.n	800a098 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a04e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a050:	2300      	movs	r3, #0
 800a052:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a05c:	d007      	beq.n	800a06e <UART_Receive_IT+0x74>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10a      	bne.n	800a07c <UART_Receive_IT+0x82>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d106      	bne.n	800a07c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	b2da      	uxtb	r2, r3
 800a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a078:	701a      	strb	r2, [r3, #0]
 800a07a:	e008      	b.n	800a08e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	b2db      	uxtb	r3, r3
 800a084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a092:	1c5a      	adds	r2, r3, #1
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d15a      	bne.n	800a162 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68da      	ldr	r2, [r3, #12]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f022 0220 	bic.w	r2, r2, #32
 800a0ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68da      	ldr	r2, [r3, #12]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a0ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	695a      	ldr	r2, [r3, #20]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f022 0201 	bic.w	r2, r2, #1
 800a0da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2220      	movs	r2, #32
 800a0e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d135      	bne.n	800a158 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	330c      	adds	r3, #12
 800a0f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	e853 3f00 	ldrex	r3, [r3]
 800a100:	613b      	str	r3, [r7, #16]
   return(result);
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	f023 0310 	bic.w	r3, r3, #16
 800a108:	627b      	str	r3, [r7, #36]	; 0x24
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	330c      	adds	r3, #12
 800a110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a112:	623a      	str	r2, [r7, #32]
 800a114:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a116:	69f9      	ldr	r1, [r7, #28]
 800a118:	6a3a      	ldr	r2, [r7, #32]
 800a11a:	e841 2300 	strex	r3, r2, [r1]
 800a11e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1e5      	bne.n	800a0f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 0310 	and.w	r3, r3, #16
 800a130:	2b10      	cmp	r3, #16
 800a132:	d10a      	bne.n	800a14a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a134:	2300      	movs	r3, #0
 800a136:	60fb      	str	r3, [r7, #12]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7ff fc51 	bl	80099f8 <HAL_UARTEx_RxEventCallback>
 800a156:	e002      	b.n	800a15e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7f7 fe91 	bl	8001e80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a15e:	2300      	movs	r3, #0
 800a160:	e002      	b.n	800a168 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a162:	2300      	movs	r3, #0
 800a164:	e000      	b.n	800a168 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a166:	2302      	movs	r3, #2
  }
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3730      	adds	r7, #48	; 0x30
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a174:	b09f      	sub	sp, #124	; 0x7c
 800a176:	af00      	add	r7, sp, #0
 800a178:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a17a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a186:	68d9      	ldr	r1, [r3, #12]
 800a188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	ea40 0301 	orr.w	r3, r0, r1
 800a190:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a194:	689a      	ldr	r2, [r3, #8]
 800a196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a198:	691b      	ldr	r3, [r3, #16]
 800a19a:	431a      	orrs	r2, r3
 800a19c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a19e:	695b      	ldr	r3, [r3, #20]
 800a1a0:	431a      	orrs	r2, r3
 800a1a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a1aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a1b4:	f021 010c 	bic.w	r1, r1, #12
 800a1b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1be:	430b      	orrs	r3, r1
 800a1c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a1c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	695b      	ldr	r3, [r3, #20]
 800a1c8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a1cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ce:	6999      	ldr	r1, [r3, #24]
 800a1d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	ea40 0301 	orr.w	r3, r0, r1
 800a1d8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a1da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	4bc5      	ldr	r3, [pc, #788]	; (800a4f4 <UART_SetConfig+0x384>)
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d004      	beq.n	800a1ee <UART_SetConfig+0x7e>
 800a1e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	4bc3      	ldr	r3, [pc, #780]	; (800a4f8 <UART_SetConfig+0x388>)
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d103      	bne.n	800a1f6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a1ee:	f7fd fce9 	bl	8007bc4 <HAL_RCC_GetPCLK2Freq>
 800a1f2:	6778      	str	r0, [r7, #116]	; 0x74
 800a1f4:	e002      	b.n	800a1fc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a1f6:	f7fd fcd1 	bl	8007b9c <HAL_RCC_GetPCLK1Freq>
 800a1fa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1fe:	69db      	ldr	r3, [r3, #28]
 800a200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a204:	f040 80b6 	bne.w	800a374 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a20a:	461c      	mov	r4, r3
 800a20c:	f04f 0500 	mov.w	r5, #0
 800a210:	4622      	mov	r2, r4
 800a212:	462b      	mov	r3, r5
 800a214:	1891      	adds	r1, r2, r2
 800a216:	6439      	str	r1, [r7, #64]	; 0x40
 800a218:	415b      	adcs	r3, r3
 800a21a:	647b      	str	r3, [r7, #68]	; 0x44
 800a21c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a220:	1912      	adds	r2, r2, r4
 800a222:	eb45 0303 	adc.w	r3, r5, r3
 800a226:	f04f 0000 	mov.w	r0, #0
 800a22a:	f04f 0100 	mov.w	r1, #0
 800a22e:	00d9      	lsls	r1, r3, #3
 800a230:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a234:	00d0      	lsls	r0, r2, #3
 800a236:	4602      	mov	r2, r0
 800a238:	460b      	mov	r3, r1
 800a23a:	1911      	adds	r1, r2, r4
 800a23c:	6639      	str	r1, [r7, #96]	; 0x60
 800a23e:	416b      	adcs	r3, r5
 800a240:	667b      	str	r3, [r7, #100]	; 0x64
 800a242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	461a      	mov	r2, r3
 800a248:	f04f 0300 	mov.w	r3, #0
 800a24c:	1891      	adds	r1, r2, r2
 800a24e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a250:	415b      	adcs	r3, r3
 800a252:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a254:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a258:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a25c:	f7f6 f810 	bl	8000280 <__aeabi_uldivmod>
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	4ba5      	ldr	r3, [pc, #660]	; (800a4fc <UART_SetConfig+0x38c>)
 800a266:	fba3 2302 	umull	r2, r3, r3, r2
 800a26a:	095b      	lsrs	r3, r3, #5
 800a26c:	011e      	lsls	r6, r3, #4
 800a26e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a270:	461c      	mov	r4, r3
 800a272:	f04f 0500 	mov.w	r5, #0
 800a276:	4622      	mov	r2, r4
 800a278:	462b      	mov	r3, r5
 800a27a:	1891      	adds	r1, r2, r2
 800a27c:	6339      	str	r1, [r7, #48]	; 0x30
 800a27e:	415b      	adcs	r3, r3
 800a280:	637b      	str	r3, [r7, #52]	; 0x34
 800a282:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a286:	1912      	adds	r2, r2, r4
 800a288:	eb45 0303 	adc.w	r3, r5, r3
 800a28c:	f04f 0000 	mov.w	r0, #0
 800a290:	f04f 0100 	mov.w	r1, #0
 800a294:	00d9      	lsls	r1, r3, #3
 800a296:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a29a:	00d0      	lsls	r0, r2, #3
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	1911      	adds	r1, r2, r4
 800a2a2:	65b9      	str	r1, [r7, #88]	; 0x58
 800a2a4:	416b      	adcs	r3, r5
 800a2a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	f04f 0300 	mov.w	r3, #0
 800a2b2:	1891      	adds	r1, r2, r2
 800a2b4:	62b9      	str	r1, [r7, #40]	; 0x28
 800a2b6:	415b      	adcs	r3, r3
 800a2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a2c2:	f7f5 ffdd 	bl	8000280 <__aeabi_uldivmod>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	4b8c      	ldr	r3, [pc, #560]	; (800a4fc <UART_SetConfig+0x38c>)
 800a2cc:	fba3 1302 	umull	r1, r3, r3, r2
 800a2d0:	095b      	lsrs	r3, r3, #5
 800a2d2:	2164      	movs	r1, #100	; 0x64
 800a2d4:	fb01 f303 	mul.w	r3, r1, r3
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	00db      	lsls	r3, r3, #3
 800a2dc:	3332      	adds	r3, #50	; 0x32
 800a2de:	4a87      	ldr	r2, [pc, #540]	; (800a4fc <UART_SetConfig+0x38c>)
 800a2e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e4:	095b      	lsrs	r3, r3, #5
 800a2e6:	005b      	lsls	r3, r3, #1
 800a2e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a2ec:	441e      	add	r6, r3
 800a2ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f04f 0100 	mov.w	r1, #0
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	1894      	adds	r4, r2, r2
 800a2fc:	623c      	str	r4, [r7, #32]
 800a2fe:	415b      	adcs	r3, r3
 800a300:	627b      	str	r3, [r7, #36]	; 0x24
 800a302:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a306:	1812      	adds	r2, r2, r0
 800a308:	eb41 0303 	adc.w	r3, r1, r3
 800a30c:	f04f 0400 	mov.w	r4, #0
 800a310:	f04f 0500 	mov.w	r5, #0
 800a314:	00dd      	lsls	r5, r3, #3
 800a316:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a31a:	00d4      	lsls	r4, r2, #3
 800a31c:	4622      	mov	r2, r4
 800a31e:	462b      	mov	r3, r5
 800a320:	1814      	adds	r4, r2, r0
 800a322:	653c      	str	r4, [r7, #80]	; 0x50
 800a324:	414b      	adcs	r3, r1
 800a326:	657b      	str	r3, [r7, #84]	; 0x54
 800a328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	461a      	mov	r2, r3
 800a32e:	f04f 0300 	mov.w	r3, #0
 800a332:	1891      	adds	r1, r2, r2
 800a334:	61b9      	str	r1, [r7, #24]
 800a336:	415b      	adcs	r3, r3
 800a338:	61fb      	str	r3, [r7, #28]
 800a33a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a33e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a342:	f7f5 ff9d 	bl	8000280 <__aeabi_uldivmod>
 800a346:	4602      	mov	r2, r0
 800a348:	460b      	mov	r3, r1
 800a34a:	4b6c      	ldr	r3, [pc, #432]	; (800a4fc <UART_SetConfig+0x38c>)
 800a34c:	fba3 1302 	umull	r1, r3, r3, r2
 800a350:	095b      	lsrs	r3, r3, #5
 800a352:	2164      	movs	r1, #100	; 0x64
 800a354:	fb01 f303 	mul.w	r3, r1, r3
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	00db      	lsls	r3, r3, #3
 800a35c:	3332      	adds	r3, #50	; 0x32
 800a35e:	4a67      	ldr	r2, [pc, #412]	; (800a4fc <UART_SetConfig+0x38c>)
 800a360:	fba2 2303 	umull	r2, r3, r2, r3
 800a364:	095b      	lsrs	r3, r3, #5
 800a366:	f003 0207 	and.w	r2, r3, #7
 800a36a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4432      	add	r2, r6
 800a370:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a372:	e0b9      	b.n	800a4e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a374:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a376:	461c      	mov	r4, r3
 800a378:	f04f 0500 	mov.w	r5, #0
 800a37c:	4622      	mov	r2, r4
 800a37e:	462b      	mov	r3, r5
 800a380:	1891      	adds	r1, r2, r2
 800a382:	6139      	str	r1, [r7, #16]
 800a384:	415b      	adcs	r3, r3
 800a386:	617b      	str	r3, [r7, #20]
 800a388:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a38c:	1912      	adds	r2, r2, r4
 800a38e:	eb45 0303 	adc.w	r3, r5, r3
 800a392:	f04f 0000 	mov.w	r0, #0
 800a396:	f04f 0100 	mov.w	r1, #0
 800a39a:	00d9      	lsls	r1, r3, #3
 800a39c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a3a0:	00d0      	lsls	r0, r2, #3
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	eb12 0804 	adds.w	r8, r2, r4
 800a3aa:	eb43 0905 	adc.w	r9, r3, r5
 800a3ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f04f 0100 	mov.w	r1, #0
 800a3b8:	f04f 0200 	mov.w	r2, #0
 800a3bc:	f04f 0300 	mov.w	r3, #0
 800a3c0:	008b      	lsls	r3, r1, #2
 800a3c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a3c6:	0082      	lsls	r2, r0, #2
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	4649      	mov	r1, r9
 800a3cc:	f7f5 ff58 	bl	8000280 <__aeabi_uldivmod>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4b49      	ldr	r3, [pc, #292]	; (800a4fc <UART_SetConfig+0x38c>)
 800a3d6:	fba3 2302 	umull	r2, r3, r3, r2
 800a3da:	095b      	lsrs	r3, r3, #5
 800a3dc:	011e      	lsls	r6, r3, #4
 800a3de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f04f 0100 	mov.w	r1, #0
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	1894      	adds	r4, r2, r2
 800a3ec:	60bc      	str	r4, [r7, #8]
 800a3ee:	415b      	adcs	r3, r3
 800a3f0:	60fb      	str	r3, [r7, #12]
 800a3f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3f6:	1812      	adds	r2, r2, r0
 800a3f8:	eb41 0303 	adc.w	r3, r1, r3
 800a3fc:	f04f 0400 	mov.w	r4, #0
 800a400:	f04f 0500 	mov.w	r5, #0
 800a404:	00dd      	lsls	r5, r3, #3
 800a406:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a40a:	00d4      	lsls	r4, r2, #3
 800a40c:	4622      	mov	r2, r4
 800a40e:	462b      	mov	r3, r5
 800a410:	1814      	adds	r4, r2, r0
 800a412:	64bc      	str	r4, [r7, #72]	; 0x48
 800a414:	414b      	adcs	r3, r1
 800a416:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f04f 0100 	mov.w	r1, #0
 800a422:	f04f 0200 	mov.w	r2, #0
 800a426:	f04f 0300 	mov.w	r3, #0
 800a42a:	008b      	lsls	r3, r1, #2
 800a42c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a430:	0082      	lsls	r2, r0, #2
 800a432:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a436:	f7f5 ff23 	bl	8000280 <__aeabi_uldivmod>
 800a43a:	4602      	mov	r2, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	4b2f      	ldr	r3, [pc, #188]	; (800a4fc <UART_SetConfig+0x38c>)
 800a440:	fba3 1302 	umull	r1, r3, r3, r2
 800a444:	095b      	lsrs	r3, r3, #5
 800a446:	2164      	movs	r1, #100	; 0x64
 800a448:	fb01 f303 	mul.w	r3, r1, r3
 800a44c:	1ad3      	subs	r3, r2, r3
 800a44e:	011b      	lsls	r3, r3, #4
 800a450:	3332      	adds	r3, #50	; 0x32
 800a452:	4a2a      	ldr	r2, [pc, #168]	; (800a4fc <UART_SetConfig+0x38c>)
 800a454:	fba2 2303 	umull	r2, r3, r2, r3
 800a458:	095b      	lsrs	r3, r3, #5
 800a45a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a45e:	441e      	add	r6, r3
 800a460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a462:	4618      	mov	r0, r3
 800a464:	f04f 0100 	mov.w	r1, #0
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	1894      	adds	r4, r2, r2
 800a46e:	603c      	str	r4, [r7, #0]
 800a470:	415b      	adcs	r3, r3
 800a472:	607b      	str	r3, [r7, #4]
 800a474:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a478:	1812      	adds	r2, r2, r0
 800a47a:	eb41 0303 	adc.w	r3, r1, r3
 800a47e:	f04f 0400 	mov.w	r4, #0
 800a482:	f04f 0500 	mov.w	r5, #0
 800a486:	00dd      	lsls	r5, r3, #3
 800a488:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a48c:	00d4      	lsls	r4, r2, #3
 800a48e:	4622      	mov	r2, r4
 800a490:	462b      	mov	r3, r5
 800a492:	eb12 0a00 	adds.w	sl, r2, r0
 800a496:	eb43 0b01 	adc.w	fp, r3, r1
 800a49a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f04f 0100 	mov.w	r1, #0
 800a4a4:	f04f 0200 	mov.w	r2, #0
 800a4a8:	f04f 0300 	mov.w	r3, #0
 800a4ac:	008b      	lsls	r3, r1, #2
 800a4ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a4b2:	0082      	lsls	r2, r0, #2
 800a4b4:	4650      	mov	r0, sl
 800a4b6:	4659      	mov	r1, fp
 800a4b8:	f7f5 fee2 	bl	8000280 <__aeabi_uldivmod>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	4b0e      	ldr	r3, [pc, #56]	; (800a4fc <UART_SetConfig+0x38c>)
 800a4c2:	fba3 1302 	umull	r1, r3, r3, r2
 800a4c6:	095b      	lsrs	r3, r3, #5
 800a4c8:	2164      	movs	r1, #100	; 0x64
 800a4ca:	fb01 f303 	mul.w	r3, r1, r3
 800a4ce:	1ad3      	subs	r3, r2, r3
 800a4d0:	011b      	lsls	r3, r3, #4
 800a4d2:	3332      	adds	r3, #50	; 0x32
 800a4d4:	4a09      	ldr	r2, [pc, #36]	; (800a4fc <UART_SetConfig+0x38c>)
 800a4d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a4da:	095b      	lsrs	r3, r3, #5
 800a4dc:	f003 020f 	and.w	r2, r3, #15
 800a4e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4432      	add	r2, r6
 800a4e6:	609a      	str	r2, [r3, #8]
}
 800a4e8:	bf00      	nop
 800a4ea:	377c      	adds	r7, #124	; 0x7c
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f2:	bf00      	nop
 800a4f4:	40011000 	.word	0x40011000
 800a4f8:	40011400 	.word	0x40011400
 800a4fc:	51eb851f 	.word	0x51eb851f

0800a500 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a500:	b084      	sub	sp, #16
 800a502:	b480      	push	{r7}
 800a504:	b085      	sub	sp, #20
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	f107 001c 	add.w	r0, r7, #28
 800a50e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a516:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a518:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a51a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a51e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a522:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a526:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a52a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	4313      	orrs	r3, r2
 800a530:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a53a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	431a      	orrs	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3714      	adds	r7, #20
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	b004      	add	sp, #16
 800a554:	4770      	bx	lr

0800a556 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a556:	b480      	push	{r7}
 800a558:	b083      	sub	sp, #12
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a564:	4618      	mov	r0, r3
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a592:	b580      	push	{r7, lr}
 800a594:	b082      	sub	sp, #8
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2203      	movs	r2, #3
 800a59e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a5a0:	2002      	movs	r0, #2
 800a5a2:	f7fb fe6d 	bl	8006280 <HAL_Delay>
  
  return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3708      	adds	r7, #8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 0303 	and.w	r3, r3, #3
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a5ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a5f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a5f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a606:	f023 030f 	bic.w	r3, r3, #15
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	431a      	orrs	r2, r3
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3714      	adds	r7, #20
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	b2db      	uxtb	r3, r3
}
 800a62e:	4618      	mov	r0, r3
 800a630:	370c      	adds	r7, #12
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a63a:	b480      	push	{r7}
 800a63c:	b085      	sub	sp, #20
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	3314      	adds	r3, #20
 800a648:	461a      	mov	r2, r3
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	4413      	add	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
}  
 800a654:	4618      	mov	r0, r3
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a66a:	2300      	movs	r3, #0
 800a66c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	685a      	ldr	r2, [r3, #4]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a686:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a68c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a692:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	4313      	orrs	r3, r2
 800a698:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	431a      	orrs	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a6aa:	2300      	movs	r3, #0

}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a6c6:	2310      	movs	r3, #16
 800a6c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6ca:	2340      	movs	r3, #64	; 0x40
 800a6cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6d8:	f107 0308 	add.w	r3, r7, #8
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff ff74 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a6e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6e8:	2110      	movs	r1, #16
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fa44 	bl	800ab78 <SDMMC_GetCmdResp1>
 800a6f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6f2:	69fb      	ldr	r3, [r7, #28]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3720      	adds	r7, #32
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b088      	sub	sp, #32
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a70a:	2311      	movs	r3, #17
 800a70c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a70e:	2340      	movs	r3, #64	; 0x40
 800a710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a712:	2300      	movs	r3, #0
 800a714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a71a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a71c:	f107 0308 	add.w	r3, r7, #8
 800a720:	4619      	mov	r1, r3
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7ff ff52 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a728:	f241 3288 	movw	r2, #5000	; 0x1388
 800a72c:	2111      	movs	r1, #17
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 fa22 	bl	800ab78 <SDMMC_GetCmdResp1>
 800a734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a736:	69fb      	ldr	r3, [r7, #28]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3720      	adds	r7, #32
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a74e:	2312      	movs	r3, #18
 800a750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a752:	2340      	movs	r3, #64	; 0x40
 800a754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a756:	2300      	movs	r3, #0
 800a758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a75a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a75e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a760:	f107 0308 	add.w	r3, r7, #8
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f7ff ff30 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a76c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a770:	2112      	movs	r1, #18
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fa00 	bl	800ab78 <SDMMC_GetCmdResp1>
 800a778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a77a:	69fb      	ldr	r3, [r7, #28]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3720      	adds	r7, #32
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a792:	2318      	movs	r3, #24
 800a794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a796:	2340      	movs	r3, #64	; 0x40
 800a798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a79a:	2300      	movs	r3, #0
 800a79c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a79e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7a4:	f107 0308 	add.w	r3, r7, #8
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7ff ff0e 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a7b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7b4:	2118      	movs	r1, #24
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f9de 	bl	800ab78 <SDMMC_GetCmdResp1>
 800a7bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7be:	69fb      	ldr	r3, [r7, #28]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3720      	adds	r7, #32
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b088      	sub	sp, #32
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a7d6:	2319      	movs	r3, #25
 800a7d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7da:	2340      	movs	r3, #64	; 0x40
 800a7dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7e8:	f107 0308 	add.w	r3, r7, #8
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7ff feec 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a7f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7f8:	2119      	movs	r1, #25
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 f9bc 	bl	800ab78 <SDMMC_GetCmdResp1>
 800a800:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a802:	69fb      	ldr	r3, [r7, #28]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3720      	adds	r7, #32
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b088      	sub	sp, #32
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a814:	2300      	movs	r3, #0
 800a816:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a818:	230c      	movs	r3, #12
 800a81a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a81c:	2340      	movs	r3, #64	; 0x40
 800a81e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a828:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a82a:	f107 0308 	add.w	r3, r7, #8
 800a82e:	4619      	mov	r1, r3
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f7ff fecb 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a836:	4a05      	ldr	r2, [pc, #20]	; (800a84c <SDMMC_CmdStopTransfer+0x40>)
 800a838:	210c      	movs	r1, #12
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f99c 	bl	800ab78 <SDMMC_GetCmdResp1>
 800a840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a842:	69fb      	ldr	r3, [r7, #28]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3720      	adds	r7, #32
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	05f5e100 	.word	0x05f5e100

0800a850 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b08a      	sub	sp, #40	; 0x28
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a860:	2307      	movs	r3, #7
 800a862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a864:	2340      	movs	r3, #64	; 0x40
 800a866:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a868:	2300      	movs	r3, #0
 800a86a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a86c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a870:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a872:	f107 0310 	add.w	r3, r7, #16
 800a876:	4619      	mov	r1, r3
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f7ff fea7 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a87e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a882:	2107      	movs	r1, #7
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f000 f977 	bl	800ab78 <SDMMC_GetCmdResp1>
 800a88a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3728      	adds	r7, #40	; 0x28
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b088      	sub	sp, #32
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8b4:	f107 0308 	add.w	r3, r7, #8
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f7ff fe86 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 f92d 	bl	800ab20 <SDMMC_GetCmdError>
 800a8c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8c8:	69fb      	ldr	r3, [r7, #28]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3720      	adds	r7, #32
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b088      	sub	sp, #32
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a8da:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a8de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a8e0:	2308      	movs	r3, #8
 800a8e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8e4:	2340      	movs	r3, #64	; 0x40
 800a8e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8f2:	f107 0308 	add.w	r3, r7, #8
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7ff fe67 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 fb24 	bl	800af4c <SDMMC_GetCmdResp7>
 800a904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a906:	69fb      	ldr	r3, [r7, #28]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3720      	adds	r7, #32
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b088      	sub	sp, #32
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a91e:	2337      	movs	r3, #55	; 0x37
 800a920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a922:	2340      	movs	r3, #64	; 0x40
 800a924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a926:	2300      	movs	r3, #0
 800a928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a92a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a92e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a930:	f107 0308 	add.w	r3, r7, #8
 800a934:	4619      	mov	r1, r3
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f7ff fe48 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a93c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a940:	2137      	movs	r1, #55	; 0x37
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 f918 	bl	800ab78 <SDMMC_GetCmdResp1>
 800a948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a94a:	69fb      	ldr	r3, [r7, #28]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3720      	adds	r7, #32
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b088      	sub	sp, #32
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a96a:	2329      	movs	r3, #41	; 0x29
 800a96c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a96e:	2340      	movs	r3, #64	; 0x40
 800a970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a972:	2300      	movs	r3, #0
 800a974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a97a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a97c:	f107 0308 	add.w	r3, r7, #8
 800a980:	4619      	mov	r1, r3
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f7ff fe22 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fa2b 	bl	800ade4 <SDMMC_GetCmdResp3>
 800a98e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a990:	69fb      	ldr	r3, [r7, #28]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3720      	adds	r7, #32
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b088      	sub	sp, #32
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a9a8:	2306      	movs	r3, #6
 800a9aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9ac:	2340      	movs	r3, #64	; 0x40
 800a9ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9ba:	f107 0308 	add.w	r3, r7, #8
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7ff fe03 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a9c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9ca:	2106      	movs	r1, #6
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 f8d3 	bl	800ab78 <SDMMC_GetCmdResp1>
 800a9d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9d4:	69fb      	ldr	r3, [r7, #28]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3720      	adds	r7, #32
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b088      	sub	sp, #32
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a9ea:	2333      	movs	r3, #51	; 0x33
 800a9ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9ee:	2340      	movs	r3, #64	; 0x40
 800a9f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9fc:	f107 0308 	add.w	r3, r7, #8
 800aa00:	4619      	mov	r1, r3
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7ff fde2 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800aa08:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa0c:	2133      	movs	r1, #51	; 0x33
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f8b2 	bl	800ab78 <SDMMC_GetCmdResp1>
 800aa14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa16:	69fb      	ldr	r3, [r7, #28]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3720      	adds	r7, #32
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b088      	sub	sp, #32
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800aa2c:	2302      	movs	r3, #2
 800aa2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800aa30:	23c0      	movs	r3, #192	; 0xc0
 800aa32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa34:	2300      	movs	r3, #0
 800aa36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa3e:	f107 0308 	add.w	r3, r7, #8
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f7ff fdc1 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f982 	bl	800ad54 <SDMMC_GetCmdResp2>
 800aa50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa52:	69fb      	ldr	r3, [r7, #28]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3720      	adds	r7, #32
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b088      	sub	sp, #32
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aa6a:	2309      	movs	r3, #9
 800aa6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800aa6e:	23c0      	movs	r3, #192	; 0xc0
 800aa70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa72:	2300      	movs	r3, #0
 800aa74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa7c:	f107 0308 	add.w	r3, r7, #8
 800aa80:	4619      	mov	r1, r3
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7ff fda2 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 f963 	bl	800ad54 <SDMMC_GetCmdResp2>
 800aa8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa90:	69fb      	ldr	r3, [r7, #28]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3720      	adds	r7, #32
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b088      	sub	sp, #32
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
 800aaa2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aaac:	2340      	movs	r3, #64	; 0x40
 800aaae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aab0:	2300      	movs	r3, #0
 800aab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aab8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aaba:	f107 0308 	add.w	r3, r7, #8
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff fd83 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	2103      	movs	r1, #3
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 f9c8 	bl	800ae60 <SDMMC_GetCmdResp6>
 800aad0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aad2:	69fb      	ldr	r3, [r7, #28]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3720      	adds	r7, #32
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b088      	sub	sp, #32
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aaea:	230d      	movs	r3, #13
 800aaec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aaee:	2340      	movs	r3, #64	; 0x40
 800aaf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aaf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aafa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aafc:	f107 0308 	add.w	r3, r7, #8
 800ab00:	4619      	mov	r1, r3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7ff fd62 	bl	800a5cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ab08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab0c:	210d      	movs	r1, #13
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 f832 	bl	800ab78 <SDMMC_GetCmdResp1>
 800ab14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab16:	69fb      	ldr	r3, [r7, #28]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3720      	adds	r7, #32
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab28:	4b11      	ldr	r3, [pc, #68]	; (800ab70 <SDMMC_GetCmdError+0x50>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a11      	ldr	r2, [pc, #68]	; (800ab74 <SDMMC_GetCmdError+0x54>)
 800ab2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab32:	0a5b      	lsrs	r3, r3, #9
 800ab34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab38:	fb02 f303 	mul.w	r3, r2, r3
 800ab3c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	1e5a      	subs	r2, r3, #1
 800ab42:	60fa      	str	r2, [r7, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d102      	bne.n	800ab4e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab4c:	e009      	b.n	800ab62 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d0f1      	beq.n	800ab3e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	22c5      	movs	r2, #197	; 0xc5
 800ab5e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3714      	adds	r7, #20
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	20000000 	.word	0x20000000
 800ab74:	10624dd3 	.word	0x10624dd3

0800ab78 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b088      	sub	sp, #32
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	460b      	mov	r3, r1
 800ab82:	607a      	str	r2, [r7, #4]
 800ab84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ab86:	4b70      	ldr	r3, [pc, #448]	; (800ad48 <SDMMC_GetCmdResp1+0x1d0>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a70      	ldr	r2, [pc, #448]	; (800ad4c <SDMMC_GetCmdResp1+0x1d4>)
 800ab8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab90:	0a5a      	lsrs	r2, r3, #9
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	fb02 f303 	mul.w	r3, r2, r3
 800ab98:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	1e5a      	subs	r2, r3, #1
 800ab9e:	61fa      	str	r2, [r7, #28]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d102      	bne.n	800abaa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aba4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aba8:	e0c9      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abae:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d0ef      	beq.n	800ab9a <SDMMC_GetCmdResp1+0x22>
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1ea      	bne.n	800ab9a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc8:	f003 0304 	and.w	r3, r3, #4
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d004      	beq.n	800abda <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2204      	movs	r2, #4
 800abd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800abd6:	2304      	movs	r3, #4
 800abd8:	e0b1      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abde:	f003 0301 	and.w	r3, r3, #1
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d004      	beq.n	800abf0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2201      	movs	r2, #1
 800abea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abec:	2301      	movs	r3, #1
 800abee:	e0a6      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	22c5      	movs	r2, #197	; 0xc5
 800abf4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f7ff fd12 	bl	800a620 <SDIO_GetCommandResponse>
 800abfc:	4603      	mov	r3, r0
 800abfe:	461a      	mov	r2, r3
 800ac00:	7afb      	ldrb	r3, [r7, #11]
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d001      	beq.n	800ac0a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac06:	2301      	movs	r3, #1
 800ac08:	e099      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f7ff fd14 	bl	800a63a <SDIO_GetResponse>
 800ac12:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	4b4e      	ldr	r3, [pc, #312]	; (800ad50 <SDMMC_GetCmdResp1+0x1d8>)
 800ac18:	4013      	ands	r3, r2
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d101      	bne.n	800ac22 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	e08d      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	da02      	bge.n	800ac2e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ac28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac2c:	e087      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d001      	beq.n	800ac3c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ac38:	2340      	movs	r3, #64	; 0x40
 800ac3a:	e080      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ac46:	2380      	movs	r3, #128	; 0x80
 800ac48:	e079      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d002      	beq.n	800ac5a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ac54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac58:	e071      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d002      	beq.n	800ac6a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ac64:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac68:	e069      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d002      	beq.n	800ac7a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ac74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac78:	e061      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d002      	beq.n	800ac8a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ac84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac88:	e059      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ac94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac98:	e051      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d002      	beq.n	800acaa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aca8:	e049      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800acb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800acb8:	e041      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d002      	beq.n	800acca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800acc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acc8:	e039      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d002      	beq.n	800acda <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800acd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800acd8:	e031      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d002      	beq.n	800acea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ace4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ace8:	e029      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800acf4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800acf8:	e021      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d002      	beq.n	800ad0a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ad04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ad08:	e019      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d002      	beq.n	800ad1a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ad14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ad18:	e011      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d002      	beq.n	800ad2a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ad24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad28:	e009      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f003 0308 	and.w	r3, r3, #8
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d002      	beq.n	800ad3a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ad34:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ad38:	e001      	b.n	800ad3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ad3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3720      	adds	r7, #32
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	20000000 	.word	0x20000000
 800ad4c:	10624dd3 	.word	0x10624dd3
 800ad50:	fdffe008 	.word	0xfdffe008

0800ad54 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad5c:	4b1f      	ldr	r3, [pc, #124]	; (800addc <SDMMC_GetCmdResp2+0x88>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a1f      	ldr	r2, [pc, #124]	; (800ade0 <SDMMC_GetCmdResp2+0x8c>)
 800ad62:	fba2 2303 	umull	r2, r3, r2, r3
 800ad66:	0a5b      	lsrs	r3, r3, #9
 800ad68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad6c:	fb02 f303 	mul.w	r3, r2, r3
 800ad70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	1e5a      	subs	r2, r3, #1
 800ad76:	60fa      	str	r2, [r7, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d102      	bne.n	800ad82 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad80:	e026      	b.n	800add0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d0ef      	beq.n	800ad72 <SDMMC_GetCmdResp2+0x1e>
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1ea      	bne.n	800ad72 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada0:	f003 0304 	and.w	r3, r3, #4
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d004      	beq.n	800adb2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2204      	movs	r2, #4
 800adac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800adae:	2304      	movs	r3, #4
 800adb0:	e00e      	b.n	800add0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb6:	f003 0301 	and.w	r3, r3, #1
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d004      	beq.n	800adc8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800adc4:	2301      	movs	r3, #1
 800adc6:	e003      	b.n	800add0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	22c5      	movs	r2, #197	; 0xc5
 800adcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3714      	adds	r7, #20
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr
 800addc:	20000000 	.word	0x20000000
 800ade0:	10624dd3 	.word	0x10624dd3

0800ade4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800adec:	4b1a      	ldr	r3, [pc, #104]	; (800ae58 <SDMMC_GetCmdResp3+0x74>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a1a      	ldr	r2, [pc, #104]	; (800ae5c <SDMMC_GetCmdResp3+0x78>)
 800adf2:	fba2 2303 	umull	r2, r3, r2, r3
 800adf6:	0a5b      	lsrs	r3, r3, #9
 800adf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800adfc:	fb02 f303 	mul.w	r3, r2, r3
 800ae00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	1e5a      	subs	r2, r3, #1
 800ae06:	60fa      	str	r2, [r7, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d102      	bne.n	800ae12 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae10:	e01b      	b.n	800ae4a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d0ef      	beq.n	800ae02 <SDMMC_GetCmdResp3+0x1e>
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d1ea      	bne.n	800ae02 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae30:	f003 0304 	and.w	r3, r3, #4
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d004      	beq.n	800ae42 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2204      	movs	r2, #4
 800ae3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae3e:	2304      	movs	r3, #4
 800ae40:	e003      	b.n	800ae4a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	22c5      	movs	r2, #197	; 0xc5
 800ae46:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3714      	adds	r7, #20
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	20000000 	.word	0x20000000
 800ae5c:	10624dd3 	.word	0x10624dd3

0800ae60 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b088      	sub	sp, #32
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	460b      	mov	r3, r1
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae6e:	4b35      	ldr	r3, [pc, #212]	; (800af44 <SDMMC_GetCmdResp6+0xe4>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a35      	ldr	r2, [pc, #212]	; (800af48 <SDMMC_GetCmdResp6+0xe8>)
 800ae74:	fba2 2303 	umull	r2, r3, r2, r3
 800ae78:	0a5b      	lsrs	r3, r3, #9
 800ae7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae7e:	fb02 f303 	mul.w	r3, r2, r3
 800ae82:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	1e5a      	subs	r2, r3, #1
 800ae88:	61fa      	str	r2, [r7, #28]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d102      	bne.n	800ae94 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae92:	e052      	b.n	800af3a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae98:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d0ef      	beq.n	800ae84 <SDMMC_GetCmdResp6+0x24>
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1ea      	bne.n	800ae84 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeb2:	f003 0304 	and.w	r3, r3, #4
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d004      	beq.n	800aec4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2204      	movs	r2, #4
 800aebe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aec0:	2304      	movs	r3, #4
 800aec2:	e03a      	b.n	800af3a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec8:	f003 0301 	and.w	r3, r3, #1
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d004      	beq.n	800aeda <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2201      	movs	r2, #1
 800aed4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e02f      	b.n	800af3a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f7ff fba0 	bl	800a620 <SDIO_GetCommandResponse>
 800aee0:	4603      	mov	r3, r0
 800aee2:	461a      	mov	r2, r3
 800aee4:	7afb      	ldrb	r3, [r7, #11]
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d001      	beq.n	800aeee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e025      	b.n	800af3a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	22c5      	movs	r2, #197	; 0xc5
 800aef2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800aef4:	2100      	movs	r1, #0
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f7ff fb9f 	bl	800a63a <SDIO_GetResponse>
 800aefc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800af04:	2b00      	cmp	r3, #0
 800af06:	d106      	bne.n	800af16 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	0c1b      	lsrs	r3, r3, #16
 800af0c:	b29a      	uxth	r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800af12:	2300      	movs	r3, #0
 800af14:	e011      	b.n	800af3a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800af20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af24:	e009      	b.n	800af3a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800af30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af34:	e001      	b.n	800af3a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800af36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3720      	adds	r7, #32
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	20000000 	.word	0x20000000
 800af48:	10624dd3 	.word	0x10624dd3

0800af4c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b085      	sub	sp, #20
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af54:	4b22      	ldr	r3, [pc, #136]	; (800afe0 <SDMMC_GetCmdResp7+0x94>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a22      	ldr	r2, [pc, #136]	; (800afe4 <SDMMC_GetCmdResp7+0x98>)
 800af5a:	fba2 2303 	umull	r2, r3, r2, r3
 800af5e:	0a5b      	lsrs	r3, r3, #9
 800af60:	f241 3288 	movw	r2, #5000	; 0x1388
 800af64:	fb02 f303 	mul.w	r3, r2, r3
 800af68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	1e5a      	subs	r2, r3, #1
 800af6e:	60fa      	str	r2, [r7, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d102      	bne.n	800af7a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af78:	e02c      	b.n	800afd4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0ef      	beq.n	800af6a <SDMMC_GetCmdResp7+0x1e>
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1ea      	bne.n	800af6a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af98:	f003 0304 	and.w	r3, r3, #4
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d004      	beq.n	800afaa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2204      	movs	r2, #4
 800afa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800afa6:	2304      	movs	r3, #4
 800afa8:	e014      	b.n	800afd4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d004      	beq.n	800afc0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afbc:	2301      	movs	r3, #1
 800afbe:	e009      	b.n	800afd4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2240      	movs	r2, #64	; 0x40
 800afd0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800afd2:	2300      	movs	r3, #0
  
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	20000000 	.word	0x20000000
 800afe4:	10624dd3 	.word	0x10624dd3

0800afe8 <main>:




int main(void)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	af00      	add	r7, sp, #0
  hwInit();
 800afec:	f7f7 f83e 	bl	800206c <hwInit>
  apInit();
 800aff0:	f7f5 fac2 	bl	8000578 <apInit>



// apBoardLedTest();
// apUartTest();
   apSDCardTest();
 800aff4:	f7f5 fb22 	bl	800063c <apSDCardTest>

  return 0;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	bd80      	pop	{r7, pc}
	...

0800b000 <__errno>:
 800b000:	4b01      	ldr	r3, [pc, #4]	; (800b008 <__errno+0x8>)
 800b002:	6818      	ldr	r0, [r3, #0]
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	20000024 	.word	0x20000024

0800b00c <__libc_init_array>:
 800b00c:	b570      	push	{r4, r5, r6, lr}
 800b00e:	4d0d      	ldr	r5, [pc, #52]	; (800b044 <__libc_init_array+0x38>)
 800b010:	4c0d      	ldr	r4, [pc, #52]	; (800b048 <__libc_init_array+0x3c>)
 800b012:	1b64      	subs	r4, r4, r5
 800b014:	10a4      	asrs	r4, r4, #2
 800b016:	2600      	movs	r6, #0
 800b018:	42a6      	cmp	r6, r4
 800b01a:	d109      	bne.n	800b030 <__libc_init_array+0x24>
 800b01c:	4d0b      	ldr	r5, [pc, #44]	; (800b04c <__libc_init_array+0x40>)
 800b01e:	4c0c      	ldr	r4, [pc, #48]	; (800b050 <__libc_init_array+0x44>)
 800b020:	f000 fc68 	bl	800b8f4 <_init>
 800b024:	1b64      	subs	r4, r4, r5
 800b026:	10a4      	asrs	r4, r4, #2
 800b028:	2600      	movs	r6, #0
 800b02a:	42a6      	cmp	r6, r4
 800b02c:	d105      	bne.n	800b03a <__libc_init_array+0x2e>
 800b02e:	bd70      	pop	{r4, r5, r6, pc}
 800b030:	f855 3b04 	ldr.w	r3, [r5], #4
 800b034:	4798      	blx	r3
 800b036:	3601      	adds	r6, #1
 800b038:	e7ee      	b.n	800b018 <__libc_init_array+0xc>
 800b03a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b03e:	4798      	blx	r3
 800b040:	3601      	adds	r6, #1
 800b042:	e7f2      	b.n	800b02a <__libc_init_array+0x1e>
 800b044:	0800c27c 	.word	0x0800c27c
 800b048:	0800c27c 	.word	0x0800c27c
 800b04c:	0800c27c 	.word	0x0800c27c
 800b050:	0800c280 	.word	0x0800c280

0800b054 <memset>:
 800b054:	4402      	add	r2, r0
 800b056:	4603      	mov	r3, r0
 800b058:	4293      	cmp	r3, r2
 800b05a:	d100      	bne.n	800b05e <memset+0xa>
 800b05c:	4770      	bx	lr
 800b05e:	f803 1b01 	strb.w	r1, [r3], #1
 800b062:	e7f9      	b.n	800b058 <memset+0x4>

0800b064 <_vsniprintf_r>:
 800b064:	b530      	push	{r4, r5, lr}
 800b066:	1e14      	subs	r4, r2, #0
 800b068:	4605      	mov	r5, r0
 800b06a:	b09b      	sub	sp, #108	; 0x6c
 800b06c:	4618      	mov	r0, r3
 800b06e:	da05      	bge.n	800b07c <_vsniprintf_r+0x18>
 800b070:	238b      	movs	r3, #139	; 0x8b
 800b072:	602b      	str	r3, [r5, #0]
 800b074:	f04f 30ff 	mov.w	r0, #4294967295
 800b078:	b01b      	add	sp, #108	; 0x6c
 800b07a:	bd30      	pop	{r4, r5, pc}
 800b07c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b080:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b084:	bf14      	ite	ne
 800b086:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b08a:	4623      	moveq	r3, r4
 800b08c:	9302      	str	r3, [sp, #8]
 800b08e:	9305      	str	r3, [sp, #20]
 800b090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b094:	9100      	str	r1, [sp, #0]
 800b096:	9104      	str	r1, [sp, #16]
 800b098:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b09c:	4602      	mov	r2, r0
 800b09e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b0a0:	4669      	mov	r1, sp
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	f000 f874 	bl	800b190 <_svfiprintf_r>
 800b0a8:	1c43      	adds	r3, r0, #1
 800b0aa:	bfbc      	itt	lt
 800b0ac:	238b      	movlt	r3, #139	; 0x8b
 800b0ae:	602b      	strlt	r3, [r5, #0]
 800b0b0:	2c00      	cmp	r4, #0
 800b0b2:	d0e1      	beq.n	800b078 <_vsniprintf_r+0x14>
 800b0b4:	9b00      	ldr	r3, [sp, #0]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	701a      	strb	r2, [r3, #0]
 800b0ba:	e7dd      	b.n	800b078 <_vsniprintf_r+0x14>

0800b0bc <vsniprintf>:
 800b0bc:	b507      	push	{r0, r1, r2, lr}
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	460a      	mov	r2, r1
 800b0c4:	4601      	mov	r1, r0
 800b0c6:	4803      	ldr	r0, [pc, #12]	; (800b0d4 <vsniprintf+0x18>)
 800b0c8:	6800      	ldr	r0, [r0, #0]
 800b0ca:	f7ff ffcb 	bl	800b064 <_vsniprintf_r>
 800b0ce:	b003      	add	sp, #12
 800b0d0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0d4:	20000024 	.word	0x20000024

0800b0d8 <__ssputs_r>:
 800b0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0dc:	688e      	ldr	r6, [r1, #8]
 800b0de:	429e      	cmp	r6, r3
 800b0e0:	4682      	mov	sl, r0
 800b0e2:	460c      	mov	r4, r1
 800b0e4:	4690      	mov	r8, r2
 800b0e6:	461f      	mov	r7, r3
 800b0e8:	d838      	bhi.n	800b15c <__ssputs_r+0x84>
 800b0ea:	898a      	ldrh	r2, [r1, #12]
 800b0ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b0f0:	d032      	beq.n	800b158 <__ssputs_r+0x80>
 800b0f2:	6825      	ldr	r5, [r4, #0]
 800b0f4:	6909      	ldr	r1, [r1, #16]
 800b0f6:	eba5 0901 	sub.w	r9, r5, r1
 800b0fa:	6965      	ldr	r5, [r4, #20]
 800b0fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b104:	3301      	adds	r3, #1
 800b106:	444b      	add	r3, r9
 800b108:	106d      	asrs	r5, r5, #1
 800b10a:	429d      	cmp	r5, r3
 800b10c:	bf38      	it	cc
 800b10e:	461d      	movcc	r5, r3
 800b110:	0553      	lsls	r3, r2, #21
 800b112:	d531      	bpl.n	800b178 <__ssputs_r+0xa0>
 800b114:	4629      	mov	r1, r5
 800b116:	f000 fb47 	bl	800b7a8 <_malloc_r>
 800b11a:	4606      	mov	r6, r0
 800b11c:	b950      	cbnz	r0, 800b134 <__ssputs_r+0x5c>
 800b11e:	230c      	movs	r3, #12
 800b120:	f8ca 3000 	str.w	r3, [sl]
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b12a:	81a3      	strh	r3, [r4, #12]
 800b12c:	f04f 30ff 	mov.w	r0, #4294967295
 800b130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b134:	6921      	ldr	r1, [r4, #16]
 800b136:	464a      	mov	r2, r9
 800b138:	f000 fabe 	bl	800b6b8 <memcpy>
 800b13c:	89a3      	ldrh	r3, [r4, #12]
 800b13e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b146:	81a3      	strh	r3, [r4, #12]
 800b148:	6126      	str	r6, [r4, #16]
 800b14a:	6165      	str	r5, [r4, #20]
 800b14c:	444e      	add	r6, r9
 800b14e:	eba5 0509 	sub.w	r5, r5, r9
 800b152:	6026      	str	r6, [r4, #0]
 800b154:	60a5      	str	r5, [r4, #8]
 800b156:	463e      	mov	r6, r7
 800b158:	42be      	cmp	r6, r7
 800b15a:	d900      	bls.n	800b15e <__ssputs_r+0x86>
 800b15c:	463e      	mov	r6, r7
 800b15e:	4632      	mov	r2, r6
 800b160:	6820      	ldr	r0, [r4, #0]
 800b162:	4641      	mov	r1, r8
 800b164:	f000 fab6 	bl	800b6d4 <memmove>
 800b168:	68a3      	ldr	r3, [r4, #8]
 800b16a:	6822      	ldr	r2, [r4, #0]
 800b16c:	1b9b      	subs	r3, r3, r6
 800b16e:	4432      	add	r2, r6
 800b170:	60a3      	str	r3, [r4, #8]
 800b172:	6022      	str	r2, [r4, #0]
 800b174:	2000      	movs	r0, #0
 800b176:	e7db      	b.n	800b130 <__ssputs_r+0x58>
 800b178:	462a      	mov	r2, r5
 800b17a:	f000 fb6f 	bl	800b85c <_realloc_r>
 800b17e:	4606      	mov	r6, r0
 800b180:	2800      	cmp	r0, #0
 800b182:	d1e1      	bne.n	800b148 <__ssputs_r+0x70>
 800b184:	6921      	ldr	r1, [r4, #16]
 800b186:	4650      	mov	r0, sl
 800b188:	f000 fabe 	bl	800b708 <_free_r>
 800b18c:	e7c7      	b.n	800b11e <__ssputs_r+0x46>
	...

0800b190 <_svfiprintf_r>:
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	4698      	mov	r8, r3
 800b196:	898b      	ldrh	r3, [r1, #12]
 800b198:	061b      	lsls	r3, r3, #24
 800b19a:	b09d      	sub	sp, #116	; 0x74
 800b19c:	4607      	mov	r7, r0
 800b19e:	460d      	mov	r5, r1
 800b1a0:	4614      	mov	r4, r2
 800b1a2:	d50e      	bpl.n	800b1c2 <_svfiprintf_r+0x32>
 800b1a4:	690b      	ldr	r3, [r1, #16]
 800b1a6:	b963      	cbnz	r3, 800b1c2 <_svfiprintf_r+0x32>
 800b1a8:	2140      	movs	r1, #64	; 0x40
 800b1aa:	f000 fafd 	bl	800b7a8 <_malloc_r>
 800b1ae:	6028      	str	r0, [r5, #0]
 800b1b0:	6128      	str	r0, [r5, #16]
 800b1b2:	b920      	cbnz	r0, 800b1be <_svfiprintf_r+0x2e>
 800b1b4:	230c      	movs	r3, #12
 800b1b6:	603b      	str	r3, [r7, #0]
 800b1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1bc:	e0d1      	b.n	800b362 <_svfiprintf_r+0x1d2>
 800b1be:	2340      	movs	r3, #64	; 0x40
 800b1c0:	616b      	str	r3, [r5, #20]
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b1c6:	2320      	movs	r3, #32
 800b1c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1d0:	2330      	movs	r3, #48	; 0x30
 800b1d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b37c <_svfiprintf_r+0x1ec>
 800b1d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1da:	f04f 0901 	mov.w	r9, #1
 800b1de:	4623      	mov	r3, r4
 800b1e0:	469a      	mov	sl, r3
 800b1e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1e6:	b10a      	cbz	r2, 800b1ec <_svfiprintf_r+0x5c>
 800b1e8:	2a25      	cmp	r2, #37	; 0x25
 800b1ea:	d1f9      	bne.n	800b1e0 <_svfiprintf_r+0x50>
 800b1ec:	ebba 0b04 	subs.w	fp, sl, r4
 800b1f0:	d00b      	beq.n	800b20a <_svfiprintf_r+0x7a>
 800b1f2:	465b      	mov	r3, fp
 800b1f4:	4622      	mov	r2, r4
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	4638      	mov	r0, r7
 800b1fa:	f7ff ff6d 	bl	800b0d8 <__ssputs_r>
 800b1fe:	3001      	adds	r0, #1
 800b200:	f000 80aa 	beq.w	800b358 <_svfiprintf_r+0x1c8>
 800b204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b206:	445a      	add	r2, fp
 800b208:	9209      	str	r2, [sp, #36]	; 0x24
 800b20a:	f89a 3000 	ldrb.w	r3, [sl]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	f000 80a2 	beq.w	800b358 <_svfiprintf_r+0x1c8>
 800b214:	2300      	movs	r3, #0
 800b216:	f04f 32ff 	mov.w	r2, #4294967295
 800b21a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b21e:	f10a 0a01 	add.w	sl, sl, #1
 800b222:	9304      	str	r3, [sp, #16]
 800b224:	9307      	str	r3, [sp, #28]
 800b226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b22a:	931a      	str	r3, [sp, #104]	; 0x68
 800b22c:	4654      	mov	r4, sl
 800b22e:	2205      	movs	r2, #5
 800b230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b234:	4851      	ldr	r0, [pc, #324]	; (800b37c <_svfiprintf_r+0x1ec>)
 800b236:	f7f4 ffd3 	bl	80001e0 <memchr>
 800b23a:	9a04      	ldr	r2, [sp, #16]
 800b23c:	b9d8      	cbnz	r0, 800b276 <_svfiprintf_r+0xe6>
 800b23e:	06d0      	lsls	r0, r2, #27
 800b240:	bf44      	itt	mi
 800b242:	2320      	movmi	r3, #32
 800b244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b248:	0711      	lsls	r1, r2, #28
 800b24a:	bf44      	itt	mi
 800b24c:	232b      	movmi	r3, #43	; 0x2b
 800b24e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b252:	f89a 3000 	ldrb.w	r3, [sl]
 800b256:	2b2a      	cmp	r3, #42	; 0x2a
 800b258:	d015      	beq.n	800b286 <_svfiprintf_r+0xf6>
 800b25a:	9a07      	ldr	r2, [sp, #28]
 800b25c:	4654      	mov	r4, sl
 800b25e:	2000      	movs	r0, #0
 800b260:	f04f 0c0a 	mov.w	ip, #10
 800b264:	4621      	mov	r1, r4
 800b266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b26a:	3b30      	subs	r3, #48	; 0x30
 800b26c:	2b09      	cmp	r3, #9
 800b26e:	d94e      	bls.n	800b30e <_svfiprintf_r+0x17e>
 800b270:	b1b0      	cbz	r0, 800b2a0 <_svfiprintf_r+0x110>
 800b272:	9207      	str	r2, [sp, #28]
 800b274:	e014      	b.n	800b2a0 <_svfiprintf_r+0x110>
 800b276:	eba0 0308 	sub.w	r3, r0, r8
 800b27a:	fa09 f303 	lsl.w	r3, r9, r3
 800b27e:	4313      	orrs	r3, r2
 800b280:	9304      	str	r3, [sp, #16]
 800b282:	46a2      	mov	sl, r4
 800b284:	e7d2      	b.n	800b22c <_svfiprintf_r+0x9c>
 800b286:	9b03      	ldr	r3, [sp, #12]
 800b288:	1d19      	adds	r1, r3, #4
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	9103      	str	r1, [sp, #12]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	bfbb      	ittet	lt
 800b292:	425b      	neglt	r3, r3
 800b294:	f042 0202 	orrlt.w	r2, r2, #2
 800b298:	9307      	strge	r3, [sp, #28]
 800b29a:	9307      	strlt	r3, [sp, #28]
 800b29c:	bfb8      	it	lt
 800b29e:	9204      	strlt	r2, [sp, #16]
 800b2a0:	7823      	ldrb	r3, [r4, #0]
 800b2a2:	2b2e      	cmp	r3, #46	; 0x2e
 800b2a4:	d10c      	bne.n	800b2c0 <_svfiprintf_r+0x130>
 800b2a6:	7863      	ldrb	r3, [r4, #1]
 800b2a8:	2b2a      	cmp	r3, #42	; 0x2a
 800b2aa:	d135      	bne.n	800b318 <_svfiprintf_r+0x188>
 800b2ac:	9b03      	ldr	r3, [sp, #12]
 800b2ae:	1d1a      	adds	r2, r3, #4
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	9203      	str	r2, [sp, #12]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	bfb8      	it	lt
 800b2b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2bc:	3402      	adds	r4, #2
 800b2be:	9305      	str	r3, [sp, #20]
 800b2c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b38c <_svfiprintf_r+0x1fc>
 800b2c4:	7821      	ldrb	r1, [r4, #0]
 800b2c6:	2203      	movs	r2, #3
 800b2c8:	4650      	mov	r0, sl
 800b2ca:	f7f4 ff89 	bl	80001e0 <memchr>
 800b2ce:	b140      	cbz	r0, 800b2e2 <_svfiprintf_r+0x152>
 800b2d0:	2340      	movs	r3, #64	; 0x40
 800b2d2:	eba0 000a 	sub.w	r0, r0, sl
 800b2d6:	fa03 f000 	lsl.w	r0, r3, r0
 800b2da:	9b04      	ldr	r3, [sp, #16]
 800b2dc:	4303      	orrs	r3, r0
 800b2de:	3401      	adds	r4, #1
 800b2e0:	9304      	str	r3, [sp, #16]
 800b2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2e6:	4826      	ldr	r0, [pc, #152]	; (800b380 <_svfiprintf_r+0x1f0>)
 800b2e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2ec:	2206      	movs	r2, #6
 800b2ee:	f7f4 ff77 	bl	80001e0 <memchr>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d038      	beq.n	800b368 <_svfiprintf_r+0x1d8>
 800b2f6:	4b23      	ldr	r3, [pc, #140]	; (800b384 <_svfiprintf_r+0x1f4>)
 800b2f8:	bb1b      	cbnz	r3, 800b342 <_svfiprintf_r+0x1b2>
 800b2fa:	9b03      	ldr	r3, [sp, #12]
 800b2fc:	3307      	adds	r3, #7
 800b2fe:	f023 0307 	bic.w	r3, r3, #7
 800b302:	3308      	adds	r3, #8
 800b304:	9303      	str	r3, [sp, #12]
 800b306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b308:	4433      	add	r3, r6
 800b30a:	9309      	str	r3, [sp, #36]	; 0x24
 800b30c:	e767      	b.n	800b1de <_svfiprintf_r+0x4e>
 800b30e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b312:	460c      	mov	r4, r1
 800b314:	2001      	movs	r0, #1
 800b316:	e7a5      	b.n	800b264 <_svfiprintf_r+0xd4>
 800b318:	2300      	movs	r3, #0
 800b31a:	3401      	adds	r4, #1
 800b31c:	9305      	str	r3, [sp, #20]
 800b31e:	4619      	mov	r1, r3
 800b320:	f04f 0c0a 	mov.w	ip, #10
 800b324:	4620      	mov	r0, r4
 800b326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b32a:	3a30      	subs	r2, #48	; 0x30
 800b32c:	2a09      	cmp	r2, #9
 800b32e:	d903      	bls.n	800b338 <_svfiprintf_r+0x1a8>
 800b330:	2b00      	cmp	r3, #0
 800b332:	d0c5      	beq.n	800b2c0 <_svfiprintf_r+0x130>
 800b334:	9105      	str	r1, [sp, #20]
 800b336:	e7c3      	b.n	800b2c0 <_svfiprintf_r+0x130>
 800b338:	fb0c 2101 	mla	r1, ip, r1, r2
 800b33c:	4604      	mov	r4, r0
 800b33e:	2301      	movs	r3, #1
 800b340:	e7f0      	b.n	800b324 <_svfiprintf_r+0x194>
 800b342:	ab03      	add	r3, sp, #12
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	462a      	mov	r2, r5
 800b348:	4b0f      	ldr	r3, [pc, #60]	; (800b388 <_svfiprintf_r+0x1f8>)
 800b34a:	a904      	add	r1, sp, #16
 800b34c:	4638      	mov	r0, r7
 800b34e:	f3af 8000 	nop.w
 800b352:	1c42      	adds	r2, r0, #1
 800b354:	4606      	mov	r6, r0
 800b356:	d1d6      	bne.n	800b306 <_svfiprintf_r+0x176>
 800b358:	89ab      	ldrh	r3, [r5, #12]
 800b35a:	065b      	lsls	r3, r3, #25
 800b35c:	f53f af2c 	bmi.w	800b1b8 <_svfiprintf_r+0x28>
 800b360:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b362:	b01d      	add	sp, #116	; 0x74
 800b364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b368:	ab03      	add	r3, sp, #12
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	462a      	mov	r2, r5
 800b36e:	4b06      	ldr	r3, [pc, #24]	; (800b388 <_svfiprintf_r+0x1f8>)
 800b370:	a904      	add	r1, sp, #16
 800b372:	4638      	mov	r0, r7
 800b374:	f000 f87a 	bl	800b46c <_printf_i>
 800b378:	e7eb      	b.n	800b352 <_svfiprintf_r+0x1c2>
 800b37a:	bf00      	nop
 800b37c:	0800c240 	.word	0x0800c240
 800b380:	0800c24a 	.word	0x0800c24a
 800b384:	00000000 	.word	0x00000000
 800b388:	0800b0d9 	.word	0x0800b0d9
 800b38c:	0800c246 	.word	0x0800c246

0800b390 <_printf_common>:
 800b390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b394:	4616      	mov	r6, r2
 800b396:	4699      	mov	r9, r3
 800b398:	688a      	ldr	r2, [r1, #8]
 800b39a:	690b      	ldr	r3, [r1, #16]
 800b39c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	bfb8      	it	lt
 800b3a4:	4613      	movlt	r3, r2
 800b3a6:	6033      	str	r3, [r6, #0]
 800b3a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3ac:	4607      	mov	r7, r0
 800b3ae:	460c      	mov	r4, r1
 800b3b0:	b10a      	cbz	r2, 800b3b6 <_printf_common+0x26>
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	6033      	str	r3, [r6, #0]
 800b3b6:	6823      	ldr	r3, [r4, #0]
 800b3b8:	0699      	lsls	r1, r3, #26
 800b3ba:	bf42      	ittt	mi
 800b3bc:	6833      	ldrmi	r3, [r6, #0]
 800b3be:	3302      	addmi	r3, #2
 800b3c0:	6033      	strmi	r3, [r6, #0]
 800b3c2:	6825      	ldr	r5, [r4, #0]
 800b3c4:	f015 0506 	ands.w	r5, r5, #6
 800b3c8:	d106      	bne.n	800b3d8 <_printf_common+0x48>
 800b3ca:	f104 0a19 	add.w	sl, r4, #25
 800b3ce:	68e3      	ldr	r3, [r4, #12]
 800b3d0:	6832      	ldr	r2, [r6, #0]
 800b3d2:	1a9b      	subs	r3, r3, r2
 800b3d4:	42ab      	cmp	r3, r5
 800b3d6:	dc26      	bgt.n	800b426 <_printf_common+0x96>
 800b3d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3dc:	1e13      	subs	r3, r2, #0
 800b3de:	6822      	ldr	r2, [r4, #0]
 800b3e0:	bf18      	it	ne
 800b3e2:	2301      	movne	r3, #1
 800b3e4:	0692      	lsls	r2, r2, #26
 800b3e6:	d42b      	bmi.n	800b440 <_printf_common+0xb0>
 800b3e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3ec:	4649      	mov	r1, r9
 800b3ee:	4638      	mov	r0, r7
 800b3f0:	47c0      	blx	r8
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	d01e      	beq.n	800b434 <_printf_common+0xa4>
 800b3f6:	6823      	ldr	r3, [r4, #0]
 800b3f8:	68e5      	ldr	r5, [r4, #12]
 800b3fa:	6832      	ldr	r2, [r6, #0]
 800b3fc:	f003 0306 	and.w	r3, r3, #6
 800b400:	2b04      	cmp	r3, #4
 800b402:	bf08      	it	eq
 800b404:	1aad      	subeq	r5, r5, r2
 800b406:	68a3      	ldr	r3, [r4, #8]
 800b408:	6922      	ldr	r2, [r4, #16]
 800b40a:	bf0c      	ite	eq
 800b40c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b410:	2500      	movne	r5, #0
 800b412:	4293      	cmp	r3, r2
 800b414:	bfc4      	itt	gt
 800b416:	1a9b      	subgt	r3, r3, r2
 800b418:	18ed      	addgt	r5, r5, r3
 800b41a:	2600      	movs	r6, #0
 800b41c:	341a      	adds	r4, #26
 800b41e:	42b5      	cmp	r5, r6
 800b420:	d11a      	bne.n	800b458 <_printf_common+0xc8>
 800b422:	2000      	movs	r0, #0
 800b424:	e008      	b.n	800b438 <_printf_common+0xa8>
 800b426:	2301      	movs	r3, #1
 800b428:	4652      	mov	r2, sl
 800b42a:	4649      	mov	r1, r9
 800b42c:	4638      	mov	r0, r7
 800b42e:	47c0      	blx	r8
 800b430:	3001      	adds	r0, #1
 800b432:	d103      	bne.n	800b43c <_printf_common+0xac>
 800b434:	f04f 30ff 	mov.w	r0, #4294967295
 800b438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b43c:	3501      	adds	r5, #1
 800b43e:	e7c6      	b.n	800b3ce <_printf_common+0x3e>
 800b440:	18e1      	adds	r1, r4, r3
 800b442:	1c5a      	adds	r2, r3, #1
 800b444:	2030      	movs	r0, #48	; 0x30
 800b446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b44a:	4422      	add	r2, r4
 800b44c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b454:	3302      	adds	r3, #2
 800b456:	e7c7      	b.n	800b3e8 <_printf_common+0x58>
 800b458:	2301      	movs	r3, #1
 800b45a:	4622      	mov	r2, r4
 800b45c:	4649      	mov	r1, r9
 800b45e:	4638      	mov	r0, r7
 800b460:	47c0      	blx	r8
 800b462:	3001      	adds	r0, #1
 800b464:	d0e6      	beq.n	800b434 <_printf_common+0xa4>
 800b466:	3601      	adds	r6, #1
 800b468:	e7d9      	b.n	800b41e <_printf_common+0x8e>
	...

0800b46c <_printf_i>:
 800b46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b470:	460c      	mov	r4, r1
 800b472:	4691      	mov	r9, r2
 800b474:	7e27      	ldrb	r7, [r4, #24]
 800b476:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b478:	2f78      	cmp	r7, #120	; 0x78
 800b47a:	4680      	mov	r8, r0
 800b47c:	469a      	mov	sl, r3
 800b47e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b482:	d807      	bhi.n	800b494 <_printf_i+0x28>
 800b484:	2f62      	cmp	r7, #98	; 0x62
 800b486:	d80a      	bhi.n	800b49e <_printf_i+0x32>
 800b488:	2f00      	cmp	r7, #0
 800b48a:	f000 80d8 	beq.w	800b63e <_printf_i+0x1d2>
 800b48e:	2f58      	cmp	r7, #88	; 0x58
 800b490:	f000 80a3 	beq.w	800b5da <_printf_i+0x16e>
 800b494:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b49c:	e03a      	b.n	800b514 <_printf_i+0xa8>
 800b49e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4a2:	2b15      	cmp	r3, #21
 800b4a4:	d8f6      	bhi.n	800b494 <_printf_i+0x28>
 800b4a6:	a001      	add	r0, pc, #4	; (adr r0, 800b4ac <_printf_i+0x40>)
 800b4a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b4ac:	0800b505 	.word	0x0800b505
 800b4b0:	0800b519 	.word	0x0800b519
 800b4b4:	0800b495 	.word	0x0800b495
 800b4b8:	0800b495 	.word	0x0800b495
 800b4bc:	0800b495 	.word	0x0800b495
 800b4c0:	0800b495 	.word	0x0800b495
 800b4c4:	0800b519 	.word	0x0800b519
 800b4c8:	0800b495 	.word	0x0800b495
 800b4cc:	0800b495 	.word	0x0800b495
 800b4d0:	0800b495 	.word	0x0800b495
 800b4d4:	0800b495 	.word	0x0800b495
 800b4d8:	0800b625 	.word	0x0800b625
 800b4dc:	0800b549 	.word	0x0800b549
 800b4e0:	0800b607 	.word	0x0800b607
 800b4e4:	0800b495 	.word	0x0800b495
 800b4e8:	0800b495 	.word	0x0800b495
 800b4ec:	0800b647 	.word	0x0800b647
 800b4f0:	0800b495 	.word	0x0800b495
 800b4f4:	0800b549 	.word	0x0800b549
 800b4f8:	0800b495 	.word	0x0800b495
 800b4fc:	0800b495 	.word	0x0800b495
 800b500:	0800b60f 	.word	0x0800b60f
 800b504:	680b      	ldr	r3, [r1, #0]
 800b506:	1d1a      	adds	r2, r3, #4
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	600a      	str	r2, [r1, #0]
 800b50c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b514:	2301      	movs	r3, #1
 800b516:	e0a3      	b.n	800b660 <_printf_i+0x1f4>
 800b518:	6825      	ldr	r5, [r4, #0]
 800b51a:	6808      	ldr	r0, [r1, #0]
 800b51c:	062e      	lsls	r6, r5, #24
 800b51e:	f100 0304 	add.w	r3, r0, #4
 800b522:	d50a      	bpl.n	800b53a <_printf_i+0xce>
 800b524:	6805      	ldr	r5, [r0, #0]
 800b526:	600b      	str	r3, [r1, #0]
 800b528:	2d00      	cmp	r5, #0
 800b52a:	da03      	bge.n	800b534 <_printf_i+0xc8>
 800b52c:	232d      	movs	r3, #45	; 0x2d
 800b52e:	426d      	negs	r5, r5
 800b530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b534:	485e      	ldr	r0, [pc, #376]	; (800b6b0 <_printf_i+0x244>)
 800b536:	230a      	movs	r3, #10
 800b538:	e019      	b.n	800b56e <_printf_i+0x102>
 800b53a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b53e:	6805      	ldr	r5, [r0, #0]
 800b540:	600b      	str	r3, [r1, #0]
 800b542:	bf18      	it	ne
 800b544:	b22d      	sxthne	r5, r5
 800b546:	e7ef      	b.n	800b528 <_printf_i+0xbc>
 800b548:	680b      	ldr	r3, [r1, #0]
 800b54a:	6825      	ldr	r5, [r4, #0]
 800b54c:	1d18      	adds	r0, r3, #4
 800b54e:	6008      	str	r0, [r1, #0]
 800b550:	0628      	lsls	r0, r5, #24
 800b552:	d501      	bpl.n	800b558 <_printf_i+0xec>
 800b554:	681d      	ldr	r5, [r3, #0]
 800b556:	e002      	b.n	800b55e <_printf_i+0xf2>
 800b558:	0669      	lsls	r1, r5, #25
 800b55a:	d5fb      	bpl.n	800b554 <_printf_i+0xe8>
 800b55c:	881d      	ldrh	r5, [r3, #0]
 800b55e:	4854      	ldr	r0, [pc, #336]	; (800b6b0 <_printf_i+0x244>)
 800b560:	2f6f      	cmp	r7, #111	; 0x6f
 800b562:	bf0c      	ite	eq
 800b564:	2308      	moveq	r3, #8
 800b566:	230a      	movne	r3, #10
 800b568:	2100      	movs	r1, #0
 800b56a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b56e:	6866      	ldr	r6, [r4, #4]
 800b570:	60a6      	str	r6, [r4, #8]
 800b572:	2e00      	cmp	r6, #0
 800b574:	bfa2      	ittt	ge
 800b576:	6821      	ldrge	r1, [r4, #0]
 800b578:	f021 0104 	bicge.w	r1, r1, #4
 800b57c:	6021      	strge	r1, [r4, #0]
 800b57e:	b90d      	cbnz	r5, 800b584 <_printf_i+0x118>
 800b580:	2e00      	cmp	r6, #0
 800b582:	d04d      	beq.n	800b620 <_printf_i+0x1b4>
 800b584:	4616      	mov	r6, r2
 800b586:	fbb5 f1f3 	udiv	r1, r5, r3
 800b58a:	fb03 5711 	mls	r7, r3, r1, r5
 800b58e:	5dc7      	ldrb	r7, [r0, r7]
 800b590:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b594:	462f      	mov	r7, r5
 800b596:	42bb      	cmp	r3, r7
 800b598:	460d      	mov	r5, r1
 800b59a:	d9f4      	bls.n	800b586 <_printf_i+0x11a>
 800b59c:	2b08      	cmp	r3, #8
 800b59e:	d10b      	bne.n	800b5b8 <_printf_i+0x14c>
 800b5a0:	6823      	ldr	r3, [r4, #0]
 800b5a2:	07df      	lsls	r7, r3, #31
 800b5a4:	d508      	bpl.n	800b5b8 <_printf_i+0x14c>
 800b5a6:	6923      	ldr	r3, [r4, #16]
 800b5a8:	6861      	ldr	r1, [r4, #4]
 800b5aa:	4299      	cmp	r1, r3
 800b5ac:	bfde      	ittt	le
 800b5ae:	2330      	movle	r3, #48	; 0x30
 800b5b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b5b8:	1b92      	subs	r2, r2, r6
 800b5ba:	6122      	str	r2, [r4, #16]
 800b5bc:	f8cd a000 	str.w	sl, [sp]
 800b5c0:	464b      	mov	r3, r9
 800b5c2:	aa03      	add	r2, sp, #12
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	4640      	mov	r0, r8
 800b5c8:	f7ff fee2 	bl	800b390 <_printf_common>
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	d14c      	bne.n	800b66a <_printf_i+0x1fe>
 800b5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d4:	b004      	add	sp, #16
 800b5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5da:	4835      	ldr	r0, [pc, #212]	; (800b6b0 <_printf_i+0x244>)
 800b5dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b5e0:	6823      	ldr	r3, [r4, #0]
 800b5e2:	680e      	ldr	r6, [r1, #0]
 800b5e4:	061f      	lsls	r7, r3, #24
 800b5e6:	f856 5b04 	ldr.w	r5, [r6], #4
 800b5ea:	600e      	str	r6, [r1, #0]
 800b5ec:	d514      	bpl.n	800b618 <_printf_i+0x1ac>
 800b5ee:	07d9      	lsls	r1, r3, #31
 800b5f0:	bf44      	itt	mi
 800b5f2:	f043 0320 	orrmi.w	r3, r3, #32
 800b5f6:	6023      	strmi	r3, [r4, #0]
 800b5f8:	b91d      	cbnz	r5, 800b602 <_printf_i+0x196>
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	f023 0320 	bic.w	r3, r3, #32
 800b600:	6023      	str	r3, [r4, #0]
 800b602:	2310      	movs	r3, #16
 800b604:	e7b0      	b.n	800b568 <_printf_i+0xfc>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	f043 0320 	orr.w	r3, r3, #32
 800b60c:	6023      	str	r3, [r4, #0]
 800b60e:	2378      	movs	r3, #120	; 0x78
 800b610:	4828      	ldr	r0, [pc, #160]	; (800b6b4 <_printf_i+0x248>)
 800b612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b616:	e7e3      	b.n	800b5e0 <_printf_i+0x174>
 800b618:	065e      	lsls	r6, r3, #25
 800b61a:	bf48      	it	mi
 800b61c:	b2ad      	uxthmi	r5, r5
 800b61e:	e7e6      	b.n	800b5ee <_printf_i+0x182>
 800b620:	4616      	mov	r6, r2
 800b622:	e7bb      	b.n	800b59c <_printf_i+0x130>
 800b624:	680b      	ldr	r3, [r1, #0]
 800b626:	6826      	ldr	r6, [r4, #0]
 800b628:	6960      	ldr	r0, [r4, #20]
 800b62a:	1d1d      	adds	r5, r3, #4
 800b62c:	600d      	str	r5, [r1, #0]
 800b62e:	0635      	lsls	r5, r6, #24
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	d501      	bpl.n	800b638 <_printf_i+0x1cc>
 800b634:	6018      	str	r0, [r3, #0]
 800b636:	e002      	b.n	800b63e <_printf_i+0x1d2>
 800b638:	0671      	lsls	r1, r6, #25
 800b63a:	d5fb      	bpl.n	800b634 <_printf_i+0x1c8>
 800b63c:	8018      	strh	r0, [r3, #0]
 800b63e:	2300      	movs	r3, #0
 800b640:	6123      	str	r3, [r4, #16]
 800b642:	4616      	mov	r6, r2
 800b644:	e7ba      	b.n	800b5bc <_printf_i+0x150>
 800b646:	680b      	ldr	r3, [r1, #0]
 800b648:	1d1a      	adds	r2, r3, #4
 800b64a:	600a      	str	r2, [r1, #0]
 800b64c:	681e      	ldr	r6, [r3, #0]
 800b64e:	6862      	ldr	r2, [r4, #4]
 800b650:	2100      	movs	r1, #0
 800b652:	4630      	mov	r0, r6
 800b654:	f7f4 fdc4 	bl	80001e0 <memchr>
 800b658:	b108      	cbz	r0, 800b65e <_printf_i+0x1f2>
 800b65a:	1b80      	subs	r0, r0, r6
 800b65c:	6060      	str	r0, [r4, #4]
 800b65e:	6863      	ldr	r3, [r4, #4]
 800b660:	6123      	str	r3, [r4, #16]
 800b662:	2300      	movs	r3, #0
 800b664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b668:	e7a8      	b.n	800b5bc <_printf_i+0x150>
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	4632      	mov	r2, r6
 800b66e:	4649      	mov	r1, r9
 800b670:	4640      	mov	r0, r8
 800b672:	47d0      	blx	sl
 800b674:	3001      	adds	r0, #1
 800b676:	d0ab      	beq.n	800b5d0 <_printf_i+0x164>
 800b678:	6823      	ldr	r3, [r4, #0]
 800b67a:	079b      	lsls	r3, r3, #30
 800b67c:	d413      	bmi.n	800b6a6 <_printf_i+0x23a>
 800b67e:	68e0      	ldr	r0, [r4, #12]
 800b680:	9b03      	ldr	r3, [sp, #12]
 800b682:	4298      	cmp	r0, r3
 800b684:	bfb8      	it	lt
 800b686:	4618      	movlt	r0, r3
 800b688:	e7a4      	b.n	800b5d4 <_printf_i+0x168>
 800b68a:	2301      	movs	r3, #1
 800b68c:	4632      	mov	r2, r6
 800b68e:	4649      	mov	r1, r9
 800b690:	4640      	mov	r0, r8
 800b692:	47d0      	blx	sl
 800b694:	3001      	adds	r0, #1
 800b696:	d09b      	beq.n	800b5d0 <_printf_i+0x164>
 800b698:	3501      	adds	r5, #1
 800b69a:	68e3      	ldr	r3, [r4, #12]
 800b69c:	9903      	ldr	r1, [sp, #12]
 800b69e:	1a5b      	subs	r3, r3, r1
 800b6a0:	42ab      	cmp	r3, r5
 800b6a2:	dcf2      	bgt.n	800b68a <_printf_i+0x21e>
 800b6a4:	e7eb      	b.n	800b67e <_printf_i+0x212>
 800b6a6:	2500      	movs	r5, #0
 800b6a8:	f104 0619 	add.w	r6, r4, #25
 800b6ac:	e7f5      	b.n	800b69a <_printf_i+0x22e>
 800b6ae:	bf00      	nop
 800b6b0:	0800c251 	.word	0x0800c251
 800b6b4:	0800c262 	.word	0x0800c262

0800b6b8 <memcpy>:
 800b6b8:	440a      	add	r2, r1
 800b6ba:	4291      	cmp	r1, r2
 800b6bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6c0:	d100      	bne.n	800b6c4 <memcpy+0xc>
 800b6c2:	4770      	bx	lr
 800b6c4:	b510      	push	{r4, lr}
 800b6c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6ce:	4291      	cmp	r1, r2
 800b6d0:	d1f9      	bne.n	800b6c6 <memcpy+0xe>
 800b6d2:	bd10      	pop	{r4, pc}

0800b6d4 <memmove>:
 800b6d4:	4288      	cmp	r0, r1
 800b6d6:	b510      	push	{r4, lr}
 800b6d8:	eb01 0402 	add.w	r4, r1, r2
 800b6dc:	d902      	bls.n	800b6e4 <memmove+0x10>
 800b6de:	4284      	cmp	r4, r0
 800b6e0:	4623      	mov	r3, r4
 800b6e2:	d807      	bhi.n	800b6f4 <memmove+0x20>
 800b6e4:	1e43      	subs	r3, r0, #1
 800b6e6:	42a1      	cmp	r1, r4
 800b6e8:	d008      	beq.n	800b6fc <memmove+0x28>
 800b6ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6f2:	e7f8      	b.n	800b6e6 <memmove+0x12>
 800b6f4:	4402      	add	r2, r0
 800b6f6:	4601      	mov	r1, r0
 800b6f8:	428a      	cmp	r2, r1
 800b6fa:	d100      	bne.n	800b6fe <memmove+0x2a>
 800b6fc:	bd10      	pop	{r4, pc}
 800b6fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b706:	e7f7      	b.n	800b6f8 <memmove+0x24>

0800b708 <_free_r>:
 800b708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b70a:	2900      	cmp	r1, #0
 800b70c:	d048      	beq.n	800b7a0 <_free_r+0x98>
 800b70e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b712:	9001      	str	r0, [sp, #4]
 800b714:	2b00      	cmp	r3, #0
 800b716:	f1a1 0404 	sub.w	r4, r1, #4
 800b71a:	bfb8      	it	lt
 800b71c:	18e4      	addlt	r4, r4, r3
 800b71e:	f000 f8d3 	bl	800b8c8 <__malloc_lock>
 800b722:	4a20      	ldr	r2, [pc, #128]	; (800b7a4 <_free_r+0x9c>)
 800b724:	9801      	ldr	r0, [sp, #4]
 800b726:	6813      	ldr	r3, [r2, #0]
 800b728:	4615      	mov	r5, r2
 800b72a:	b933      	cbnz	r3, 800b73a <_free_r+0x32>
 800b72c:	6063      	str	r3, [r4, #4]
 800b72e:	6014      	str	r4, [r2, #0]
 800b730:	b003      	add	sp, #12
 800b732:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b736:	f000 b8cd 	b.w	800b8d4 <__malloc_unlock>
 800b73a:	42a3      	cmp	r3, r4
 800b73c:	d90b      	bls.n	800b756 <_free_r+0x4e>
 800b73e:	6821      	ldr	r1, [r4, #0]
 800b740:	1862      	adds	r2, r4, r1
 800b742:	4293      	cmp	r3, r2
 800b744:	bf04      	itt	eq
 800b746:	681a      	ldreq	r2, [r3, #0]
 800b748:	685b      	ldreq	r3, [r3, #4]
 800b74a:	6063      	str	r3, [r4, #4]
 800b74c:	bf04      	itt	eq
 800b74e:	1852      	addeq	r2, r2, r1
 800b750:	6022      	streq	r2, [r4, #0]
 800b752:	602c      	str	r4, [r5, #0]
 800b754:	e7ec      	b.n	800b730 <_free_r+0x28>
 800b756:	461a      	mov	r2, r3
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	b10b      	cbz	r3, 800b760 <_free_r+0x58>
 800b75c:	42a3      	cmp	r3, r4
 800b75e:	d9fa      	bls.n	800b756 <_free_r+0x4e>
 800b760:	6811      	ldr	r1, [r2, #0]
 800b762:	1855      	adds	r5, r2, r1
 800b764:	42a5      	cmp	r5, r4
 800b766:	d10b      	bne.n	800b780 <_free_r+0x78>
 800b768:	6824      	ldr	r4, [r4, #0]
 800b76a:	4421      	add	r1, r4
 800b76c:	1854      	adds	r4, r2, r1
 800b76e:	42a3      	cmp	r3, r4
 800b770:	6011      	str	r1, [r2, #0]
 800b772:	d1dd      	bne.n	800b730 <_free_r+0x28>
 800b774:	681c      	ldr	r4, [r3, #0]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	6053      	str	r3, [r2, #4]
 800b77a:	4421      	add	r1, r4
 800b77c:	6011      	str	r1, [r2, #0]
 800b77e:	e7d7      	b.n	800b730 <_free_r+0x28>
 800b780:	d902      	bls.n	800b788 <_free_r+0x80>
 800b782:	230c      	movs	r3, #12
 800b784:	6003      	str	r3, [r0, #0]
 800b786:	e7d3      	b.n	800b730 <_free_r+0x28>
 800b788:	6825      	ldr	r5, [r4, #0]
 800b78a:	1961      	adds	r1, r4, r5
 800b78c:	428b      	cmp	r3, r1
 800b78e:	bf04      	itt	eq
 800b790:	6819      	ldreq	r1, [r3, #0]
 800b792:	685b      	ldreq	r3, [r3, #4]
 800b794:	6063      	str	r3, [r4, #4]
 800b796:	bf04      	itt	eq
 800b798:	1949      	addeq	r1, r1, r5
 800b79a:	6021      	streq	r1, [r4, #0]
 800b79c:	6054      	str	r4, [r2, #4]
 800b79e:	e7c7      	b.n	800b730 <_free_r+0x28>
 800b7a0:	b003      	add	sp, #12
 800b7a2:	bd30      	pop	{r4, r5, pc}
 800b7a4:	20000300 	.word	0x20000300

0800b7a8 <_malloc_r>:
 800b7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7aa:	1ccd      	adds	r5, r1, #3
 800b7ac:	f025 0503 	bic.w	r5, r5, #3
 800b7b0:	3508      	adds	r5, #8
 800b7b2:	2d0c      	cmp	r5, #12
 800b7b4:	bf38      	it	cc
 800b7b6:	250c      	movcc	r5, #12
 800b7b8:	2d00      	cmp	r5, #0
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	db01      	blt.n	800b7c2 <_malloc_r+0x1a>
 800b7be:	42a9      	cmp	r1, r5
 800b7c0:	d903      	bls.n	800b7ca <_malloc_r+0x22>
 800b7c2:	230c      	movs	r3, #12
 800b7c4:	6033      	str	r3, [r6, #0]
 800b7c6:	2000      	movs	r0, #0
 800b7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ca:	f000 f87d 	bl	800b8c8 <__malloc_lock>
 800b7ce:	4921      	ldr	r1, [pc, #132]	; (800b854 <_malloc_r+0xac>)
 800b7d0:	680a      	ldr	r2, [r1, #0]
 800b7d2:	4614      	mov	r4, r2
 800b7d4:	b99c      	cbnz	r4, 800b7fe <_malloc_r+0x56>
 800b7d6:	4f20      	ldr	r7, [pc, #128]	; (800b858 <_malloc_r+0xb0>)
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	b923      	cbnz	r3, 800b7e6 <_malloc_r+0x3e>
 800b7dc:	4621      	mov	r1, r4
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f000 f862 	bl	800b8a8 <_sbrk_r>
 800b7e4:	6038      	str	r0, [r7, #0]
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f000 f85d 	bl	800b8a8 <_sbrk_r>
 800b7ee:	1c43      	adds	r3, r0, #1
 800b7f0:	d123      	bne.n	800b83a <_malloc_r+0x92>
 800b7f2:	230c      	movs	r3, #12
 800b7f4:	6033      	str	r3, [r6, #0]
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f000 f86c 	bl	800b8d4 <__malloc_unlock>
 800b7fc:	e7e3      	b.n	800b7c6 <_malloc_r+0x1e>
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	1b5b      	subs	r3, r3, r5
 800b802:	d417      	bmi.n	800b834 <_malloc_r+0x8c>
 800b804:	2b0b      	cmp	r3, #11
 800b806:	d903      	bls.n	800b810 <_malloc_r+0x68>
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	441c      	add	r4, r3
 800b80c:	6025      	str	r5, [r4, #0]
 800b80e:	e004      	b.n	800b81a <_malloc_r+0x72>
 800b810:	6863      	ldr	r3, [r4, #4]
 800b812:	42a2      	cmp	r2, r4
 800b814:	bf0c      	ite	eq
 800b816:	600b      	streq	r3, [r1, #0]
 800b818:	6053      	strne	r3, [r2, #4]
 800b81a:	4630      	mov	r0, r6
 800b81c:	f000 f85a 	bl	800b8d4 <__malloc_unlock>
 800b820:	f104 000b 	add.w	r0, r4, #11
 800b824:	1d23      	adds	r3, r4, #4
 800b826:	f020 0007 	bic.w	r0, r0, #7
 800b82a:	1ac2      	subs	r2, r0, r3
 800b82c:	d0cc      	beq.n	800b7c8 <_malloc_r+0x20>
 800b82e:	1a1b      	subs	r3, r3, r0
 800b830:	50a3      	str	r3, [r4, r2]
 800b832:	e7c9      	b.n	800b7c8 <_malloc_r+0x20>
 800b834:	4622      	mov	r2, r4
 800b836:	6864      	ldr	r4, [r4, #4]
 800b838:	e7cc      	b.n	800b7d4 <_malloc_r+0x2c>
 800b83a:	1cc4      	adds	r4, r0, #3
 800b83c:	f024 0403 	bic.w	r4, r4, #3
 800b840:	42a0      	cmp	r0, r4
 800b842:	d0e3      	beq.n	800b80c <_malloc_r+0x64>
 800b844:	1a21      	subs	r1, r4, r0
 800b846:	4630      	mov	r0, r6
 800b848:	f000 f82e 	bl	800b8a8 <_sbrk_r>
 800b84c:	3001      	adds	r0, #1
 800b84e:	d1dd      	bne.n	800b80c <_malloc_r+0x64>
 800b850:	e7cf      	b.n	800b7f2 <_malloc_r+0x4a>
 800b852:	bf00      	nop
 800b854:	20000300 	.word	0x20000300
 800b858:	20000304 	.word	0x20000304

0800b85c <_realloc_r>:
 800b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85e:	4607      	mov	r7, r0
 800b860:	4614      	mov	r4, r2
 800b862:	460e      	mov	r6, r1
 800b864:	b921      	cbnz	r1, 800b870 <_realloc_r+0x14>
 800b866:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b86a:	4611      	mov	r1, r2
 800b86c:	f7ff bf9c 	b.w	800b7a8 <_malloc_r>
 800b870:	b922      	cbnz	r2, 800b87c <_realloc_r+0x20>
 800b872:	f7ff ff49 	bl	800b708 <_free_r>
 800b876:	4625      	mov	r5, r4
 800b878:	4628      	mov	r0, r5
 800b87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b87c:	f000 f830 	bl	800b8e0 <_malloc_usable_size_r>
 800b880:	42a0      	cmp	r0, r4
 800b882:	d20f      	bcs.n	800b8a4 <_realloc_r+0x48>
 800b884:	4621      	mov	r1, r4
 800b886:	4638      	mov	r0, r7
 800b888:	f7ff ff8e 	bl	800b7a8 <_malloc_r>
 800b88c:	4605      	mov	r5, r0
 800b88e:	2800      	cmp	r0, #0
 800b890:	d0f2      	beq.n	800b878 <_realloc_r+0x1c>
 800b892:	4631      	mov	r1, r6
 800b894:	4622      	mov	r2, r4
 800b896:	f7ff ff0f 	bl	800b6b8 <memcpy>
 800b89a:	4631      	mov	r1, r6
 800b89c:	4638      	mov	r0, r7
 800b89e:	f7ff ff33 	bl	800b708 <_free_r>
 800b8a2:	e7e9      	b.n	800b878 <_realloc_r+0x1c>
 800b8a4:	4635      	mov	r5, r6
 800b8a6:	e7e7      	b.n	800b878 <_realloc_r+0x1c>

0800b8a8 <_sbrk_r>:
 800b8a8:	b538      	push	{r3, r4, r5, lr}
 800b8aa:	4d06      	ldr	r5, [pc, #24]	; (800b8c4 <_sbrk_r+0x1c>)
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	4608      	mov	r0, r1
 800b8b2:	602b      	str	r3, [r5, #0]
 800b8b4:	f7f5 fa38 	bl	8000d28 <_sbrk>
 800b8b8:	1c43      	adds	r3, r0, #1
 800b8ba:	d102      	bne.n	800b8c2 <_sbrk_r+0x1a>
 800b8bc:	682b      	ldr	r3, [r5, #0]
 800b8be:	b103      	cbz	r3, 800b8c2 <_sbrk_r+0x1a>
 800b8c0:	6023      	str	r3, [r4, #0]
 800b8c2:	bd38      	pop	{r3, r4, r5, pc}
 800b8c4:	20000890 	.word	0x20000890

0800b8c8 <__malloc_lock>:
 800b8c8:	4801      	ldr	r0, [pc, #4]	; (800b8d0 <__malloc_lock+0x8>)
 800b8ca:	f000 b811 	b.w	800b8f0 <__retarget_lock_acquire_recursive>
 800b8ce:	bf00      	nop
 800b8d0:	20000898 	.word	0x20000898

0800b8d4 <__malloc_unlock>:
 800b8d4:	4801      	ldr	r0, [pc, #4]	; (800b8dc <__malloc_unlock+0x8>)
 800b8d6:	f000 b80c 	b.w	800b8f2 <__retarget_lock_release_recursive>
 800b8da:	bf00      	nop
 800b8dc:	20000898 	.word	0x20000898

0800b8e0 <_malloc_usable_size_r>:
 800b8e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8e4:	1f18      	subs	r0, r3, #4
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	bfbc      	itt	lt
 800b8ea:	580b      	ldrlt	r3, [r1, r0]
 800b8ec:	18c0      	addlt	r0, r0, r3
 800b8ee:	4770      	bx	lr

0800b8f0 <__retarget_lock_acquire_recursive>:
 800b8f0:	4770      	bx	lr

0800b8f2 <__retarget_lock_release_recursive>:
 800b8f2:	4770      	bx	lr

0800b8f4 <_init>:
 800b8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f6:	bf00      	nop
 800b8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8fa:	bc08      	pop	{r3}
 800b8fc:	469e      	mov	lr, r3
 800b8fe:	4770      	bx	lr

0800b900 <_fini>:
 800b900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b902:	bf00      	nop
 800b904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b906:	bc08      	pop	{r3}
 800b908:	469e      	mov	lr, r3
 800b90a:	4770      	bx	lr
