
stm32f411ceu6_fw_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a54  0800bb9c  0800bb9c  0001bb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5f0  0800c5f0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5f0  0800c5f0  0001c5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5f8  0800c5f8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5f8  0800c5f8  0001c5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5fc  0800c5fc  0001c5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800c600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000818  20000088  0800c688  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  0800c688  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ec5  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000396f  00000000  00000000  00039f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  0003d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  0003e840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a050  00000000  00000000  0003f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019834  00000000  00000000  00059658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d960  00000000  00000000  00072e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001007ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004020  00000000  00000000  00100840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bb84 	.word	0x0800bb84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800bb84 	.word	0x0800bb84

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <apInit>:




 void apInit(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	 uartOpen(_DEF_UART1, 115200); //UART 개통
 800057c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000580:	2000      	movs	r0, #0
 8000582:	f001 fa7b 	bl	8001a7c <uartOpen>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <fatfsDir>:
}


#ifdef _USE_HW_UART
FRESULT fatfsDir(char* path)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b0d8      	sub	sp, #352	; 0x160
 8000590:	af02      	add	r7, sp, #8
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	6018      	str	r0, [r3, #0]
  FRESULT res;
  DIR dir;
  FILINFO fno;


  res = f_opendir(&dir, path);                       /* Open the directory */
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800059c:	6819      	ldr	r1, [r3, #0]
 800059e:	4610      	mov	r0, r2
 80005a0:	f005 f8ff 	bl	80057a2 <f_opendir>
 80005a4:	4603      	mov	r3, r0
 80005a6:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  if (res == FR_OK)
 80005aa:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d138      	bne.n	8000624 <fatfsDir+0x98>
  {
    for (;;)
    {
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80005b2:	f107 0208 	add.w	r2, r7, #8
 80005b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005ba:	4611      	mov	r1, r2
 80005bc:	4618      	mov	r0, r3
 80005be:	f005 f9b4 	bl	800592a <f_readdir>
 80005c2:	4603      	mov	r3, r0
 80005c4:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80005c8:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d124      	bne.n	800061a <fatfsDir+0x8e>
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	7d9b      	ldrb	r3, [r3, #22]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d01f      	beq.n	800061a <fatfsDir+0x8e>
      if (fno.fattrib & AM_DIR)
 80005da:	f107 0308 	add.w	r3, r7, #8
 80005de:	7a1b      	ldrb	r3, [r3, #8]
 80005e0:	f003 0310 	and.w	r3, r3, #16
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d009      	beq.n	80005fc <fatfsDir+0x70>
      {                    				/* It is a directory */
    	uartPrintf(_DEF_UART1," %s/%s \n", path, fno.fname);
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	3316      	adds	r3, #22
 80005ee:	1d3a      	adds	r2, r7, #4
 80005f0:	6812      	ldr	r2, [r2, #0]
 80005f2:	4910      	ldr	r1, [pc, #64]	; (8000634 <fatfsDir+0xa8>)
 80005f4:	2000      	movs	r0, #0
 80005f6:	f001 fc47 	bl	8001e88 <uartPrintf>
 80005fa:	e7da      	b.n	80005b2 <fatfsDir+0x26>
      }
      else
      {                                      		 /* It is a file. */
        uartPrintf(_DEF_UART1," %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4619      	mov	r1, r3
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	3316      	adds	r3, #22
 800060a:	1d3a      	adds	r2, r7, #4
 800060c:	9100      	str	r1, [sp, #0]
 800060e:	6812      	ldr	r2, [r2, #0]
 8000610:	4909      	ldr	r1, [pc, #36]	; (8000638 <fatfsDir+0xac>)
 8000612:	2000      	movs	r0, #0
 8000614:	f001 fc38 	bl	8001e88 <uartPrintf>
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000618:	e7cb      	b.n	80005b2 <fatfsDir+0x26>
      }
    }
    f_closedir(&dir);
 800061a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800061e:	4618      	mov	r0, r3
 8000620:	f005 f95d 	bl	80058de <f_closedir>
  }

  return res;
 8000624:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8000628:	4618      	mov	r0, r3
 800062a:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	0800bbc8 	.word	0x0800bbc8
 8000638:	0800bbd4 	.word	0x0800bbd4

0800063c <apSDCardTest>:
#endif /* _USE_HW_UART */


void apSDCardTest(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8000642:	af02      	add	r7, sp, #8
    */


    /* SDIO CD Pin을 사용하여 SD카드를 HW적으로 감지수행.. 만약 true(1) 라면 SD 카드가 꼿혀있음을 의미 */

    if (sdIsDetected() == true) //sd card detected
 8000644:	f000 ff9c 	bl	8001580 <sdIsDetected>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d004      	beq.n	8000658 <apSDCardTest+0x1c>
    {
        uartPrintf(_DEF_UART1, "sd connected..\n");
 800064e:	49c4      	ldr	r1, [pc, #784]	; (8000960 <apSDCardTest+0x324>)
 8000650:	2000      	movs	r0, #0
 8000652:	f001 fc19 	bl	8001e88 <uartPrintf>
 8000656:	e003      	b.n	8000660 <apSDCardTest+0x24>
    }

    else //sd card not detected
    {
        uartPrintf(_DEF_UART1, "sd disconnected..\n");
 8000658:	49c2      	ldr	r1, [pc, #776]	; (8000964 <apSDCardTest+0x328>)
 800065a:	2000      	movs	r0, #0
 800065c:	f001 fc14 	bl	8001e88 <uartPrintf>
    }


    uartPrintf(_DEF_UART1, "\n========================================\n\n");
 8000660:	49c1      	ldr	r1, [pc, #772]	; (8000968 <apSDCardTest+0x32c>)
 8000662:	2000      	movs	r0, #0
 8000664:	f001 fc10 	bl	8001e88 <uartPrintf>

    sd_info_t sd_info;

    /* SD Card의 정보를 출력, Get SD Card information*/

    if (sdGetInfo(&sd_info) == true)
 8000668:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800066c:	4618      	mov	r0, r3
 800066e:	f000 ff9d 	bl	80015ac <sdGetInfo>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d053      	beq.n	8000720 <apSDCardTest+0xe4>
    {
    	uartPrintf(_DEF_UART1,"   card_type            : %d\n", sd_info.card_type);
 8000678:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800067c:	461a      	mov	r2, r3
 800067e:	49bb      	ldr	r1, [pc, #748]	; (800096c <apSDCardTest+0x330>)
 8000680:	2000      	movs	r0, #0
 8000682:	f001 fc01 	bl	8001e88 <uartPrintf>
    	uartPrintf(_DEF_UART1,"   card_version         : %d\n", sd_info.card_version);
 8000686:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800068a:	461a      	mov	r2, r3
 800068c:	49b8      	ldr	r1, [pc, #736]	; (8000970 <apSDCardTest+0x334>)
 800068e:	2000      	movs	r0, #0
 8000690:	f001 fbfa 	bl	8001e88 <uartPrintf>
    	uartPrintf(_DEF_UART1,"   card_class           : %d\n", sd_info.card_class);
 8000694:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8000698:	461a      	mov	r2, r3
 800069a:	49b6      	ldr	r1, [pc, #728]	; (8000974 <apSDCardTest+0x338>)
 800069c:	2000      	movs	r0, #0
 800069e:	f001 fbf3 	bl	8001e88 <uartPrintf>
    	uartPrintf(_DEF_UART1,"   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 80006a2:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80006a6:	461a      	mov	r2, r3
 80006a8:	49b3      	ldr	r1, [pc, #716]	; (8000978 <apSDCardTest+0x33c>)
 80006aa:	2000      	movs	r0, #0
 80006ac:	f001 fbec 	bl	8001e88 <uartPrintf>
    	uartPrintf(_DEF_UART1,"   block_numbers        : %d\n", sd_info.block_numbers);
 80006b0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80006b4:	461a      	mov	r2, r3
 80006b6:	49b1      	ldr	r1, [pc, #708]	; (800097c <apSDCardTest+0x340>)
 80006b8:	2000      	movs	r0, #0
 80006ba:	f001 fbe5 	bl	8001e88 <uartPrintf>
    	uartPrintf(_DEF_UART1,"   block_size           : %d\n", sd_info.block_size);
 80006be:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80006c2:	461a      	mov	r2, r3
 80006c4:	49ae      	ldr	r1, [pc, #696]	; (8000980 <apSDCardTest+0x344>)
 80006c6:	2000      	movs	r0, #0
 80006c8:	f001 fbde 	bl	8001e88 <uartPrintf>
    	uartPrintf(_DEF_UART1,"   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 80006cc:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80006d0:	461a      	mov	r2, r3
 80006d2:	49ac      	ldr	r1, [pc, #688]	; (8000984 <apSDCardTest+0x348>)
 80006d4:	2000      	movs	r0, #0
 80006d6:	f001 fbd7 	bl	8001e88 <uartPrintf>
    	uartPrintf(_DEF_UART1,"   log_block_size       : %d\n", sd_info.log_block_size);
 80006da:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80006de:	461a      	mov	r2, r3
 80006e0:	49a9      	ldr	r1, [pc, #676]	; (8000988 <apSDCardTest+0x34c>)
 80006e2:	2000      	movs	r0, #0
 80006e4:	f001 fbd0 	bl	8001e88 <uartPrintf>
    	uartPrintf(_DEF_UART1,"   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 80006e8:	f8d7 0460 	ldr.w	r0, [r7, #1120]	; 0x460
 80006ec:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80006f0:	0a9c      	lsrs	r4, r3, #10
 80006f2:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 80006f6:	4613      	mov	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	4413      	add	r3, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	0a99      	lsrs	r1, r3, #10
 8000700:	4ba2      	ldr	r3, [pc, #648]	; (800098c <apSDCardTest+0x350>)
 8000702:	fba3 2301 	umull	r2, r3, r3, r1
 8000706:	08da      	lsrs	r2, r3, #3
 8000708:	4613      	mov	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	1aca      	subs	r2, r1, r3
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	4623      	mov	r3, r4
 8000716:	4602      	mov	r2, r0
 8000718:	499d      	ldr	r1, [pc, #628]	; (8000990 <apSDCardTest+0x354>)
 800071a:	2000      	movs	r0, #0
 800071c:	f001 fbb4 	bl	8001e88 <uartPrintf>
    }


    uartPrintf(_DEF_UART1, "\n========================================\n\n");
 8000720:	4991      	ldr	r1, [pc, #580]	; (8000968 <apSDCardTest+0x32c>)
 8000722:	2000      	movs	r0, #0
 8000724:	f001 fbb0 	bl	8001e88 <uartPrintf>



    char rx_data;

	uint32_t number = 0; // SD Card의 메모리 정보를 읽을 메모리 블럭 number 설정, Set number to read SD Card memory blocks
 8000728:	2300      	movs	r3, #0
 800072a:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
	uint32_t pre_time;


    while (1)
    {
		if (uartAvailable(_DEF_UART1) > 0)
 800072e:	2000      	movs	r0, #0
 8000730:	f001 fabc 	bl	8001cac <uartAvailable>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	f000 81dd 	beq.w	8000af6 <apSDCardTest+0x4ba>
		{

		    uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n");
 800073c:	4995      	ldr	r1, [pc, #596]	; (8000994 <apSDCardTest+0x358>)
 800073e:	2000      	movs	r0, #0
 8000740:	f001 fba2 	bl	8001e88 <uartPrintf>
			uartPrintf(_DEF_UART1, "Select the SD Card Test...\n");
 8000744:	4994      	ldr	r1, [pc, #592]	; (8000998 <apSDCardTest+0x35c>)
 8000746:	2000      	movs	r0, #0
 8000748:	f001 fb9e 	bl	8001e88 <uartPrintf>
		    uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n");
 800074c:	4991      	ldr	r1, [pc, #580]	; (8000994 <apSDCardTest+0x358>)
 800074e:	2000      	movs	r0, #0
 8000750:	f001 fb9a 	bl	8001e88 <uartPrintf>
			uartPrintf(_DEF_UART1, "Option | Description\n");
 8000754:	4991      	ldr	r1, [pc, #580]	; (800099c <apSDCardTest+0x360>)
 8000756:	2000      	movs	r0, #0
 8000758:	f001 fb96 	bl	8001e88 <uartPrintf>
		    uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n");
 800075c:	498d      	ldr	r1, [pc, #564]	; (8000994 <apSDCardTest+0x358>)
 800075e:	2000      	movs	r0, #0
 8000760:	f001 fb92 	bl	8001e88 <uartPrintf>
		    uartPrintf(_DEF_UART1, "  a    | Read physical memory (number 0) information of SD card\n");
 8000764:	498e      	ldr	r1, [pc, #568]	; (80009a0 <apSDCardTest+0x364>)
 8000766:	2000      	movs	r0, #0
 8000768:	f001 fb8e 	bl	8001e88 <uartPrintf>
			uartPrintf(_DEF_UART1, "  b    | Get volume information and print the free space 1\n");
 800076c:	498d      	ldr	r1, [pc, #564]	; (80009a4 <apSDCardTest+0x368>)
 800076e:	2000      	movs	r0, #0
 8000770:	f001 fb8a 	bl	8001e88 <uartPrintf>
			uartPrintf(_DEF_UART1, "  c    | Open the directory and Read a directory item or file name & size\n");
 8000774:	498c      	ldr	r1, [pc, #560]	; (80009a8 <apSDCardTest+0x36c>)
 8000776:	2000      	movs	r0, #0
 8000778:	f001 fb86 	bl	8001e88 <uartPrintf>
			uartPrintf(_DEF_UART1, "  d    | Create a HelloWorld.csv file and perform a w/r operation.\n");
 800077c:	498b      	ldr	r1, [pc, #556]	; (80009ac <apSDCardTest+0x370>)
 800077e:	2000      	movs	r0, #0
 8000780:	f001 fb82 	bl	8001e88 <uartPrintf>
			uartPrintf(_DEF_UART1, "  e    | Delete HelloWorld.csv file and Read a directory item or file name & size\n");
 8000784:	498a      	ldr	r1, [pc, #552]	; (80009b0 <apSDCardTest+0x374>)
 8000786:	2000      	movs	r0, #0
 8000788:	f001 fb7e 	bl	8001e88 <uartPrintf>
			uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n");
 800078c:	4981      	ldr	r1, [pc, #516]	; (8000994 <apSDCardTest+0x358>)
 800078e:	2000      	movs	r0, #0
 8000790:	f001 fb7a 	bl	8001e88 <uartPrintf>

		    uartPrintf(_DEF_UART1, "\n");
 8000794:	4987      	ldr	r1, [pc, #540]	; (80009b4 <apSDCardTest+0x378>)
 8000796:	2000      	movs	r0, #0
 8000798:	f001 fb76 	bl	8001e88 <uartPrintf>

			rx_data = uartRead(_DEF_UART1);
 800079c:	2000      	movs	r0, #0
 800079e:	f001 facd 	bl	8001d3c <uartRead>
 80007a2:	4603      	mov	r3, r0
 80007a4:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
			uartPrintf(_DEF_UART1,"Option : %c\n", rx_data);
 80007a8:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 80007ac:	461a      	mov	r2, r3
 80007ae:	4982      	ldr	r1, [pc, #520]	; (80009b8 <apSDCardTest+0x37c>)
 80007b0:	2000      	movs	r0, #0
 80007b2:	f001 fb69 	bl	8001e88 <uartPrintf>

		    uartPrintf(_DEF_UART1, "\n");
 80007b6:	497f      	ldr	r1, [pc, #508]	; (80009b4 <apSDCardTest+0x378>)
 80007b8:	2000      	movs	r0, #0
 80007ba:	f001 fb65 	bl	8001e88 <uartPrintf>

			switch(rx_data)
 80007be:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 80007c2:	3b61      	subs	r3, #97	; 0x61
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	f200 8198 	bhi.w	8000afa <apSDCardTest+0x4be>
 80007ca:	a201      	add	r2, pc, #4	; (adr r2, 80007d0 <apSDCardTest+0x194>)
 80007cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d0:	080007e5 	.word	0x080007e5
 80007d4:	0800084b 	.word	0x0800084b
 80007d8:	080008c9 	.word	0x080008c9
 80007dc:	080008f5 	.word	0x080008f5
 80007e0:	08000a8f 	.word	0x08000a8f
			{
				case 'a':
				    /* SD Card의 메모리 블럭의 정보 읽기 */

					if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 80007e4:	f507 7110 	add.w	r1, r7, #576	; 0x240
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	2201      	movs	r2, #1
 80007ec:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80007f0:	f000 ff68 	bl	80016c4 <sdReadBlocks>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d01e      	beq.n	8000838 <apSDCardTest+0x1fc>
				    {
				      for (int i=0; i<512/4; i++)
 80007fa:	2300      	movs	r3, #0
 80007fc:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8000800:	e015      	b.n	800082e <apSDCardTest+0x1f2>
				      {
				    	 uartPrintf(_DEF_UART1,"%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 8000802:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8000806:	0099      	lsls	r1, r3, #2
 8000808:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800080c:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8000810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	460b      	mov	r3, r1
 8000818:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 800081c:	4967      	ldr	r1, [pc, #412]	; (80009bc <apSDCardTest+0x380>)
 800081e:	2000      	movs	r0, #0
 8000820:	f001 fb32 	bl	8001e88 <uartPrintf>
				      for (int i=0; i<512/4; i++)
 8000824:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8000828:	3301      	adds	r3, #1
 800082a:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800082e:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8000832:	2b7f      	cmp	r3, #127	; 0x7f
 8000834:	dde5      	ble.n	8000802 <apSDCardTest+0x1c6>
 8000836:	e003      	b.n	8000840 <apSDCardTest+0x204>
				      }
				    }

				    else
				    {
				    	uartPrintf(_DEF_UART1,"sd read fail...\n\n");
 8000838:	4961      	ldr	r1, [pc, #388]	; (80009c0 <apSDCardTest+0x384>)
 800083a:	2000      	movs	r0, #0
 800083c:	f001 fb24 	bl	8001e88 <uartPrintf>
				    }

				    uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n\n");
 8000840:	4960      	ldr	r1, [pc, #384]	; (80009c4 <apSDCardTest+0x388>)
 8000842:	2000      	movs	r0, #0
 8000844:	f001 fb20 	bl	8001e88 <uartPrintf>
				    break;
 8000848:	e158      	b.n	8000afc <apSDCardTest+0x4c0>

				case 'b':
					/* FATFS32 파일시스템 구조를 가지는  첫번째 드라이버 전체 볼륨(크기)과 남아있는 용량 출력 */

					/* Get volume information and free clusters of drive 1 */
					res = f_getfree("", &fre_clust, &fs);
 800084a:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 800084e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000852:	4619      	mov	r1, r3
 8000854:	485c      	ldr	r0, [pc, #368]	; (80009c8 <apSDCardTest+0x38c>)
 8000856:	f005 f8c0 	bl	80059da <f_getfree>
 800085a:	4603      	mov	r3, r0
 800085c:	f887 3472 	strb.w	r3, [r7, #1138]	; 0x472
					if (res == FR_OK)
 8000860:	f897 3472 	ldrb.w	r3, [r7, #1138]	; 0x472
 8000864:	2b00      	cmp	r3, #0
 8000866:	d123      	bne.n	80008b0 <apSDCardTest+0x274>
					{
					    /* Get total sectors and free sectors */
					    tot_sect = (fs->n_fatent - 2) * fs->csize;
 8000868:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	3b02      	subs	r3, #2
 8000872:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8000876:	6812      	ldr	r2, [r2, #0]
 8000878:	8952      	ldrh	r2, [r2, #10]
 800087a:	fb02 f303 	mul.w	r3, r2, r3
 800087e:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
					    fre_sect = fre_clust * fs->csize;
 8000882:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	895b      	ldrh	r3, [r3, #10]
 800088a:	461a      	mov	r2, r3
 800088c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	fb03 f302 	mul.w	r3, r3, r2
 8000896:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464

					    /* Print the free space (assuming 512 bytes/sector) */
					    uartPrintf(_DEF_UART1,"%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
 800089a:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800089e:	085a      	lsrs	r2, r3, #1
 80008a0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	4949      	ldr	r1, [pc, #292]	; (80009cc <apSDCardTest+0x390>)
 80008a8:	2000      	movs	r0, #0
 80008aa:	f001 faed 	bl	8001e88 <uartPrintf>
 80008ae:	e006      	b.n	80008be <apSDCardTest+0x282>
					 }

					else
					{
						uartPrintf(_DEF_UART1," err : %d\n\n", res);
 80008b0:	f897 3472 	ldrb.w	r3, [r7, #1138]	; 0x472
 80008b4:	461a      	mov	r2, r3
 80008b6:	4946      	ldr	r1, [pc, #280]	; (80009d0 <apSDCardTest+0x394>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 fae5 	bl	8001e88 <uartPrintf>
					}

				    uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n\n");
 80008be:	4941      	ldr	r1, [pc, #260]	; (80009c4 <apSDCardTest+0x388>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 fae1 	bl	8001e88 <uartPrintf>
					break;
 80008c6:	e119      	b.n	8000afc <apSDCardTest+0x4c0>

				case 'c':
					/* FATFS32 파일시스템 구조를 가지는  첫번째 드라이버의  root 디렉토리에 있는  폴더 이름 또는 파일 이름과 용량을 출력 */

					/* "/" : root 디렉토리 */
					res = fatfsDir("/");
 80008c8:	4842      	ldr	r0, [pc, #264]	; (80009d4 <apSDCardTest+0x398>)
 80008ca:	f7ff fe5f 	bl	800058c <fatfsDir>
 80008ce:	4603      	mov	r3, r0
 80008d0:	f887 3472 	strb.w	r3, [r7, #1138]	; 0x472
					if (res != FR_OK)
 80008d4:	f897 3472 	ldrb.w	r3, [r7, #1138]	; 0x472
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d006      	beq.n	80008ea <apSDCardTest+0x2ae>
					{
						uartPrintf(_DEF_UART1," err : %d\n\n", res);
 80008dc:	f897 3472 	ldrb.w	r3, [r7, #1138]	; 0x472
 80008e0:	461a      	mov	r2, r3
 80008e2:	493b      	ldr	r1, [pc, #236]	; (80009d0 <apSDCardTest+0x394>)
 80008e4:	2000      	movs	r0, #0
 80008e6:	f001 facf 	bl	8001e88 <uartPrintf>
					}

				    uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n\n");
 80008ea:	4936      	ldr	r1, [pc, #216]	; (80009c4 <apSDCardTest+0x388>)
 80008ec:	2000      	movs	r0, #0
 80008ee:	f001 facb 	bl	8001e88 <uartPrintf>
					break;
 80008f2:	e103      	b.n	8000afc <apSDCardTest+0x4c0>


				case'd':
					/* HelloWorld.csv 파일 생성 후 HelloWorld.csv 파일에 f_printf()로 쓰고 다시 내용물을 1byte씩 읽어서 출력*/

					pre_time = millis();
 80008f4:	f000 f950 	bl	8000b98 <millis>
 80008f8:	f8c7 046c 	str.w	r0, [r7, #1132]	; 0x46c
					/* Write 동작 */
					res = f_open(&log_file, "HelloWorld.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ); // 덮어쓰기(over write), W/R 가능한 파일 생성
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	220b      	movs	r2, #11
 8000902:	4935      	ldr	r1, [pc, #212]	; (80009d8 <apSDCardTest+0x39c>)
 8000904:	4618      	mov	r0, r3
 8000906:	f003 ff9d 	bl	8004844 <f_open>
 800090a:	4603      	mov	r3, r0
 800090c:	f887 3472 	strb.w	r3, [r7, #1138]	; 0x472
//					res = f_open(&log_file, "1.txt", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);

					if (res == FR_OK)
 8000910:	f897 3472 	ldrb.w	r3, [r7, #1138]	; 0x472
 8000914:	2b00      	cmp	r3, #0
 8000916:	f040 80a6 	bne.w	8000a66 <apSDCardTest+0x42a>
					{
					   f_printf(&log_file, "test1, ");
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	492f      	ldr	r1, [pc, #188]	; (80009dc <apSDCardTest+0x3a0>)
 8000920:	4618      	mov	r0, r3
 8000922:	f005 fa41 	bl	8005da8 <f_printf>
					   f_printf(&log_file, "test2, ");
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	492d      	ldr	r1, [pc, #180]	; (80009e0 <apSDCardTest+0x3a4>)
 800092c:	4618      	mov	r0, r3
 800092e:	f005 fa3b 	bl	8005da8 <f_printf>
					   f_printf(&log_file, "test3, ");
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	492b      	ldr	r1, [pc, #172]	; (80009e4 <apSDCardTest+0x3a8>)
 8000938:	4618      	mov	r0, r3
 800093a:	f005 fa35 	bl	8005da8 <f_printf>
					   f_printf(&log_file, ", ");
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	4929      	ldr	r1, [pc, #164]	; (80009e8 <apSDCardTest+0x3ac>)
 8000944:	4618      	mov	r0, r3
 8000946:	f005 fa2f 	bl	8005da8 <f_printf>
					   f_printf(&log_file, "\n");
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	4919      	ldr	r1, [pc, #100]	; (80009b4 <apSDCardTest+0x378>)
 8000950:	4618      	mov	r0, r3
 8000952:	f005 fa29 	bl	8005da8 <f_printf>

					   for (int i=0; i<8; i++)
 8000956:	2300      	movs	r3, #0
 8000958:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800095c:	e053      	b.n	8000a06 <apSDCardTest+0x3ca>
 800095e:	bf00      	nop
 8000960:	0800bbe8 	.word	0x0800bbe8
 8000964:	0800bbf8 	.word	0x0800bbf8
 8000968:	0800bc0c 	.word	0x0800bc0c
 800096c:	0800bc38 	.word	0x0800bc38
 8000970:	0800bc58 	.word	0x0800bc58
 8000974:	0800bc78 	.word	0x0800bc78
 8000978:	0800bc98 	.word	0x0800bc98
 800097c:	0800bcb8 	.word	0x0800bcb8
 8000980:	0800bcd8 	.word	0x0800bcd8
 8000984:	0800bcf8 	.word	0x0800bcf8
 8000988:	0800bd18 	.word	0x0800bd18
 800098c:	cccccccd 	.word	0xcccccccd
 8000990:	0800bd38 	.word	0x0800bd38
 8000994:	0800bd64 	.word	0x0800bd64
 8000998:	0800bdb0 	.word	0x0800bdb0
 800099c:	0800bdcc 	.word	0x0800bdcc
 80009a0:	0800bde4 	.word	0x0800bde4
 80009a4:	0800be28 	.word	0x0800be28
 80009a8:	0800be64 	.word	0x0800be64
 80009ac:	0800beb0 	.word	0x0800beb0
 80009b0:	0800bef4 	.word	0x0800bef4
 80009b4:	0800bf48 	.word	0x0800bf48
 80009b8:	0800bf4c 	.word	0x0800bf4c
 80009bc:	0800bf5c 	.word	0x0800bf5c
 80009c0:	0800bf70 	.word	0x0800bf70
 80009c4:	0800bf84 	.word	0x0800bf84
 80009c8:	0800bfd0 	.word	0x0800bfd0
 80009cc:	0800bfd4 	.word	0x0800bfd4
 80009d0:	0800c008 	.word	0x0800c008
 80009d4:	0800c014 	.word	0x0800c014
 80009d8:	0800c018 	.word	0x0800c018
 80009dc:	0800c028 	.word	0x0800c028
 80009e0:	0800c030 	.word	0x0800c030
 80009e4:	0800c038 	.word	0x0800c038
 80009e8:	0800c040 	.word	0x0800c040
					   {
						   f_printf(&log_file, "%d \n", i);
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 80009f4:	4942      	ldr	r1, [pc, #264]	; (8000b00 <apSDCardTest+0x4c4>)
 80009f6:	4618      	mov	r0, r3
 80009f8:	f005 f9d6 	bl	8005da8 <f_printf>
					   for (int i=0; i<8; i++)
 80009fc:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8000a00:	3301      	adds	r3, #1
 8000a02:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8000a06:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8000a0a:	2b07      	cmp	r3, #7
 8000a0c:	ddee      	ble.n	80009ec <apSDCardTest+0x3b0>
					   }

					   f_rewind(&log_file);
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f004 fcbb 	bl	8005390 <f_lseek>
					   UINT len;
					   uint8_t data;
						/* Read 동작 */
					   while(1)
					   {
						   len = 0;
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
						   res = f_read(&log_file, &data, 1, &len);
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	1cf9      	adds	r1, r7, #3
 8000a24:	f107 0008 	add.w	r0, r7, #8
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f004 f955 	bl	8004cd8 <f_read>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f887 3472 	strb.w	r3, [r7, #1138]	; 0x472

					       if (res != FR_OK)
 8000a34:	f897 3472 	ldrb.w	r3, [r7, #1138]	; 0x472
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d10b      	bne.n	8000a54 <apSDCardTest+0x418>
					       {
					         break;
					       }
					       if (len == 0)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d009      	beq.n	8000a58 <apSDCardTest+0x41c>
					       {
					         break;
					       }

					       uartPrintf(_DEF_UART1, "%c", data);
 8000a44:	1cfb      	adds	r3, r7, #3
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	492e      	ldr	r1, [pc, #184]	; (8000b04 <apSDCardTest+0x4c8>)
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f001 fa1b 	bl	8001e88 <uartPrintf>
						   len = 0;
 8000a52:	e7e2      	b.n	8000a1a <apSDCardTest+0x3de>
					         break;
 8000a54:	bf00      	nop
 8000a56:	e000      	b.n	8000a5a <apSDCardTest+0x41e>
					         break;
 8000a58:	bf00      	nop
					   }

					   f_close(&log_file);
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f004 fc6c 	bl	800533c <f_close>
 8000a64:	e003      	b.n	8000a6e <apSDCardTest+0x432>
					}

					else
					{
						uartPrintf(_DEF_UART1,"f_open fail\r\n");
 8000a66:	4928      	ldr	r1, [pc, #160]	; (8000b08 <apSDCardTest+0x4cc>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 fa0d 	bl	8001e88 <uartPrintf>
					}

					uartPrintf(_DEF_UART1,"%d ms\r\n", millis()-pre_time);
 8000a6e:	f000 f893 	bl	8000b98 <millis>
 8000a72:	4602      	mov	r2, r0
 8000a74:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4923      	ldr	r1, [pc, #140]	; (8000b0c <apSDCardTest+0x4d0>)
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f001 fa02 	bl	8001e88 <uartPrintf>

				    uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n\n");
 8000a84:	4922      	ldr	r1, [pc, #136]	; (8000b10 <apSDCardTest+0x4d4>)
 8000a86:	2000      	movs	r0, #0
 8000a88:	f001 f9fe 	bl	8001e88 <uartPrintf>
					break;
 8000a8c:	e036      	b.n	8000afc <apSDCardTest+0x4c0>

				case 'e':
					/* 루트 디렉토리에 있는 HelloWorld.csv 파일 삭제 */

					/*  /HelloWorld.csv : 루트디렉토리 -> HelloWorld.csv 경로의 파일 삭제 */
					res = f_unlink("/HelloWorld.csv");
 8000a8e:	4821      	ldr	r0, [pc, #132]	; (8000b14 <apSDCardTest+0x4d8>)
 8000a90:	f005 f858 	bl	8005b44 <f_unlink>
 8000a94:	4603      	mov	r3, r0
 8000a96:	f887 3472 	strb.w	r3, [r7, #1138]	; 0x472
					if (res == FR_OK)
 8000a9a:	f897 3472 	ldrb.w	r3, [r7, #1138]	; 0x472
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d108      	bne.n	8000ab4 <apSDCardTest+0x478>
					{
					    uartPrintf(_DEF_UART1, "HelloWorld.csv file has been successfully deleted. \n");
 8000aa2:	491d      	ldr	r1, [pc, #116]	; (8000b18 <apSDCardTest+0x4dc>)
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f001 f9ef 	bl	8001e88 <uartPrintf>
					    uartPrintf(_DEF_UART1, "Displays the current folder or file in the root directory of the SD card. \n\n");
 8000aaa:	491c      	ldr	r1, [pc, #112]	; (8000b1c <apSDCardTest+0x4e0>)
 8000aac:	2000      	movs	r0, #0
 8000aae:	f001 f9eb 	bl	8001e88 <uartPrintf>
 8000ab2:	e00a      	b.n	8000aca <apSDCardTest+0x48e>
					}

					else if (res != FR_OK)
 8000ab4:	f897 3472 	ldrb.w	r3, [r7, #1138]	; 0x472
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d006      	beq.n	8000aca <apSDCardTest+0x48e>
					{
						uartPrintf(_DEF_UART1," err : %d\n\n", res);
 8000abc:	f897 3472 	ldrb.w	r3, [r7, #1138]	; 0x472
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4917      	ldr	r1, [pc, #92]	; (8000b20 <apSDCardTest+0x4e4>)
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f001 f9df 	bl	8001e88 <uartPrintf>
					}

				    /* 루트 디렉토에 있는 폴더 또는 파일 (용량) 출력 */
				    res = fatfsDir("/");
 8000aca:	4816      	ldr	r0, [pc, #88]	; (8000b24 <apSDCardTest+0x4e8>)
 8000acc:	f7ff fd5e 	bl	800058c <fatfsDir>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f887 3472 	strb.w	r3, [r7, #1138]	; 0x472
					if (res != FR_OK)
 8000ad6:	f897 3472 	ldrb.w	r3, [r7, #1138]	; 0x472
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d006      	beq.n	8000aec <apSDCardTest+0x4b0>
					{
						uartPrintf(_DEF_UART1," err : %d\n\n", res);
 8000ade:	f897 3472 	ldrb.w	r3, [r7, #1138]	; 0x472
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	490e      	ldr	r1, [pc, #56]	; (8000b20 <apSDCardTest+0x4e4>)
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f001 f9ce 	bl	8001e88 <uartPrintf>
					}

				    uartPrintf(_DEF_UART1, "-------------------------------------------------------------------------\n\n");
 8000aec:	4908      	ldr	r1, [pc, #32]	; (8000b10 <apSDCardTest+0x4d4>)
 8000aee:	2000      	movs	r0, #0
 8000af0:	f001 f9ca 	bl	8001e88 <uartPrintf>
					break;
 8000af4:	e002      	b.n	8000afc <apSDCardTest+0x4c0>


				default:
					break;
			}
		}
 8000af6:	bf00      	nop
 8000af8:	e619      	b.n	800072e <apSDCardTest+0xf2>
					break;
 8000afa:	bf00      	nop
		if (uartAvailable(_DEF_UART1) > 0)
 8000afc:	e617      	b.n	800072e <apSDCardTest+0xf2>
 8000afe:	bf00      	nop
 8000b00:	0800c044 	.word	0x0800c044
 8000b04:	0800c04c 	.word	0x0800c04c
 8000b08:	0800c050 	.word	0x0800c050
 8000b0c:	0800c060 	.word	0x0800c060
 8000b10:	0800bf84 	.word	0x0800bf84
 8000b14:	0800c068 	.word	0x0800c068
 8000b18:	0800c078 	.word	0x0800c078
 8000b1c:	0800c0b0 	.word	0x0800c0b0
 8000b20:	0800c008 	.word	0x0800c008
 8000b24:	0800c014 	.word	0x0800c014

08000b28 <bspInit>:
void SystemClock_Config(void);



void bspInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
	  HAL_Init();
 8000b2e:	f005 fc7d 	bl	800642c <HAL_Init>
	  SystemClock_Config();
 8000b32:	f000 f839 	bl	8000ba8 <SystemClock_Config>

	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <bspInit+0x6c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <bspInit+0x6c>)
 8000b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <bspInit+0x6c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <bspInit+0x6c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <bspInit+0x6c>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <bspInit+0x6c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <bspInit+0x6c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <bspInit+0x6c>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <bspInit+0x6c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]


}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <millis>:
     }
}


uint32_t millis(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

	return HAL_GetTick();
 8000b9c:	f005 fcac 	bl	80064f8 <HAL_GetTick>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b094      	sub	sp, #80	; 0x50
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 0320 	add.w	r3, r7, #32
 8000bb2:	2230      	movs	r2, #48	; 0x30
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f00a fb94 	bl	800b2e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <SystemClock_Config+0xc8>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	4a26      	ldr	r2, [pc, #152]	; (8000c70 <SystemClock_Config+0xc8>)
 8000bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bda:	6413      	str	r3, [r2, #64]	; 0x40
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <SystemClock_Config+0xc8>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <SystemClock_Config+0xcc>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a20      	ldr	r2, [pc, #128]	; (8000c74 <SystemClock_Config+0xcc>)
 8000bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <SystemClock_Config+0xcc>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c04:	2301      	movs	r3, #1
 8000c06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c18:	2319      	movs	r3, #25
 8000c1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c1c:	23c0      	movs	r3, #192	; 0xc0
 8000c1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c24:	2304      	movs	r3, #4
 8000c26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c28:	f107 0320 	add.w	r3, r7, #32
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f006 fcdd 	bl	80075ec <HAL_RCC_OscConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c38:	f000 f81e 	bl	8000c78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c40:	2302      	movs	r3, #2
 8000c42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	2103      	movs	r1, #3
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f006 ff3f 	bl	8007adc <HAL_RCC_ClockConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c64:	f000 f808 	bl	8000c78 <Error_Handler>
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3750      	adds	r7, #80	; 0x50
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <Error_Handler+0x8>
	...

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <NMI_Handler+0x4>

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f005 fbd6 	bl	80064d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <USART1_IRQHandler+0x10>)
 8000d2e:	f008 fd09 	bl	8009744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000804 	.word	0x20000804

08000d3c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <SDIO_IRQHandler+0x10>)
 8000d42:	f007 fb11 	bl	8008368 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000600 	.word	0x20000600

08000d50 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <DMA2_Stream2_IRQHandler+0x10>)
 8000d56:	f005 ff39 	bl	8006bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000744 	.word	0x20000744

08000d64 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <DMA2_Stream3_IRQHandler+0x10>)
 8000d6a:	f005 ff2f 	bl	8006bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000540 	.word	0x20000540

08000d78 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <DMA2_Stream6_IRQHandler+0x10>)
 8000d7e:	f005 ff25 	bl	8006bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200005a0 	.word	0x200005a0

08000d8c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <DMA2_Stream7_IRQHandler+0x10>)
 8000d92:	f005 ff1b 	bl	8006bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200006e4 	.word	0x200006e4

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f00a fa5e 	bl	800b290 <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20020000 	.word	0x20020000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	200000a4 	.word	0x200000a4
 8000e08:	200008a0 	.word	0x200008a0

08000e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e36:	490e      	ldr	r1, [pc, #56]	; (8000e70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e4c:	4c0b      	ldr	r4, [pc, #44]	; (8000e7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e5a:	f7ff ffd7 	bl	8000e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f00a fa1d 	bl	800b29c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f00a fa09 	bl	800b278 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000e74:	0800c600 	.word	0x0800c600
  ldr r2, =_sbss
 8000e78:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000e7c:	200008a0 	.word	0x200008a0

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>

08000e82 <qbufferCreate>:


}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b087      	sub	sp, #28
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	60f8      	str	r0, [r7, #12]
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]

	bool ret = true;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	75fb      	strb	r3, [r7, #23]

	p_node->in  = 0;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
	p_node->out = 0;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
	p_node->len = length;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
	p_node->p_buf = p_buf;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	60da      	str	r2, [r3, #12]

	return ret;
 8000eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	371c      	adds	r7, #28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <qbufferRead>:




bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
	bool ret = true;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	75fb      	strb	r3, [r7, #23]

	for (int i=0; i<length; i++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	e026      	b.n	8000f1c <qbufferRead+0x64>
	{

		if (p_node-> p_buf != NULL)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d009      	beq.n	8000eea <qbufferRead+0x32>
		{
			p_data[i] = p_node->p_buf[p_node->out];
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	441a      	add	r2, r3
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	440b      	add	r3, r1
 8000ee6:	7812      	ldrb	r2, [r2, #0]
 8000ee8:	701a      	strb	r2, [r3, #0]

		}

		if (p_node->out != p_node->in)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d00c      	beq.n	8000f10 <qbufferRead+0x58>
		{
			p_node->out = (p_node->out + 1) % p_node->len;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	3301      	adds	r3, #1
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	6892      	ldr	r2, [r2, #8]
 8000f00:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f04:	fb02 f201 	mul.w	r2, r2, r1
 8000f08:	1a9a      	subs	r2, r3, r2
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	e002      	b.n	8000f16 <qbufferRead+0x5e>

		}

		else
		{
			ret =false;
 8000f10:	2300      	movs	r3, #0
 8000f12:	75fb      	strb	r3, [r7, #23]
			break;
 8000f14:	e006      	b.n	8000f24 <qbufferRead+0x6c>
	for (int i=0; i<length; i++)
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8d4      	bhi.n	8000ece <qbufferRead+0x16>
		}
	}

	return ret;
 8000f24:	7dfb      	ldrb	r3, [r7, #23]

}
 8000f26:	4618      	mov	r0, r3
 8000f28:	371c      	adds	r7, #28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <qbufferAvailable>:




uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b085      	sub	sp, #20
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
	uint32_t ret;


	ret = (p_node->in - p_node->out) % p_node-> len;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	6892      	ldr	r2, [r2, #8]
 8000f48:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f4c:	fb02 f201 	mul.w	r2, r2, r1
 8000f50:	1a9b      	subs	r3, r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]


	return ret;
 8000f54:	68fb      	ldr	r3, [r7, #12]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <SD_CheckStatus+0x80>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 8000f74:	f000 faf8 	bl	8001568 <sdIsInit>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	f083 0301 	eor.w	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d007      	beq.n	8000f94 <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <SD_CheckStatus+0x80>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <SD_CheckStatus+0x80>)
 8000f92:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 8000f94:	f000 faf4 	bl	8001580 <sdIsDetected>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f083 0301 	eor.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d007      	beq.n	8000fb4 <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <SD_CheckStatus+0x80>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <SD_CheckStatus+0x80>)
 8000fb2:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 8000fb4:	200a      	movs	r0, #10
 8000fb6:	f000 fb65 	bl	8001684 <sdIsReady>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f083 0301 	eor.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d007      	beq.n	8000fd6 <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <SD_CheckStatus+0x80>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SD_CheckStatus+0x80>)
 8000fd4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8000fd6:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <SD_CheckStatus+0x80>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b2db      	uxtb	r3, r3
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	  Stat = 0;
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <SD_initialize+0x40>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]

	  if (sdIsInit() != true)
 8000ff8:	f000 fab6 	bl	8001568 <sdIsInit>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f083 0301 	eor.w	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d007      	beq.n	8001018 <SD_initialize+0x30>
	  {
	    Stat |= STA_NOINIT;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <SD_initialize+0x40>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <SD_initialize+0x40>)
 8001016:	701a      	strb	r2, [r3, #0]
	  }

  return Stat;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <SD_initialize+0x40>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b2db      	uxtb	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000004 	.word	0x20000004

0800102c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff93 	bl	8000f64 <SD_CheckStatus>
 800103e:	4603      	mov	r3, r0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	4603      	mov	r3, r0
 8001056:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	75fb      	strb	r3, [r7, #23]

  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 800105c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	68b9      	ldr	r1, [r7, #8]
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 fb2d 	bl	80016c4 <sdReadBlocks>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SD_read+0x2c>
  {
    res = RES_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	75fb      	strb	r3, [r7, #23]
  }
  return res;
 8001074:	7dfb      	ldrb	r3, [r7, #23]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4603      	mov	r3, r0
 800108c:	73fb      	strb	r3, [r7, #15]
   DRESULT res = RES_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	75fb      	strb	r3, [r7, #23]

   if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 8001092:	f242 7310 	movw	r3, #10000	; 0x2710
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 fb7c 	bl	8001798 <sdWriteBlocks>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SD_write+0x2c>
   {
	  res = RES_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	75fb      	strb	r3, [r7, #23]
   }
   return res;
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	603a      	str	r2, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
 80010c0:	460b      	mov	r3, r1
 80010c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <SD_ioctl+0xac>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SD_ioctl+0x28>
 80010d8:	2303      	movs	r3, #3
 80010da:	e03c      	b.n	8001156 <SD_ioctl+0xa2>

  switch (cmd)
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d834      	bhi.n	800114c <SD_ioctl+0x98>
 80010e2:	a201      	add	r2, pc, #4	; (adr r2, 80010e8 <SD_ioctl+0x34>)
 80010e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e8:	080010f9 	.word	0x080010f9
 80010ec:	08001101 	.word	0x08001101
 80010f0:	08001119 	.word	0x08001119
 80010f4:	08001133 	.word	0x08001133
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80010fe:	e028      	b.n	8001152 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
	sdGetInfo(&sd_info);
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fa51 	bl	80015ac <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 800110a:	6a3a      	ldr	r2, [r7, #32]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001116:	e01c      	b.n	8001152 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
	sdGetInfo(&sd_info);
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fa45 	bl	80015ac <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	b29a      	uxth	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001130:	e00f      	b.n	8001152 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
	  sdGetInfo(&sd_info);
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fa38 	bl	80015ac <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	0a5a      	lsrs	r2, r3, #9
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800114a:	e002      	b.n	8001152 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800114c:	2304      	movs	r3, #4
 800114e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8001152:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001156:	4618      	mov	r0, r3
 8001158:	3730      	adds	r7, #48	; 0x30
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000004 	.word	0x20000004

08001164 <fatfsInit>:
FATFS SDFatFs;  /* File system object for SD card logical drive */
char SDPath[4]; /* SD card logical drive path */


bool fatfsInit(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
  bool ret = true;
 800116a:	2301      	movs	r3, #1
 800116c:	71fb      	strb	r3, [r7, #7]

  /* TODO FATFS32 초기화 단계에서 mount를 진행 , 무조건 moun 먼저 수행해야한다. (먼저 드라이버부터 잡아줘야함) */
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800116e:	490b      	ldr	r1, [pc, #44]	; (800119c <fatfsInit+0x38>)
 8001170:	480b      	ldr	r0, [pc, #44]	; (80011a0 <fatfsInit+0x3c>)
 8001172:	f005 f885 	bl	8006280 <FATFS_LinkDriver>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10a      	bne.n	8001192 <fatfsInit+0x2e>
  {
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 800117c:	2200      	movs	r2, #0
 800117e:	4907      	ldr	r1, [pc, #28]	; (800119c <fatfsInit+0x38>)
 8001180:	4808      	ldr	r0, [pc, #32]	; (80011a4 <fatfsInit+0x40>)
 8001182:	f003 fb19 	bl	80047b8 <f_mount>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <fatfsInit+0x2e>
    {
      is_init = true;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <fatfsInit+0x44>)
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
    }
  }
  return ret;
 8001192:	79fb      	ldrb	r3, [r7, #7]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000308 	.word	0x20000308
 80011a0:	0800c160 	.word	0x0800c160
 80011a4:	2000030c 	.word	0x2000030c
 80011a8:	200000a8 	.word	0x200000a8

080011ac <gpioInit>:




bool gpioInit(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
	bool ret = true;
 80011b2:	2301      	movs	r3, #1
 80011b4:	72fb      	strb	r3, [r7, #11]

	__HAL_RCC_GPIOB_CLK_ENABLE(); /* 클럭 설정  */
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <gpioInit+0x7c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <gpioInit+0x7c>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <gpioInit+0x7c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

	for(int i = 0; i < GPIO_MAX_CH; i++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	e01e      	b.n	8001216 <gpioInit+0x6a>
	{
		gpioPinMode(i, gpio_tbl[i].mode);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	b2d8      	uxtb	r0, r3
 80011dc:	4913      	ldr	r1, [pc, #76]	; (800122c <gpioInit+0x80>)
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	3308      	adds	r3, #8
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4619      	mov	r1, r3
 80011f0:	f000 f81e 	bl	8001230 <gpioPinMode>
		gpioPinWrite(i, gpio_tbl[i].init_value);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	b2d8      	uxtb	r0, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <gpioInit+0x80>)
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	330b      	adds	r3, #11
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4619      	mov	r1, r3
 800120c:	f000 f872 	bl	80012f4 <gpioPinWrite>
	for(int i = 0; i < GPIO_MAX_CH; i++)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3301      	adds	r3, #1
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	dddd      	ble.n	80011d8 <gpioInit+0x2c>
	}


	return ret;
 800121c:	7afb      	ldrb	r3, [r7, #11]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	20000008 	.word	0x20000008

08001230 <gpioPinMode>:


bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	460a      	mov	r2, r1
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	4613      	mov	r3, r2
 800123e:	71bb      	strb	r3, [r7, #6]
	bool ret = true;
 8001240:	2301      	movs	r3, #1
 8001242:	77fb      	strb	r3, [r7, #31]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]

	switch(mode)
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	2b05      	cmp	r3, #5
 8001258:	d82c      	bhi.n	80012b4 <gpioPinMode+0x84>
 800125a:	a201      	add	r2, pc, #4	; (adr r2, 8001260 <gpioPinMode+0x30>)
 800125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001260:	08001279 	.word	0x08001279
 8001264:	08001283 	.word	0x08001283
 8001268:	0800128d 	.word	0x0800128d
 800126c:	08001297 	.word	0x08001297
 8001270:	080012a1 	.word	0x080012a1
 8001274:	080012ab 	.word	0x080012ab
	{
		case _DEF_INPUT:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
			break;
 8001280:	e018      	b.n	80012b4 <gpioPinMode+0x84>

		case _DEF_INPUT_PULLUP:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001286:	2301      	movs	r3, #1
 8001288:	613b      	str	r3, [r7, #16]
			break;
 800128a:	e013      	b.n	80012b4 <gpioPinMode+0x84>

		case _DEF_INPUT_PULLDOWN:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001290:	2302      	movs	r3, #2
 8001292:	613b      	str	r3, [r7, #16]
			break;
 8001294:	e00e      	b.n	80012b4 <gpioPinMode+0x84>

		case _DEF_OUTPUT:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 8001296:	2301      	movs	r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
			break;
 800129e:	e009      	b.n	80012b4 <gpioPinMode+0x84>

		case _DEF_OUTPUT_PULLUP:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 80012a0:	2301      	movs	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	613b      	str	r3, [r7, #16]
			break;
 80012a8:	e004      	b.n	80012b4 <gpioPinMode+0x84>

		case _DEF_OUTPUT_PULLDWON:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 80012aa:	2301      	movs	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012ae:	2302      	movs	r3, #2
 80012b0:	613b      	str	r3, [r7, #16]
			break;
 80012b2:	bf00      	nop
	  }


	GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	490e      	ldr	r1, [pc, #56]	; (80012f0 <gpioPinMode+0xc0>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	3304      	adds	r3, #4
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 80012c8:	79fa      	ldrb	r2, [r7, #7]
 80012ca:	4909      	ldr	r1, [pc, #36]	; (80012f0 <gpioPinMode+0xc0>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f107 0208 	add.w	r2, r7, #8
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f005 feea 	bl	80070b8 <HAL_GPIO_Init>


	return ret;
 80012e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000008 	.word	0x20000008

080012f4 <gpioPinWrite>:


void gpioPinWrite(uint8_t ch, bool value)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	460a      	mov	r2, r1
 80012fe:	71fb      	strb	r3, [r7, #7]
 8001300:	4613      	mov	r3, r2
 8001302:	71bb      	strb	r3, [r7, #6]
	if( ch >= GPIO_MAX_CH)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d140      	bne.n	800138c <gpioPinWrite+0x98>
	{
		return ;
	}

	if (value == true)
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d01e      	beq.n	800134e <gpioPinWrite+0x5a>
	{
		  HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8001310:	79fa      	ldrb	r2, [r7, #7]
 8001312:	4920      	ldr	r1, [pc, #128]	; (8001394 <gpioPinWrite+0xa0>)
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	79fa      	ldrb	r2, [r7, #7]
 8001322:	491c      	ldr	r1, [pc, #112]	; (8001394 <gpioPinWrite+0xa0>)
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	3304      	adds	r3, #4
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	b299      	uxth	r1, r3
 8001334:	79fa      	ldrb	r2, [r7, #7]
 8001336:	4c17      	ldr	r4, [pc, #92]	; (8001394 <gpioPinWrite+0xa0>)
 8001338:	4613      	mov	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4423      	add	r3, r4
 8001342:	3309      	adds	r3, #9
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	f006 f936 	bl	80075b8 <HAL_GPIO_WritePin>
 800134c:	e01f      	b.n	800138e <gpioPinWrite+0x9a>
	}
	else
	{
		  HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 800134e:	79fa      	ldrb	r2, [r7, #7]
 8001350:	4910      	ldr	r1, [pc, #64]	; (8001394 <gpioPinWrite+0xa0>)
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	79fa      	ldrb	r2, [r7, #7]
 8001360:	490c      	ldr	r1, [pc, #48]	; (8001394 <gpioPinWrite+0xa0>)
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	3304      	adds	r3, #4
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	b299      	uxth	r1, r3
 8001372:	79fa      	ldrb	r2, [r7, #7]
 8001374:	4c07      	ldr	r4, [pc, #28]	; (8001394 <gpioPinWrite+0xa0>)
 8001376:	4613      	mov	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4413      	add	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4423      	add	r3, r4
 8001380:	330a      	adds	r3, #10
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	f006 f917 	bl	80075b8 <HAL_GPIO_WritePin>
 800138a:	e000      	b.n	800138e <gpioPinWrite+0x9a>
		return ;
 800138c:	bf00      	nop
	}

}
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bd90      	pop	{r4, r7, pc}
 8001394:	20000008 	.word	0x20000008

08001398 <gpioPinRead>:


bool gpioPinRead(uint8_t ch)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]

	bool ret = false;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]

	if( ch >= GPIO_MAX_CH)
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <gpioPinRead+0x18>
	{
		return false;
 80013ac:	2300      	movs	r3, #0
 80013ae:	e024      	b.n	80013fa <gpioPinRead+0x62>
	}

	if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 80013b0:	79fa      	ldrb	r2, [r7, #7]
 80013b2:	4914      	ldr	r1, [pc, #80]	; (8001404 <gpioPinRead+0x6c>)
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	79fa      	ldrb	r2, [r7, #7]
 80013c2:	4910      	ldr	r1, [pc, #64]	; (8001404 <gpioPinRead+0x6c>)
 80013c4:	4613      	mov	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	3304      	adds	r3, #4
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4619      	mov	r1, r3
 80013d6:	f006 f8d7 	bl	8007588 <HAL_GPIO_ReadPin>
 80013da:	4603      	mov	r3, r0
 80013dc:	4618      	mov	r0, r3
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	4908      	ldr	r1, [pc, #32]	; (8001404 <gpioPinRead+0x6c>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	3309      	adds	r3, #9
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4298      	cmp	r0, r3
 80013f2:	d101      	bne.n	80013f8 <gpioPinRead+0x60>
	{
		ret = true;
 80013f4:	2301      	movs	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008

08001408 <ledInit>:




bool ledInit(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
  bool ret = true;
 800140e:	2301      	movs	r3, #1
 8001410:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <ledInit+0x84>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	4a18      	ldr	r2, [pc, #96]	; (800148c <ledInit+0x84>)
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	6313      	str	r3, [r2, #48]	; 0x30
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <ledInit+0x84>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	e016      	b.n	800147c <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <ledInit+0x88>)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4413      	add	r3, r2
 8001456:	889b      	ldrh	r3, [r3, #4]
 8001458:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800145a:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <ledInit+0x88>)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001462:	1d3a      	adds	r2, r7, #4
 8001464:	4611      	mov	r1, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f005 fe26 	bl	80070b8 <HAL_GPIO_Init>

    ledOff(i);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	f000 f80f 	bl	8001494 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3301      	adds	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	2b00      	cmp	r3, #0
 8001480:	dde5      	ble.n	800144e <ledInit+0x46>
  }
  return ret;
 8001482:	7efb      	ldrb	r3, [r7, #27]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3720      	adds	r7, #32
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	20000014 	.word	0x20000014

08001494 <ledOff>:
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}


void ledOff(uint8_t ch)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d111      	bne.n	80014c8 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <ledOff+0x3c>)
 80014a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <ledOff+0x3c>)
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4413      	add	r3, r2
 80014b4:	8899      	ldrh	r1, [r3, #4]
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <ledOff+0x3c>)
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	79db      	ldrb	r3, [r3, #7]
 80014c0:	461a      	mov	r2, r3
 80014c2:	f006 f879 	bl	80075b8 <HAL_GPIO_WritePin>
 80014c6:	e000      	b.n	80014ca <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 80014c8:	bf00      	nop
}
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000014 	.word	0x20000014

080014d4 <sdInit>:




bool sdInit(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
	bool ret 			 		 = false;
 80014da:	2300      	movs	r3, #0
 80014dc:	71fb      	strb	r3, [r7, #7]
	hsd.Instance 		 		 = SDIO;
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <sdInit+0x84>)
 80014e0:	4a1e      	ldr	r2, [pc, #120]	; (800155c <sdInit+0x88>)
 80014e2:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge   		 = SDIO_CLOCK_EDGE_RISING;
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <sdInit+0x84>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass 		 = SDIO_CLOCK_BYPASS_DISABLE;
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <sdInit+0x84>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave 	 = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <sdInit+0x84>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide	     	 = SDIO_BUS_WIDE_1B;
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <sdInit+0x84>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <sdInit+0x84>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv 			 = SDIO_TRANSFER_CLK_DIV;
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <sdInit+0x84>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]

	is_detected = false;
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <sdInit+0x8c>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
	if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff ff42 	bl	8001398 <gpioPinRead>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <sdInit+0x4c>
	{
	   is_detected = true;
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <sdInit+0x8c>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
	}

	if(is_detected == true)
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <sdInit+0x8c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00f      	beq.n	8001548 <sdInit+0x74>
	{
		if (HAL_SD_Init(&hsd) == HAL_OK)
 8001528:	480b      	ldr	r0, [pc, #44]	; (8001558 <sdInit+0x84>)
 800152a:	f006 fca7 	bl	8007e7c <HAL_SD_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d109      	bne.n	8001548 <sdInit+0x74>
		{
			if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 8001534:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001538:	4807      	ldr	r0, [pc, #28]	; (8001558 <sdInit+0x84>)
 800153a:	f007 fa7f 	bl	8008a3c <HAL_SD_ConfigWideBusOperation>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <sdInit+0x74>
			{
			   ret = true;
 8001544:	2301      	movs	r3, #1
 8001546:	71fb      	strb	r3, [r7, #7]
			}
		}
	}

	is_init = ret;
 8001548:	4a06      	ldr	r2, [pc, #24]	; (8001564 <sdInit+0x90>)
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	7013      	strb	r3, [r2, #0]


	return ret;
 800154e:	79fb      	ldrb	r3, [r7, #7]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000600 	.word	0x20000600
 800155c:	40012c00 	.word	0x40012c00
 8001560:	200000aa 	.word	0x200000aa
 8001564:	200000a9 	.word	0x200000a9

08001568 <sdIsInit>:
}



bool sdIsInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return is_init;
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <sdIsInit+0x14>)
 800156e:	781b      	ldrb	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	200000a9 	.word	0x200000a9

08001580 <sdIsDetected>:



bool sdIsDetected(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff ff07 	bl	8001398 <gpioPinRead>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <sdIsDetected+0x18>
  {
    is_detected = true;
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <sdIsDetected+0x28>)
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	e002      	b.n	800159e <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <sdIsDetected+0x28>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 800159e:	4b02      	ldr	r3, [pc, #8]	; (80015a8 <sdIsDetected+0x28>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200000aa 	.word	0x200000aa

080015ac <sdGetInfo>:




bool sdGetInfo(sd_info_t *p_info)
{
 80015ac:	b5b0      	push	{r4, r5, r7, lr}
 80015ae:	b08c      	sub	sp, #48	; 0x30
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  bool ret = false;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <sdGetInfo+0xa4>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d03e      	beq.n	8001644 <sdGetInfo+0x98>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	4619      	mov	r1, r3
 80015cc:	4821      	ldr	r0, [pc, #132]	; (8001654 <sdGetInfo+0xa8>)
 80015ce:	f007 fa09 	bl	80089e4 <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e2:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e8:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ee:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 80015f0:	69fa      	ldr	r2, [r7, #28]
 80015f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f4:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 80015f6:	6a3a      	ldr	r2, [r7, #32]
 80015f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fa:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 80015fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001600:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          = (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 8001602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	4618      	mov	r0, r3
 8001608:	f04f 0100 	mov.w	r1, #0
 800160c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	461a      	mov	r2, r3
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	fb02 f501 	mul.w	r5, r2, r1
 800161a:	fb00 f403 	mul.w	r4, r0, r3
 800161e:	442c      	add	r4, r5
 8001620:	fba0 2302 	umull	r2, r3, r0, r2
 8001624:	18e1      	adds	r1, r4, r3
 8001626:	460b      	mov	r3, r1
 8001628:	f04f 0000 	mov.w	r0, #0
 800162c:	f04f 0100 	mov.w	r1, #0
 8001630:	0d10      	lsrs	r0, r2, #20
 8001632:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
 8001636:	0d19      	lsrs	r1, r3, #20
 8001638:	4602      	mov	r2, r0
 800163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163c:	621a      	str	r2, [r3, #32]
    ret = true;
 800163e:	2301      	movs	r3, #1
 8001640:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 8001644:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001648:	4618      	mov	r0, r3
 800164a:	3730      	adds	r7, #48	; 0x30
 800164c:	46bd      	mov	sp, r7
 800164e:	bdb0      	pop	{r4, r5, r7, pc}
 8001650:	200000a9 	.word	0x200000a9
 8001654:	20000600 	.word	0x20000600

08001658 <sdIsBusy>:


bool sdIsBusy(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 800165e:	4808      	ldr	r0, [pc, #32]	; (8001680 <sdIsBusy+0x28>)
 8001660:	f007 fa86 	bl	8008b70 <HAL_SD_GetCardState>
 8001664:	4603      	mov	r3, r0
 8001666:	2b04      	cmp	r3, #4
 8001668:	d102      	bne.n	8001670 <sdIsBusy+0x18>
  {
    is_busy = false;
 800166a:	2300      	movs	r3, #0
 800166c:	71fb      	strb	r3, [r7, #7]
 800166e:	e001      	b.n	8001674 <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 8001670:	2301      	movs	r3, #1
 8001672:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 8001674:	79fb      	ldrb	r3, [r7, #7]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000600 	.word	0x20000600

08001684 <sdIsReady>:



bool sdIsReady(uint32_t timeout)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t pre_time;

  pre_time = millis();
 800168c:	f7ff fa84 	bl	8000b98 <millis>
 8001690:	60f8      	str	r0, [r7, #12]

  while(millis() - pre_time < timeout)
 8001692:	e009      	b.n	80016a8 <sdIsReady+0x24>
  {
    if (sdIsBusy() == false)
 8001694:	f7ff ffe0 	bl	8001658 <sdIsBusy>
 8001698:	4603      	mov	r3, r0
 800169a:	f083 0301 	eor.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <sdIsReady+0x24>
    {
      return true;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e008      	b.n	80016ba <sdIsReady+0x36>
  while(millis() - pre_time < timeout)
 80016a8:	f7ff fa76 	bl	8000b98 <millis>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8ed      	bhi.n	8001694 <sdIsReady+0x10>
    }
  }

  return false;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <sdReadBlocks>:



bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
  bool ret = false;
 80016d2:	2300      	movs	r3, #0
 80016d4:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <sdReadBlocks+0x8c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	481c      	ldr	r0, [pc, #112]	; (8001754 <sdReadBlocks+0x90>)
 80016e4:	f006 fc78 	bl	8007fd8 <HAL_SD_ReadBlocks_DMA>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d12a      	bne.n	8001744 <sdReadBlocks+0x80>
  {

    pre_time = millis();
 80016ee:	f7ff fa53 	bl	8000b98 <millis>
 80016f2:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 80016f4:	e007      	b.n	8001706 <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 80016f6:	f7ff fa4f 	bl	8000b98 <millis>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d908      	bls.n	8001718 <sdReadBlocks+0x54>
    while(is_rx_done == false)
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <sdReadBlocks+0x8c>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f083 0301 	eor.w	r3, r3, #1
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ef      	bne.n	80016f6 <sdReadBlocks+0x32>
 8001716:	e00d      	b.n	8001734 <sdReadBlocks+0x70>
      {
        break;
 8001718:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 800171a:	e00b      	b.n	8001734 <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 800171c:	f7ff fa3c 	bl	8000b98 <millis>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d803      	bhi.n	8001734 <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <sdReadBlocks+0x8c>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
        break;
 8001732:	e004      	b.n	800173e <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 8001734:	f7ff ff90 	bl	8001658 <sdIsBusy>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ee      	bne.n	800171c <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <sdReadBlocks+0x8c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8001744:	7dfb      	ldrb	r3, [r7, #23]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200000ab 	.word	0x200000ab
 8001754:	20000600 	.word	0x20000600

08001758 <HAL_SD_RxCpltCallback>:


void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <HAL_SD_RxCpltCallback+0x1c>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	200000ab 	.word	0x200000ab

08001778 <HAL_SD_TxCpltCallback>:


void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <HAL_SD_TxCpltCallback+0x1c>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	200000ac 	.word	0x200000ac

08001798 <sdWriteBlocks>:


bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	603b      	str	r3, [r7, #0]
  bool ret = false;
 80017a6:	2300      	movs	r3, #0
 80017a8:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_tx_done = false;
 80017aa:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <sdWriteBlocks+0x8c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	481c      	ldr	r0, [pc, #112]	; (8001828 <sdWriteBlocks+0x90>)
 80017b8:	f006 fcf0 	bl	800819c <HAL_SD_WriteBlocks_DMA>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d12a      	bne.n	8001818 <sdWriteBlocks+0x80>
  {
    pre_time = millis();
 80017c2:	f7ff f9e9 	bl	8000b98 <millis>
 80017c6:	6138      	str	r0, [r7, #16]
    while(is_tx_done == false)
 80017c8:	e007      	b.n	80017da <sdWriteBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 80017ca:	f7ff f9e5 	bl	8000b98 <millis>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d908      	bls.n	80017ec <sdWriteBlocks+0x54>
    while(is_tx_done == false)
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <sdWriteBlocks+0x8c>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f083 0301 	eor.w	r3, r3, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1ef      	bne.n	80017ca <sdWriteBlocks+0x32>
 80017ea:	e00d      	b.n	8001808 <sdWriteBlocks+0x70>
      {
        break;
 80017ec:	bf00      	nop
      }
    }

    while(sdIsBusy() == true)
 80017ee:	e00b      	b.n	8001808 <sdWriteBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 80017f0:	f7ff f9d2 	bl	8000b98 <millis>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d803      	bhi.n	8001808 <sdWriteBlocks+0x70>
      {
        is_tx_done = false;
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <sdWriteBlocks+0x8c>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
        break;
 8001806:	e004      	b.n	8001812 <sdWriteBlocks+0x7a>
    while(sdIsBusy() == true)
 8001808:	f7ff ff26 	bl	8001658 <sdIsBusy>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1ee      	bne.n	80017f0 <sdWriteBlocks+0x58>
      }
    }
    ret = is_tx_done;
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <sdWriteBlocks+0x8c>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8001818:	7dfb      	ldrb	r3, [r7, #23]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200000ac 	.word	0x200000ac
 8001828:	20000600 	.word	0x20000600

0800182c <HAL_SD_MspInit>:
  return ret;
}


void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08c      	sub	sp, #48	; 0x30
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a77      	ldr	r2, [pc, #476]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 800184a:	4293      	cmp	r3, r2
 800184c:	f040 80e8 	bne.w	8001a20 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
 8001854:	4b75      	ldr	r3, [pc, #468]	; (8001a2c <HAL_SD_MspInit+0x200>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	4a74      	ldr	r2, [pc, #464]	; (8001a2c <HAL_SD_MspInit+0x200>)
 800185a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800185e:	6313      	str	r3, [r2, #48]	; 0x30
 8001860:	4b72      	ldr	r3, [pc, #456]	; (8001a2c <HAL_SD_MspInit+0x200>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	69bb      	ldr	r3, [r7, #24]

 /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	4b6e      	ldr	r3, [pc, #440]	; (8001a2c <HAL_SD_MspInit+0x200>)
 8001872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001874:	4a6d      	ldr	r2, [pc, #436]	; (8001a2c <HAL_SD_MspInit+0x200>)
 8001876:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800187a:	6453      	str	r3, [r2, #68]	; 0x44
 800187c:	4b6b      	ldr	r3, [pc, #428]	; (8001a2c <HAL_SD_MspInit+0x200>)
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	4b67      	ldr	r3, [pc, #412]	; (8001a2c <HAL_SD_MspInit+0x200>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	4a66      	ldr	r2, [pc, #408]	; (8001a2c <HAL_SD_MspInit+0x200>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6313      	str	r3, [r2, #48]	; 0x30
 8001898:	4b64      	ldr	r3, [pc, #400]	; (8001a2c <HAL_SD_MspInit+0x200>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	4b60      	ldr	r3, [pc, #384]	; (8001a2c <HAL_SD_MspInit+0x200>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	4a5f      	ldr	r2, [pc, #380]	; (8001a2c <HAL_SD_MspInit+0x200>)
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	6313      	str	r3, [r2, #48]	; 0x30
 80018b4:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <HAL_SD_MspInit+0x200>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80018c0:	f44f 7350 	mov.w	r3, #832	; 0x340
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018d2:	230c      	movs	r3, #12
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	4854      	ldr	r0, [pc, #336]	; (8001a30 <HAL_SD_MspInit+0x204>)
 80018de:	f005 fbeb 	bl	80070b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 80018e2:	f248 03a0 	movw	r3, #32928	; 0x80a0
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018f4:	230c      	movs	r3, #12
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	484d      	ldr	r0, [pc, #308]	; (8001a34 <HAL_SD_MspInit+0x208>)
 8001900:	f005 fbda 	bl	80070b8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001904:	4b4c      	ldr	r3, [pc, #304]	; (8001a38 <HAL_SD_MspInit+0x20c>)
 8001906:	4a4d      	ldr	r2, [pc, #308]	; (8001a3c <HAL_SD_MspInit+0x210>)
 8001908:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800190a:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <HAL_SD_MspInit+0x20c>)
 800190c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001910:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001912:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <HAL_SD_MspInit+0x20c>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001918:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <HAL_SD_MspInit+0x20c>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800191e:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <HAL_SD_MspInit+0x20c>)
 8001920:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001924:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001926:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <HAL_SD_MspInit+0x20c>)
 8001928:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800192c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800192e:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <HAL_SD_MspInit+0x20c>)
 8001930:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001934:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001936:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <HAL_SD_MspInit+0x20c>)
 8001938:	2220      	movs	r2, #32
 800193a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800193c:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <HAL_SD_MspInit+0x20c>)
 800193e:	2200      	movs	r2, #0
 8001940:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001942:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <HAL_SD_MspInit+0x20c>)
 8001944:	2204      	movs	r2, #4
 8001946:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_SD_MspInit+0x20c>)
 800194a:	2203      	movs	r2, #3
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <HAL_SD_MspInit+0x20c>)
 8001950:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001954:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001956:	4b38      	ldr	r3, [pc, #224]	; (8001a38 <HAL_SD_MspInit+0x20c>)
 8001958:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800195c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800195e:	4836      	ldr	r0, [pc, #216]	; (8001a38 <HAL_SD_MspInit+0x20c>)
 8001960:	f004 ff3e 	bl	80067e0 <HAL_DMA_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 800196a:	f7ff f985 	bl	8000c78 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a31      	ldr	r2, [pc, #196]	; (8001a38 <HAL_SD_MspInit+0x20c>)
 8001972:	641a      	str	r2, [r3, #64]	; 0x40
 8001974:	4a30      	ldr	r2, [pc, #192]	; (8001a38 <HAL_SD_MspInit+0x20c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800197a:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <HAL_SD_MspInit+0x214>)
 800197c:	4a31      	ldr	r2, [pc, #196]	; (8001a44 <HAL_SD_MspInit+0x218>)
 800197e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001980:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <HAL_SD_MspInit+0x214>)
 8001982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001986:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001988:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <HAL_SD_MspInit+0x214>)
 800198a:	2240      	movs	r2, #64	; 0x40
 800198c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198e:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <HAL_SD_MspInit+0x214>)
 8001990:	2200      	movs	r2, #0
 8001992:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001994:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <HAL_SD_MspInit+0x214>)
 8001996:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800199a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800199c:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <HAL_SD_MspInit+0x214>)
 800199e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019a2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019a4:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <HAL_SD_MspInit+0x214>)
 80019a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019aa:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80019ac:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <HAL_SD_MspInit+0x214>)
 80019ae:	2220      	movs	r2, #32
 80019b0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019b2:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <HAL_SD_MspInit+0x214>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019b8:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <HAL_SD_MspInit+0x214>)
 80019ba:	2204      	movs	r2, #4
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_SD_MspInit+0x214>)
 80019c0:	2203      	movs	r2, #3
 80019c2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <HAL_SD_MspInit+0x214>)
 80019c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <HAL_SD_MspInit+0x214>)
 80019ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80019d4:	481a      	ldr	r0, [pc, #104]	; (8001a40 <HAL_SD_MspInit+0x214>)
 80019d6:	f004 ff03 	bl	80067e0 <HAL_DMA_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 80019e0:	f7ff f94a 	bl	8000c78 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a16      	ldr	r2, [pc, #88]	; (8001a40 <HAL_SD_MspInit+0x214>)
 80019e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80019ea:	4a15      	ldr	r2, [pc, #84]	; (8001a40 <HAL_SD_MspInit+0x214>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2105      	movs	r1, #5
 80019f4:	2031      	movs	r0, #49	; 0x31
 80019f6:	f004 feae 	bl	8006756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80019fa:	2031      	movs	r0, #49	; 0x31
 80019fc:	f004 fec7 	bl	800678e <HAL_NVIC_EnableIRQ>
   /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2105      	movs	r1, #5
 8001a04:	203b      	movs	r0, #59	; 0x3b
 8001a06:	f004 fea6 	bl	8006756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a0a:	203b      	movs	r0, #59	; 0x3b
 8001a0c:	f004 febf 	bl	800678e <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2105      	movs	r1, #5
 8001a14:	2045      	movs	r0, #69	; 0x45
 8001a16:	f004 fe9e 	bl	8006756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001a1a:	2045      	movs	r0, #69	; 0x45
 8001a1c:	f004 feb7 	bl	800678e <HAL_NVIC_EnableIRQ>
  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001a20:	bf00      	nop
 8001a22:	3730      	adds	r7, #48	; 0x30
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40012c00 	.word	0x40012c00
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020000 	.word	0x40020000
 8001a34:	40020400 	.word	0x40020400
 8001a38:	20000540 	.word	0x20000540
 8001a3c:	40026458 	.word	0x40026458
 8001a40:	200005a0 	.word	0x200005a0
 8001a44:	400264a0 	.word	0x400264a0

08001a48 <uartInit>:




bool uartInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
  for (int i = 0; i < UART_MAX_CH; i++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	e007      	b.n	8001a64 <uartInit+0x1c>
  {
    is_open[i] = false;
 8001a54:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <uartInit+0x30>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < UART_MAX_CH; i++)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3301      	adds	r3, #1
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	ddf4      	ble.n	8001a54 <uartInit+0xc>
  }

  return true;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	200000b0 	.word	0x200000b0

08001a7c <uartOpen>:


bool uartOpen(uint8_t ch, uint32_t baud)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <uartOpen+0x1c>
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d078      	beq.n	8001b88 <uartOpen+0x10c>
 8001a96:	e0ef      	b.n	8001c78 <uartOpen+0x1fc>
  {
    /* UART1 */
    case _DEF_UART1:
      huart1.Instance             = USART1;
 8001a98:	4b7a      	ldr	r3, [pc, #488]	; (8001c84 <uartOpen+0x208>)
 8001a9a:	4a7b      	ldr	r2, [pc, #492]	; (8001c88 <uartOpen+0x20c>)
 8001a9c:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate        = baud;
 8001a9e:	4a79      	ldr	r2, [pc, #484]	; (8001c84 <uartOpen+0x208>)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength      = UART_WORDLENGTH_8B;
 8001aa4:	4b77      	ldr	r3, [pc, #476]	; (8001c84 <uartOpen+0x208>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits        = UART_STOPBITS_1;
 8001aaa:	4b76      	ldr	r3, [pc, #472]	; (8001c84 <uartOpen+0x208>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity          = UART_PARITY_NONE;
 8001ab0:	4b74      	ldr	r3, [pc, #464]	; (8001c84 <uartOpen+0x208>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode            = UART_MODE_TX_RX;
 8001ab6:	4b73      	ldr	r3, [pc, #460]	; (8001c84 <uartOpen+0x208>)
 8001ab8:	220c      	movs	r2, #12
 8001aba:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl       = UART_HWCONTROL_NONE;
 8001abc:	4b71      	ldr	r3, [pc, #452]	; (8001c84 <uartOpen+0x208>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling    = UART_OVERSAMPLING_16;
 8001ac2:	4b70      	ldr	r3, [pc, #448]	; (8001c84 <uartOpen+0x208>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8001ac8:	486e      	ldr	r0, [pc, #440]	; (8001c84 <uartOpen+0x208>)
 8001aca:	f007 fd5d 	bl	8009588 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	4a6e      	ldr	r2, [pc, #440]	; (8001c8c <uartOpen+0x210>)
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ada:	496d      	ldr	r1, [pc, #436]	; (8001c90 <uartOpen+0x214>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff f9d0 	bl	8000e82 <qbufferCreate>

      __HAL_RCC_DMA2_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	4b6b      	ldr	r3, [pc, #428]	; (8001c94 <uartOpen+0x218>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a6a      	ldr	r2, [pc, #424]	; (8001c94 <uartOpen+0x218>)
 8001aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b68      	ldr	r3, [pc, #416]	; (8001c94 <uartOpen+0x218>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]

      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0); //RX DMA
 8001afe:	2200      	movs	r2, #0
 8001b00:	2100      	movs	r1, #0
 8001b02:	203a      	movs	r0, #58	; 0x3a
 8001b04:	f004 fe27 	bl	8006756 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b08:	203a      	movs	r0, #58	; 0x3a
 8001b0a:	f004 fe40 	bl	800678e <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b0e:	485d      	ldr	r0, [pc, #372]	; (8001c84 <uartOpen+0x208>)
 8001b10:	f007 fced 	bl	80094ee <HAL_UART_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <uartOpen+0xa4>
      {
        ret = false;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]

        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0); //TX DMA
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
      }

      break;
 8001b1e:	e0ab      	b.n	8001c78 <uartOpen+0x1fc>
        ret = true;
 8001b20:	2301      	movs	r3, #1
 8001b22:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	4a5c      	ldr	r2, [pc, #368]	; (8001c98 <uartOpen+0x21c>)
 8001b28:	2101      	movs	r1, #1
 8001b2a:	54d1      	strb	r1, [r2, r3]
        if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8001b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b30:	4957      	ldr	r1, [pc, #348]	; (8001c90 <uartOpen+0x214>)
 8001b32:	4854      	ldr	r0, [pc, #336]	; (8001c84 <uartOpen+0x208>)
 8001b34:	f007 fdd6 	bl	80096e4 <HAL_UART_Receive_DMA>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <uartOpen+0xc6>
          ret = false;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	4a51      	ldr	r2, [pc, #324]	; (8001c8c <uartOpen+0x210>)
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	4413      	add	r3, r2
 8001b4a:	3308      	adds	r3, #8
 8001b4c:	6819      	ldr	r1, [r3, #0]
 8001b4e:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <uartOpen+0x220>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	1a8a      	subs	r2, r1, r2
 8001b58:	494c      	ldr	r1, [pc, #304]	; (8001c8c <uartOpen+0x210>)
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	440b      	add	r3, r1
 8001b5e:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8001b60:	79fa      	ldrb	r2, [r7, #7]
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	4949      	ldr	r1, [pc, #292]	; (8001c8c <uartOpen+0x210>)
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	440a      	add	r2, r1
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	4947      	ldr	r1, [pc, #284]	; (8001c8c <uartOpen+0x210>)
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	440b      	add	r3, r1
 8001b72:	3304      	adds	r3, #4
 8001b74:	601a      	str	r2, [r3, #0]
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0); //TX DMA
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2046      	movs	r0, #70	; 0x46
 8001b7c:	f004 fdeb 	bl	8006756 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001b80:	2046      	movs	r0, #70	; 0x46
 8001b82:	f004 fe04 	bl	800678e <HAL_NVIC_EnableIRQ>
      break;
 8001b86:	e077      	b.n	8001c78 <uartOpen+0x1fc>


    /* UART2 */
    case _DEF_UART2:
    	  huart2.Instance = USART2;
 8001b88:	4b45      	ldr	r3, [pc, #276]	; (8001ca0 <uartOpen+0x224>)
 8001b8a:	4a46      	ldr	r2, [pc, #280]	; (8001ca4 <uartOpen+0x228>)
 8001b8c:	601a      	str	r2, [r3, #0]
    	  huart2.Init.BaudRate = baud;
 8001b8e:	4a44      	ldr	r2, [pc, #272]	; (8001ca0 <uartOpen+0x224>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	6053      	str	r3, [r2, #4]
    	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b94:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <uartOpen+0x224>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
    	  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b9a:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <uartOpen+0x224>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]
    	  huart2.Init.Parity = UART_PARITY_NONE;
 8001ba0:	4b3f      	ldr	r3, [pc, #252]	; (8001ca0 <uartOpen+0x224>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
    	  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba6:	4b3e      	ldr	r3, [pc, #248]	; (8001ca0 <uartOpen+0x224>)
 8001ba8:	220c      	movs	r2, #12
 8001baa:	615a      	str	r2, [r3, #20]
    	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bac:	4b3c      	ldr	r3, [pc, #240]	; (8001ca0 <uartOpen+0x224>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
    	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	; (8001ca0 <uartOpen+0x224>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	61da      	str	r2, [r3, #28]

          HAL_UART_DeInit(&huart2);
 8001bb8:	4839      	ldr	r0, [pc, #228]	; (8001ca0 <uartOpen+0x224>)
 8001bba:	f007 fce5 	bl	8009588 <HAL_UART_DeInit>

          qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	4a32      	ldr	r2, [pc, #200]	; (8001c8c <uartOpen+0x210>)
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bca:	4931      	ldr	r1, [pc, #196]	; (8001c90 <uartOpen+0x214>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f958 	bl	8000e82 <qbufferCreate>

          __HAL_RCC_DMA2_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <uartOpen+0x218>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a2e      	ldr	r2, [pc, #184]	; (8001c94 <uartOpen+0x218>)
 8001bdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <uartOpen+0x218>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]

          HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0); //RX DMA
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	203a      	movs	r0, #58	; 0x3a
 8001bf4:	f004 fdaf 	bl	8006756 <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001bf8:	203a      	movs	r0, #58	; 0x3a
 8001bfa:	f004 fdc8 	bl	800678e <HAL_NVIC_EnableIRQ>


          if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bfe:	4828      	ldr	r0, [pc, #160]	; (8001ca0 <uartOpen+0x224>)
 8001c00:	f007 fc75 	bl	80094ee <HAL_UART_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <uartOpen+0x194>
          {
            ret = false;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	75fb      	strb	r3, [r7, #23]

            HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0); //TX DMA
            HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
          }

          break;
 8001c0e:	e032      	b.n	8001c76 <uartOpen+0x1fa>
            ret = true;
 8001c10:	2301      	movs	r3, #1
 8001c12:	75fb      	strb	r3, [r7, #23]
            is_open[ch] = true;
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	4a20      	ldr	r2, [pc, #128]	; (8001c98 <uartOpen+0x21c>)
 8001c18:	2101      	movs	r1, #1
 8001c1a:	54d1      	strb	r1, [r2, r3]
            if (HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8001c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c20:	491b      	ldr	r1, [pc, #108]	; (8001c90 <uartOpen+0x214>)
 8001c22:	481f      	ldr	r0, [pc, #124]	; (8001ca0 <uartOpen+0x224>)
 8001c24:	f007 fd5e 	bl	80096e4 <HAL_UART_Receive_DMA>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <uartOpen+0x1b6>
              ret = false;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	75fb      	strb	r3, [r7, #23]
            qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->NDTR;
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <uartOpen+0x210>)
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	4413      	add	r3, r2
 8001c3a:	3308      	adds	r3, #8
 8001c3c:	6819      	ldr	r1, [r3, #0]
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <uartOpen+0x22c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	1a8a      	subs	r2, r1, r2
 8001c48:	4910      	ldr	r1, [pc, #64]	; (8001c8c <uartOpen+0x210>)
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	440b      	add	r3, r1
 8001c4e:	601a      	str	r2, [r3, #0]
            qbuffer[ch].out = qbuffer[ch].in;
 8001c50:	79fa      	ldrb	r2, [r7, #7]
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	490d      	ldr	r1, [pc, #52]	; (8001c8c <uartOpen+0x210>)
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	440a      	add	r2, r1
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	490b      	ldr	r1, [pc, #44]	; (8001c8c <uartOpen+0x210>)
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	440b      	add	r3, r1
 8001c62:	3304      	adds	r3, #4
 8001c64:	601a      	str	r2, [r3, #0]
            HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0); //TX DMA
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2046      	movs	r0, #70	; 0x46
 8001c6c:	f004 fd73 	bl	8006756 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001c70:	2046      	movs	r0, #70	; 0x46
 8001c72:	f004 fd8c 	bl	800678e <HAL_NVIC_EnableIRQ>
          break;
 8001c76:	bf00      	nop
  }

  return ret;
 8001c78:	7dfb      	ldrb	r3, [r7, #23]

}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000804 	.word	0x20000804
 8001c88:	40011000 	.word	0x40011000
 8001c8c:	200000b4 	.word	0x200000b4
 8001c90:	200000c4 	.word	0x200000c4
 8001c94:	40023800 	.word	0x40023800
 8001c98:	200000b0 	.word	0x200000b0
 8001c9c:	20000744 	.word	0x20000744
 8001ca0:	20000848 	.word	0x20000848
 8001ca4:	40004400 	.word	0x40004400
 8001ca8:	20000684 	.word	0x20000684

08001cac <uartAvailable>:



uint32_t uartAvailable(uint8_t ch)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <uartAvailable+0x1a>
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d018      	beq.n	8001cf6 <uartAvailable+0x4a>
 8001cc4:	e02f      	b.n	8001d26 <uartAvailable+0x7a>
  {
    /* UART1 */
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <uartAvailable+0x84>)
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	4413      	add	r3, r2
 8001cce:	3308      	adds	r3, #8
 8001cd0:	6819      	ldr	r1, [r3, #0]
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <uartAvailable+0x88>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	1a8a      	subs	r2, r1, r2
 8001cdc:	4914      	ldr	r1, [pc, #80]	; (8001d30 <uartAvailable+0x84>)
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	440b      	add	r3, r1
 8001ce2:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	4a11      	ldr	r2, [pc, #68]	; (8001d30 <uartAvailable+0x84>)
 8001cea:	4413      	add	r3, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff f920 	bl	8000f32 <qbufferAvailable>
 8001cf2:	60f8      	str	r0, [r7, #12]
      break;
 8001cf4:	e017      	b.n	8001d26 <uartAvailable+0x7a>


    /* UART2 */
    case _DEF_UART2:
        qbuffer[ch].in = (qbuffer[ch].len - hdma_usart2_rx.Instance->NDTR);
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <uartAvailable+0x84>)
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3308      	adds	r3, #8
 8001d00:	6819      	ldr	r1, [r3, #0]
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <uartAvailable+0x8c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	1a8a      	subs	r2, r1, r2
 8001d0c:	4908      	ldr	r1, [pc, #32]	; (8001d30 <uartAvailable+0x84>)
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	440b      	add	r3, r1
 8001d12:	601a      	str	r2, [r3, #0]
        ret = qbufferAvailable(&qbuffer[ch]);
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <uartAvailable+0x84>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff f908 	bl	8000f32 <qbufferAvailable>
 8001d22:	60f8      	str	r0, [r7, #12]
        break;
 8001d24:	bf00      	nop

  }

  return ret;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	200000b4 	.word	0x200000b4
 8001d34:	20000744 	.word	0x20000744
 8001d38:	20000684 	.word	0x20000684

08001d3c <uartRead>:



uint8_t uartRead(uint8_t ch)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  switch(ch)
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <uartRead+0x16>
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d008      	beq.n	8001d62 <uartRead+0x26>
 8001d50:	e00f      	b.n	8001d72 <uartRead+0x36>
  {
    /* UART1 */
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 8001d52:	f107 030f 	add.w	r3, r7, #15
 8001d56:	2201      	movs	r2, #1
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4808      	ldr	r0, [pc, #32]	; (8001d7c <uartRead+0x40>)
 8001d5c:	f7ff f8ac 	bl	8000eb8 <qbufferRead>
      break;
 8001d60:	e007      	b.n	8001d72 <uartRead+0x36>


    /* UART2 */
    case _DEF_UART2:
        qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8001d62:	f107 030f 	add.w	r3, r7, #15
 8001d66:	2201      	movs	r2, #1
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <uartRead+0x44>)
 8001d6c:	f7ff f8a4 	bl	8000eb8 <qbufferRead>
        break;
 8001d70:	bf00      	nop

  }

  return ret;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]

}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200000b4 	.word	0x200000b4
 8001d80:	200000c4 	.word	0x200000c4

08001d84 <uartWrite>:



uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
  uint32_t pre_time;

  switch(ch)
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <uartWrite+0x1e>
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d034      	beq.n	8001e0a <uartWrite+0x86>
 8001da0:	e067      	b.n	8001e72 <uartWrite+0xee>
  {
  	/* UART1 */
    case _DEF_UART1:
        pre_time = millis();
 8001da2:	f7fe fef9 	bl	8000b98 <millis>
 8001da6:	6138      	str	r0, [r7, #16]
        while(millis() - pre_time < 100)
 8001da8:	e025      	b.n	8001df6 <uartWrite+0x72>
        {
          if (huart1.gState == HAL_UART_STATE_READY)
 8001daa:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <uartWrite+0xf8>)
 8001dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b20      	cmp	r3, #32
 8001db4:	d11f      	bne.n	8001df6 <uartWrite+0x72>
          {

            for (int i = 0; i < length; i++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	e00b      	b.n	8001dd4 <uartWrite+0x50>
            {
              tx_buf[i] = p_data[i];
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	7819      	ldrb	r1, [r3, #0]
 8001dc4:	4a2e      	ldr	r2, [pc, #184]	; (8001e80 <uartWrite+0xfc>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	4413      	add	r3, r2
 8001dca:	460a      	mov	r2, r1
 8001dcc:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < length; i++)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8ef      	bhi.n	8001dbc <uartWrite+0x38>
            }

            if(HAL_UART_Transmit_DMA(&huart1, &tx_buf[0], length) == HAL_OK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	4927      	ldr	r1, [pc, #156]	; (8001e80 <uartWrite+0xfc>)
 8001de4:	4825      	ldr	r0, [pc, #148]	; (8001e7c <uartWrite+0xf8>)
 8001de6:	f007 fbff 	bl	80095e8 <HAL_UART_Transmit_DMA>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10a      	bne.n	8001e06 <uartWrite+0x82>
            {
              ret = length;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	61fb      	str	r3, [r7, #28]
            }

            break;
 8001df4:	e007      	b.n	8001e06 <uartWrite+0x82>
        while(millis() - pre_time < 100)
 8001df6:	f7fe fecf 	bl	8000b98 <millis>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b63      	cmp	r3, #99	; 0x63
 8001e02:	d9d2      	bls.n	8001daa <uartWrite+0x26>
          }
        }
      break;
 8001e04:	e035      	b.n	8001e72 <uartWrite+0xee>
            break;
 8001e06:	bf00      	nop
      break;
 8001e08:	e033      	b.n	8001e72 <uartWrite+0xee>


    /* UART2 */
    case _DEF_UART2:
        pre_time = millis();
 8001e0a:	f7fe fec5 	bl	8000b98 <millis>
 8001e0e:	6138      	str	r0, [r7, #16]
        while(millis() - pre_time < 100)
 8001e10:	e025      	b.n	8001e5e <uartWrite+0xda>
        {
          if (huart2.gState == HAL_UART_STATE_READY)
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <uartWrite+0x100>)
 8001e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	d11f      	bne.n	8001e5e <uartWrite+0xda>
          {

            for (int i = 0; i < length; i++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e00b      	b.n	8001e3c <uartWrite+0xb8>
            {
              tx_buf[i] = p_data[i];
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	4413      	add	r3, r2
 8001e2a:	7819      	ldrb	r1, [r3, #0]
 8001e2c:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <uartWrite+0xfc>)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	4413      	add	r3, r2
 8001e32:	460a      	mov	r2, r1
 8001e34:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < length; i++)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d8ef      	bhi.n	8001e24 <uartWrite+0xa0>
            }

            if(HAL_UART_Transmit_DMA(&huart2, &tx_buf[0], length) == HAL_OK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	490d      	ldr	r1, [pc, #52]	; (8001e80 <uartWrite+0xfc>)
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <uartWrite+0x100>)
 8001e4e:	f007 fbcb 	bl	80095e8 <HAL_UART_Transmit_DMA>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10a      	bne.n	8001e6e <uartWrite+0xea>
            {
              ret = length;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	61fb      	str	r3, [r7, #28]
            }

            break;
 8001e5c:	e007      	b.n	8001e6e <uartWrite+0xea>
        while(millis() - pre_time < 100)
 8001e5e:	f7fe fe9b 	bl	8000b98 <millis>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b63      	cmp	r3, #99	; 0x63
 8001e6a:	d9d2      	bls.n	8001e12 <uartWrite+0x8e>
          }
        }
      break;
 8001e6c:	e000      	b.n	8001e70 <uartWrite+0xec>
            break;
 8001e6e:	bf00      	nop
      break;
 8001e70:	bf00      	nop

  }
  return ret;
 8001e72:	69fb      	ldr	r3, [r7, #28]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000804 	.word	0x20000804
 8001e80:	200001c4 	.word	0x200001c4
 8001e84:	20000848 	.word	0x20000848

08001e88 <uartPrintf>:



uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8001e88:	b40e      	push	{r1, r2, r3}
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b0c7      	sub	sp, #284	; 0x11c
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4602      	mov	r2, r0
 8001e92:	1dfb      	adds	r3, r7, #7
 8001e94:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8001e96:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	f107 0010 	add.w	r0, r7, #16
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001eae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eb2:	f009 fa4b 	bl	800b34c <vsniprintf>
 8001eb6:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8001eba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ebe:	f107 0110 	add.w	r1, r7, #16
 8001ec2:	1dfb      	adds	r3, r7, #7
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ff5c 	bl	8001d84 <uartWrite>
 8001ecc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8001ed0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001eda:	46bd      	mov	sp, r7
 8001edc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ee0:	b003      	add	sp, #12
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  return;
 8001f14:	bf00      	nop
}
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a4c      	ldr	r2, [pc, #304]	; (8002070 <HAL_UART_MspInit+0x150>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	f040 8092 	bne.w	8002068 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_UART_MspInit+0x154>)
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	4a49      	ldr	r2, [pc, #292]	; (8002074 <HAL_UART_MspInit+0x154>)
 8001f4e:	f043 0310 	orr.w	r3, r3, #16
 8001f52:	6453      	str	r3, [r2, #68]	; 0x44
 8001f54:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_UART_MspInit+0x154>)
 8001f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	4b43      	ldr	r3, [pc, #268]	; (8002074 <HAL_UART_MspInit+0x154>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	4a42      	ldr	r2, [pc, #264]	; (8002074 <HAL_UART_MspInit+0x154>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f70:	4b40      	ldr	r3, [pc, #256]	; (8002074 <HAL_UART_MspInit+0x154>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001f7c:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f8e:	2307      	movs	r3, #7
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4619      	mov	r1, r3
 8001f98:	4837      	ldr	r0, [pc, #220]	; (8002078 <HAL_UART_MspInit+0x158>)
 8001f9a:	f005 f88d 	bl	80070b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001f9e:	4b37      	ldr	r3, [pc, #220]	; (800207c <HAL_UART_MspInit+0x15c>)
 8001fa0:	4a37      	ldr	r2, [pc, #220]	; (8002080 <HAL_UART_MspInit+0x160>)
 8001fa2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001fa4:	4b35      	ldr	r3, [pc, #212]	; (800207c <HAL_UART_MspInit+0x15c>)
 8001fa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001faa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fac:	4b33      	ldr	r3, [pc, #204]	; (800207c <HAL_UART_MspInit+0x15c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb2:	4b32      	ldr	r3, [pc, #200]	; (800207c <HAL_UART_MspInit+0x15c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb8:	4b30      	ldr	r3, [pc, #192]	; (800207c <HAL_UART_MspInit+0x15c>)
 8001fba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fbe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fc0:	4b2e      	ldr	r3, [pc, #184]	; (800207c <HAL_UART_MspInit+0x15c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc6:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_UART_MspInit+0x15c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001fcc:	4b2b      	ldr	r3, [pc, #172]	; (800207c <HAL_UART_MspInit+0x15c>)
 8001fce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fd2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd4:	4b29      	ldr	r3, [pc, #164]	; (800207c <HAL_UART_MspInit+0x15c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fda:	4b28      	ldr	r3, [pc, #160]	; (800207c <HAL_UART_MspInit+0x15c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001fe0:	4826      	ldr	r0, [pc, #152]	; (800207c <HAL_UART_MspInit+0x15c>)
 8001fe2:	f004 fbfd 	bl	80067e0 <HAL_DMA_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001fec:	f7fe fe44 	bl	8000c78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a22      	ldr	r2, [pc, #136]	; (800207c <HAL_UART_MspInit+0x15c>)
 8001ff4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ff6:	4a21      	ldr	r2, [pc, #132]	; (800207c <HAL_UART_MspInit+0x15c>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_UART_MspInit+0x164>)
 8001ffe:	4a22      	ldr	r2, [pc, #136]	; (8002088 <HAL_UART_MspInit+0x168>)
 8002000:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_UART_MspInit+0x164>)
 8002004:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002008:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800200a:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <HAL_UART_MspInit+0x164>)
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002010:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <HAL_UART_MspInit+0x164>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <HAL_UART_MspInit+0x164>)
 8002018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800201c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800201e:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_UART_MspInit+0x164>)
 8002020:	2200      	movs	r2, #0
 8002022:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_UART_MspInit+0x164>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <HAL_UART_MspInit+0x164>)
 800202c:	2200      	movs	r2, #0
 800202e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_UART_MspInit+0x164>)
 8002032:	2200      	movs	r2, #0
 8002034:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <HAL_UART_MspInit+0x164>)
 8002038:	2200      	movs	r2, #0
 800203a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800203c:	4811      	ldr	r0, [pc, #68]	; (8002084 <HAL_UART_MspInit+0x164>)
 800203e:	f004 fbcf 	bl	80067e0 <HAL_DMA_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002048:	f7fe fe16 	bl	8000c78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <HAL_UART_MspInit+0x164>)
 8002050:	635a      	str	r2, [r3, #52]	; 0x34
 8002052:	4a0c      	ldr	r2, [pc, #48]	; (8002084 <HAL_UART_MspInit+0x164>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002058:	2200      	movs	r2, #0
 800205a:	2100      	movs	r1, #0
 800205c:	2025      	movs	r0, #37	; 0x25
 800205e:	f004 fb7a 	bl	8006756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002062:	2025      	movs	r0, #37	; 0x25
 8002064:	f004 fb93 	bl	800678e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002068:	bf00      	nop
 800206a:	3728      	adds	r7, #40	; 0x28
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40011000 	.word	0x40011000
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000
 800207c:	20000744 	.word	0x20000744
 8002080:	40026440 	.word	0x40026440
 8002084:	200006e4 	.word	0x200006e4
 8002088:	400264b8 	.word	0x400264b8

0800208c <HAL_UART_MspDeInit>:


void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <HAL_UART_MspDeInit+0x4c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d117      	bne.n	80020ce <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800209e:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <HAL_UART_MspDeInit+0x50>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <HAL_UART_MspDeInit+0x50>)
 80020a4:	f023 0310 	bic.w	r3, r3, #16
 80020a8:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10|GPIO_PIN_15);
 80020aa:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 80020ae:	480c      	ldr	r0, [pc, #48]	; (80020e0 <HAL_UART_MspDeInit+0x54>)
 80020b0:	f005 f986 	bl	80073c0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 fc3f 	bl	800693c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	4618      	mov	r0, r3
 80020c4:	f004 fc3a 	bl	800693c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80020c8:	2025      	movs	r0, #37	; 0x25
 80020ca:	f004 fb6e 	bl	80067aa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40011000 	.word	0x40011000
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020000 	.word	0x40020000

080020e4 <hwInit>:



//TODO 하드웨어 초기화
void hwInit(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  bspInit();
 80020e8:	f7fe fd1e 	bl	8000b28 <bspInit>

  uartInit();
 80020ec:	f7ff fcac 	bl	8001a48 <uartInit>
  ledInit();
 80020f0:	f7ff f98a 	bl	8001408 <ledInit>
  gpioInit();
 80020f4:	f7ff f85a 	bl	80011ac <gpioInit>

  if (sdInit() == true)
 80020f8:	f7ff f9ec 	bl	80014d4 <sdInit>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <hwInit+0x22>
  {
	 fatfsInit();
 8002102:	f7ff f82f 	bl	8001164 <fatfsInit>
  }

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	4a08      	ldr	r2, [pc, #32]	; (800213c <disk_status+0x30>)
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	79fa      	ldrb	r2, [r7, #7]
 8002124:	4905      	ldr	r1, [pc, #20]	; (800213c <disk_status+0x30>)
 8002126:	440a      	add	r2, r1
 8002128:	7b12      	ldrb	r2, [r2, #12]
 800212a:	4610      	mov	r0, r2
 800212c:	4798      	blx	r3
 800212e:	4603      	mov	r3, r0
 8002130:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	200002f0 	.word	0x200002f0

08002140 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <disk_initialize+0x48>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d111      	bne.n	800217c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <disk_initialize+0x48>)
 800215c:	2101      	movs	r1, #1
 800215e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <disk_initialize+0x48>)
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	79fa      	ldrb	r2, [r7, #7]
 800216e:	4906      	ldr	r1, [pc, #24]	; (8002188 <disk_initialize+0x48>)
 8002170:	440a      	add	r2, r1
 8002172:	7b12      	ldrb	r2, [r2, #12]
 8002174:	4610      	mov	r0, r2
 8002176:	4798      	blx	r3
 8002178:	4603      	mov	r3, r0
 800217a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200002f0 	.word	0x200002f0

0800218c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800218c:	b590      	push	{r4, r7, lr}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	4603      	mov	r3, r0
 800219a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <disk_read+0x3c>)
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	689c      	ldr	r4, [r3, #8]
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <disk_read+0x3c>)
 80021ac:	4413      	add	r3, r2
 80021ae:	7b18      	ldrb	r0, [r3, #12]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	47a0      	blx	r4
 80021b8:	4603      	mov	r3, r0
 80021ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80021bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	371c      	adds	r7, #28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd90      	pop	{r4, r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200002f0 	.word	0x200002f0

080021cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	4603      	mov	r3, r0
 80021da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <disk_write+0x3c>)
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	68dc      	ldr	r4, [r3, #12]
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	4a07      	ldr	r2, [pc, #28]	; (8002208 <disk_write+0x3c>)
 80021ec:	4413      	add	r3, r2
 80021ee:	7b18      	ldrb	r0, [r3, #12]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	47a0      	blx	r4
 80021f8:	4603      	mov	r3, r0
 80021fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	371c      	adds	r7, #28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd90      	pop	{r4, r7, pc}
 8002206:	bf00      	nop
 8002208:	200002f0 	.word	0x200002f0

0800220c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	603a      	str	r2, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	460b      	mov	r3, r1
 800221a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	4a09      	ldr	r2, [pc, #36]	; (8002244 <disk_ioctl+0x38>)
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	79fa      	ldrb	r2, [r7, #7]
 800222a:	4906      	ldr	r1, [pc, #24]	; (8002244 <disk_ioctl+0x38>)
 800222c:	440a      	add	r2, r1
 800222e:	7b10      	ldrb	r0, [r2, #12]
 8002230:	79b9      	ldrb	r1, [r7, #6]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	4798      	blx	r3
 8002236:	4603      	mov	r3, r0
 8002238:	73fb      	strb	r3, [r7, #15]
  return res;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200002f0 	.word	0x200002f0

08002248 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return 0;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3301      	adds	r3, #1
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002268:	89fb      	ldrh	r3, [r7, #14]
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	b21a      	sxth	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b21b      	sxth	r3, r3
 8002274:	4313      	orrs	r3, r2
 8002276:	b21b      	sxth	r3, r3
 8002278:	81fb      	strh	r3, [r7, #14]
	return rv;
 800227a:	89fb      	ldrh	r3, [r7, #14]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3303      	adds	r3, #3
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	3202      	adds	r2, #2
 80022a0:	7812      	ldrb	r2, [r2, #0]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	3201      	adds	r2, #1
 80022ae:	7812      	ldrb	r2, [r2, #0]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
	return rv;
 80022c0:	68fb      	ldr	r3, [r7, #12]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	887a      	ldrh	r2, [r7, #2]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	887b      	ldrh	r3, [r7, #2]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	701a      	strb	r2, [r3, #0]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	701a      	strb	r2, [r3, #0]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00d      	beq.n	8002392 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	1c53      	adds	r3, r2, #1
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	1c59      	adds	r1, r3, #1
 8002380:	6179      	str	r1, [r7, #20]
 8002382:	7812      	ldrb	r2, [r2, #0]
 8002384:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3b01      	subs	r3, #1
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f1      	bne.n	8002376 <mem_cpy+0x1a>
	}
}
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800239e:	b480      	push	{r7}
 80023a0:	b087      	sub	sp, #28
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	617a      	str	r2, [r7, #20]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3b01      	subs	r3, #1
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f3      	bne.n	80023ae <mem_set+0x10>
}
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	61fa      	str	r2, [r7, #28]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	61ba      	str	r2, [r7, #24]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	1acb      	subs	r3, r1, r3
 8002400:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3b01      	subs	r3, #1
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <mem_cmp+0x40>
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0eb      	beq.n	80023ec <mem_cmp+0x18>

	return r;
 8002414:	697b      	ldr	r3, [r7, #20]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800242c:	e002      	b.n	8002434 <chk_chr+0x12>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3301      	adds	r3, #1
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <chk_chr+0x26>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	4293      	cmp	r3, r2
 8002446:	d1f2      	bne.n	800242e <chk_chr+0xc>
	return *str;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	781b      	ldrb	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	e029      	b.n	80024c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800246c:	4a27      	ldr	r2, [pc, #156]	; (800250c <chk_lock+0xb4>)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	4413      	add	r3, r2
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d01d      	beq.n	80024b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800247a:	4a24      	ldr	r2, [pc, #144]	; (800250c <chk_lock+0xb4>)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	4413      	add	r3, r2
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d116      	bne.n	80024ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800248c:	4a1f      	ldr	r2, [pc, #124]	; (800250c <chk_lock+0xb4>)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	4413      	add	r3, r2
 8002494:	3304      	adds	r3, #4
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800249c:	429a      	cmp	r2, r3
 800249e:	d10c      	bne.n	80024ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80024a0:	4a1a      	ldr	r2, [pc, #104]	; (800250c <chk_lock+0xb4>)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	4413      	add	r3, r2
 80024a8:	3308      	adds	r3, #8
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d102      	bne.n	80024ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80024b4:	e007      	b.n	80024c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3301      	adds	r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d9d2      	bls.n	800246c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d109      	bne.n	80024e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <chk_lock+0x80>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d101      	bne.n	80024dc <chk_lock+0x84>
 80024d8:	2300      	movs	r3, #0
 80024da:	e010      	b.n	80024fe <chk_lock+0xa6>
 80024dc:	2312      	movs	r3, #18
 80024de:	e00e      	b.n	80024fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d108      	bne.n	80024f8 <chk_lock+0xa0>
 80024e6:	4a09      	ldr	r2, [pc, #36]	; (800250c <chk_lock+0xb4>)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	4413      	add	r3, r2
 80024ee:	330c      	adds	r3, #12
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f6:	d101      	bne.n	80024fc <chk_lock+0xa4>
 80024f8:	2310      	movs	r3, #16
 80024fa:	e000      	b.n	80024fe <chk_lock+0xa6>
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	200002d0 	.word	0x200002d0

08002510 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	e002      	b.n	8002522 <enq_lock+0x12>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3301      	adds	r3, #1
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d806      	bhi.n	8002536 <enq_lock+0x26>
 8002528:	4a09      	ldr	r2, [pc, #36]	; (8002550 <enq_lock+0x40>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	4413      	add	r3, r2
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f2      	bne.n	800251c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b02      	cmp	r3, #2
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	200002d0 	.word	0x200002d0

08002554 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	e01f      	b.n	80025a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8002564:	4a41      	ldr	r2, [pc, #260]	; (800266c <inc_lock+0x118>)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	4413      	add	r3, r2
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d113      	bne.n	800259e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8002576:	4a3d      	ldr	r2, [pc, #244]	; (800266c <inc_lock+0x118>)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	4413      	add	r3, r2
 800257e:	3304      	adds	r3, #4
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8002586:	429a      	cmp	r2, r3
 8002588:	d109      	bne.n	800259e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800258a:	4a38      	ldr	r2, [pc, #224]	; (800266c <inc_lock+0x118>)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	4413      	add	r3, r2
 8002592:	3308      	adds	r3, #8
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800259a:	429a      	cmp	r2, r3
 800259c:	d006      	beq.n	80025ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3301      	adds	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d9dc      	bls.n	8002564 <inc_lock+0x10>
 80025aa:	e000      	b.n	80025ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80025ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d132      	bne.n	800261a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	e002      	b.n	80025c0 <inc_lock+0x6c>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	3301      	adds	r3, #1
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d806      	bhi.n	80025d4 <inc_lock+0x80>
 80025c6:	4a29      	ldr	r2, [pc, #164]	; (800266c <inc_lock+0x118>)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	4413      	add	r3, r2
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f2      	bne.n	80025ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d101      	bne.n	80025de <inc_lock+0x8a>
 80025da:	2300      	movs	r3, #0
 80025dc:	e040      	b.n	8002660 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4922      	ldr	r1, [pc, #136]	; (800266c <inc_lock+0x118>)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	440b      	add	r3, r1
 80025ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	491e      	ldr	r1, [pc, #120]	; (800266c <inc_lock+0x118>)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	440b      	add	r3, r1
 80025f8:	3304      	adds	r3, #4
 80025fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	491a      	ldr	r1, [pc, #104]	; (800266c <inc_lock+0x118>)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	440b      	add	r3, r1
 8002608:	3308      	adds	r3, #8
 800260a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800260c:	4a17      	ldr	r2, [pc, #92]	; (800266c <inc_lock+0x118>)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	4413      	add	r3, r2
 8002614:	330c      	adds	r3, #12
 8002616:	2200      	movs	r2, #0
 8002618:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d009      	beq.n	8002634 <inc_lock+0xe0>
 8002620:	4a12      	ldr	r2, [pc, #72]	; (800266c <inc_lock+0x118>)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	4413      	add	r3, r2
 8002628:	330c      	adds	r3, #12
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <inc_lock+0xe0>
 8002630:	2300      	movs	r3, #0
 8002632:	e015      	b.n	8002660 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d108      	bne.n	800264c <inc_lock+0xf8>
 800263a:	4a0c      	ldr	r2, [pc, #48]	; (800266c <inc_lock+0x118>)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	4413      	add	r3, r2
 8002642:	330c      	adds	r3, #12
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	3301      	adds	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	e001      	b.n	8002650 <inc_lock+0xfc>
 800264c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002650:	4906      	ldr	r1, [pc, #24]	; (800266c <inc_lock+0x118>)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	440b      	add	r3, r1
 8002658:	330c      	adds	r3, #12
 800265a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3301      	adds	r3, #1
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	200002d0 	.word	0x200002d0

08002670 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d825      	bhi.n	80026d0 <dec_lock+0x60>
		n = Files[i].ctr;
 8002684:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <dec_lock+0x74>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	4413      	add	r3, r2
 800268c:	330c      	adds	r3, #12
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002692:	89fb      	ldrh	r3, [r7, #14]
 8002694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002698:	d101      	bne.n	800269e <dec_lock+0x2e>
 800269a:	2300      	movs	r3, #0
 800269c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800269e:	89fb      	ldrh	r3, [r7, #14]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <dec_lock+0x3a>
 80026a4:	89fb      	ldrh	r3, [r7, #14]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80026aa:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <dec_lock+0x74>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	4413      	add	r3, r2
 80026b2:	330c      	adds	r3, #12
 80026b4:	89fa      	ldrh	r2, [r7, #14]
 80026b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80026b8:	89fb      	ldrh	r3, [r7, #14]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d105      	bne.n	80026ca <dec_lock+0x5a>
 80026be:	4a09      	ldr	r2, [pc, #36]	; (80026e4 <dec_lock+0x74>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	4413      	add	r3, r2
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	737b      	strb	r3, [r7, #13]
 80026ce:	e001      	b.n	80026d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80026d0:	2302      	movs	r3, #2
 80026d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80026d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	200002d0 	.word	0x200002d0

080026e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	e010      	b.n	8002718 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80026f6:	4a0d      	ldr	r2, [pc, #52]	; (800272c <clear_lock+0x44>)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	4413      	add	r3, r2
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	d105      	bne.n	8002712 <clear_lock+0x2a>
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <clear_lock+0x44>)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	4413      	add	r3, r2
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3301      	adds	r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d9eb      	bls.n	80026f6 <clear_lock+0xe>
	}
}
 800271e:	bf00      	nop
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	200002d0 	.word	0x200002d0

08002730 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	78db      	ldrb	r3, [r3, #3]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d034      	beq.n	80027ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7858      	ldrb	r0, [r3, #1]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002754:	2301      	movs	r3, #1
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	f7ff fd38 	bl	80021cc <disk_write>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <sync_window+0x38>
			res = FR_DISK_ERR;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	e022      	b.n	80027ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	1ad2      	subs	r2, r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	429a      	cmp	r2, r3
 800277c:	d217      	bcs.n	80027ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	789b      	ldrb	r3, [r3, #2]
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	e010      	b.n	80027a8 <sync_window+0x78>
					wsect += fs->fsize;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4413      	add	r3, r2
 800278e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7858      	ldrb	r0, [r3, #1]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800279a:	2301      	movs	r3, #1
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	f7ff fd15 	bl	80021cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d8eb      	bhi.n	8002786 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d01b      	beq.n	8002808 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ffad 	bl	8002730 <sync_window>
 80027d6:	4603      	mov	r3, r0
 80027d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d113      	bne.n	8002808 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	7858      	ldrb	r0, [r3, #1]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80027ea:	2301      	movs	r3, #1
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	f7ff fccd 	bl	800218c <disk_read>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d004      	beq.n	8002802 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80027f8:	f04f 33ff 	mov.w	r3, #4294967295
 80027fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8002808:	7bfb      	ldrb	r3, [r7, #15]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ff87 	bl	8002730 <sync_window>
 8002822:	4603      	mov	r3, r0
 8002824:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d158      	bne.n	80028de <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d148      	bne.n	80028c6 <sync_fs+0xb2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	791b      	ldrb	r3, [r3, #4]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d144      	bne.n	80028c6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3334      	adds	r3, #52	; 0x34
 8002840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fda9 	bl	800239e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3334      	adds	r3, #52	; 0x34
 8002850:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002854:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fd38 	bl	80022ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3334      	adds	r3, #52	; 0x34
 8002862:	4921      	ldr	r1, [pc, #132]	; (80028e8 <sync_fs+0xd4>)
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fd4d 	bl	8002304 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3334      	adds	r3, #52	; 0x34
 800286e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002872:	491e      	ldr	r1, [pc, #120]	; (80028ec <sync_fs+0xd8>)
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fd45 	bl	8002304 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3334      	adds	r3, #52	; 0x34
 800287e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	4619      	mov	r1, r3
 8002888:	4610      	mov	r0, r2
 800288a:	f7ff fd3b 	bl	8002304 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3334      	adds	r3, #52	; 0x34
 8002892:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	4619      	mov	r1, r3
 800289c:	4610      	mov	r0, r2
 800289e:	f7ff fd31 	bl	8002304 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7858      	ldrb	r0, [r3, #1]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ba:	2301      	movs	r3, #1
 80028bc:	f7ff fc86 	bl	80021cc <disk_write>
			fs->fsi_flag = 0;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	785b      	ldrb	r3, [r3, #1]
 80028ca:	2200      	movs	r2, #0
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fc9c 	bl	800220c <disk_ioctl>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <sync_fs+0xca>
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80028de:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	41615252 	.word	0x41615252
 80028ec:	61417272 	.word	0x61417272

080028f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	3b02      	subs	r3, #2
 80028fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	3b02      	subs	r3, #2
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d301      	bcc.n	8002910 <clust2sect+0x20>
 800290c:	2300      	movs	r3, #0
 800290e:	e008      	b.n	8002922 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	895b      	ldrh	r3, [r3, #10]
 8002914:	461a      	mov	r2, r3
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	fb03 f202 	mul.w	r2, r3, r2
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	4413      	add	r3, r2
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d904      	bls.n	800294e <get_fat+0x20>
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d302      	bcc.n	8002954 <get_fat+0x26>
		val = 1;	/* Internal error */
 800294e:	2301      	movs	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e08f      	b.n	8002a74 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002954:	f04f 33ff 	mov.w	r3, #4294967295
 8002958:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d062      	beq.n	8002a28 <get_fat+0xfa>
 8002962:	2b03      	cmp	r3, #3
 8002964:	dc7c      	bgt.n	8002a60 <get_fat+0x132>
 8002966:	2b01      	cmp	r3, #1
 8002968:	d002      	beq.n	8002970 <get_fat+0x42>
 800296a:	2b02      	cmp	r3, #2
 800296c:	d042      	beq.n	80029f4 <get_fat+0xc6>
 800296e:	e077      	b.n	8002a60 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4413      	add	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	0a5b      	lsrs	r3, r3, #9
 8002986:	4413      	add	r3, r2
 8002988:	4619      	mov	r1, r3
 800298a:	6938      	ldr	r0, [r7, #16]
 800298c:	f7ff ff14 	bl	80027b8 <move_window>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d167      	bne.n	8002a66 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	60fa      	str	r2, [r7, #12]
 800299c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	0a5b      	lsrs	r3, r3, #9
 80029b2:	4413      	add	r3, r2
 80029b4:	4619      	mov	r1, r3
 80029b6:	6938      	ldr	r0, [r7, #16]
 80029b8:	f7ff fefe 	bl	80027b8 <move_window>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d153      	bne.n	8002a6a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	461a      	mov	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <get_fat+0xbc>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	e002      	b.n	80029f0 <get_fat+0xc2>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f0:	617b      	str	r3, [r7, #20]
			break;
 80029f2:	e03f      	b.n	8002a74 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	4413      	add	r3, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	6938      	ldr	r0, [r7, #16]
 8002a02:	f7ff fed9 	bl	80027b8 <move_window>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d130      	bne.n	8002a6e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fc1b 	bl	8002258 <ld_word>
 8002a22:	4603      	mov	r3, r0
 8002a24:	617b      	str	r3, [r7, #20]
			break;
 8002a26:	e025      	b.n	8002a74 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	09db      	lsrs	r3, r3, #7
 8002a30:	4413      	add	r3, r2
 8002a32:	4619      	mov	r1, r3
 8002a34:	6938      	ldr	r0, [r7, #16]
 8002a36:	f7ff febf 	bl	80027b8 <move_window>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d118      	bne.n	8002a72 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002a4e:	4413      	add	r3, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fc19 	bl	8002288 <ld_dword>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a5c:	617b      	str	r3, [r7, #20]
			break;
 8002a5e:	e009      	b.n	8002a74 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8002a60:	2301      	movs	r3, #1
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	e006      	b.n	8002a74 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a66:	bf00      	nop
 8002a68:	e004      	b.n	8002a74 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a6a:	bf00      	nop
 8002a6c:	e002      	b.n	8002a74 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002a6e:	bf00      	nop
 8002a70:	e000      	b.n	8002a74 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002a72:	bf00      	nop
		}
	}

	return val;
 8002a74:	697b      	ldr	r3, [r7, #20]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8002a7e:	b590      	push	{r4, r7, lr}
 8002a80:	b089      	sub	sp, #36	; 0x24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	f240 80d2 	bls.w	8002c3a <put_fat+0x1bc>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	f080 80cc 	bcs.w	8002c3a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	f000 8096 	beq.w	8002bd8 <put_fat+0x15a>
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	f300 80cd 	bgt.w	8002c4c <put_fat+0x1ce>
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d002      	beq.n	8002abc <put_fat+0x3e>
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d06e      	beq.n	8002b98 <put_fat+0x11a>
 8002aba:	e0c7      	b.n	8002c4c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	085b      	lsrs	r3, r3, #1
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	0a5b      	lsrs	r3, r3, #9
 8002ad2:	4413      	add	r3, r2
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f7ff fe6e 	bl	80027b8 <move_window>
 8002adc:	4603      	mov	r3, r0
 8002ade:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002ae0:	7ffb      	ldrb	r3, [r7, #31]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f040 80ab 	bne.w	8002c3e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	1c59      	adds	r1, r3, #1
 8002af2:	61b9      	str	r1, [r7, #24]
 8002af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af8:	4413      	add	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <put_fat+0xa4>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	b25b      	sxtb	r3, r3
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	b25a      	sxtb	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	b25b      	sxtb	r3, r3
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	b25b      	sxtb	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	e001      	b.n	8002b26 <put_fat+0xa8>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	0a5b      	lsrs	r3, r3, #9
 8002b38:	4413      	add	r3, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff fe3b 	bl	80027b8 <move_window>
 8002b42:	4603      	mov	r3, r0
 8002b44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002b46:	7ffb      	ldrb	r3, [r7, #31]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d17a      	bne.n	8002c42 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b58:	4413      	add	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <put_fat+0xf0>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	e00e      	b.n	8002b8c <put_fat+0x10e>
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	b25b      	sxtb	r3, r3
 8002b74:	f023 030f 	bic.w	r3, r3, #15
 8002b78:	b25a      	sxtb	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	b25b      	sxtb	r3, r3
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	4313      	orrs	r3, r2
 8002b88:	b25b      	sxtb	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	70da      	strb	r2, [r3, #3]
			break;
 8002b96:	e059      	b.n	8002c4c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f7ff fe07 	bl	80027b8 <move_window>
 8002baa:	4603      	mov	r3, r0
 8002bac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002bae:	7ffb      	ldrb	r3, [r7, #31]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d148      	bne.n	8002c46 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002bc2:	4413      	add	r3, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fb7f 	bl	80022ce <st_word>
			fs->wflag = 1;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	70da      	strb	r2, [r3, #3]
			break;
 8002bd6:	e039      	b.n	8002c4c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	09db      	lsrs	r3, r3, #7
 8002be0:	4413      	add	r3, r2
 8002be2:	4619      	mov	r1, r3
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f7ff fde7 	bl	80027b8 <move_window>
 8002bea:	4603      	mov	r3, r0
 8002bec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002bee:	7ffb      	ldrb	r3, [r7, #31]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d12a      	bne.n	8002c4a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002c08:	4413      	add	r3, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fb3c 	bl	8002288 <ld_dword>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002c16:	4323      	orrs	r3, r4
 8002c18:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002c28:	4413      	add	r3, r2
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fb69 	bl	8002304 <st_dword>
			fs->wflag = 1;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2201      	movs	r2, #1
 8002c36:	70da      	strb	r2, [r3, #3]
			break;
 8002c38:	e008      	b.n	8002c4c <put_fat+0x1ce>
		}
	}
 8002c3a:	bf00      	nop
 8002c3c:	e006      	b.n	8002c4c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8002c3e:	bf00      	nop
 8002c40:	e004      	b.n	8002c4c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8002c42:	bf00      	nop
 8002c44:	e002      	b.n	8002c4c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8002c46:	bf00      	nop
 8002c48:	e000      	b.n	8002c4c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8002c4a:	bf00      	nop
	return res;
 8002c4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3724      	adds	r7, #36	; 0x24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd90      	pop	{r4, r7, pc}

08002c56 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b088      	sub	sp, #32
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d904      	bls.n	8002c7c <remove_chain+0x26>
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d301      	bcc.n	8002c80 <remove_chain+0x2a>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e04b      	b.n	8002d18 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00c      	beq.n	8002ca0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002c86:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	69b8      	ldr	r0, [r7, #24]
 8002c8e:	f7ff fef6 	bl	8002a7e <put_fat>
 8002c92:	4603      	mov	r3, r0
 8002c94:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8002c96:	7ffb      	ldrb	r3, [r7, #31]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <remove_chain+0x4a>
 8002c9c:	7ffb      	ldrb	r3, [r7, #31]
 8002c9e:	e03b      	b.n	8002d18 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f7ff fe43 	bl	800292e <get_fat>
 8002ca8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d031      	beq.n	8002d14 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <remove_chain+0x64>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e02e      	b.n	8002d18 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d101      	bne.n	8002cc6 <remove_chain+0x70>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e028      	b.n	8002d18 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	69b8      	ldr	r0, [r7, #24]
 8002ccc:	f7ff fed7 	bl	8002a7e <put_fat>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8002cd4:	7ffb      	ldrb	r3, [r7, #31]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <remove_chain+0x88>
 8002cda:	7ffb      	ldrb	r3, [r7, #31]
 8002cdc:	e01c      	b.n	8002d18 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	3b02      	subs	r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d20b      	bcs.n	8002d04 <remove_chain+0xae>
			fs->free_clst++;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	791b      	ldrb	r3, [r3, #4]
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d3c6      	bcc.n	8002ca0 <remove_chain+0x4a>
 8002d12:	e000      	b.n	8002d16 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8002d14:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3720      	adds	r7, #32
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10d      	bne.n	8002d52 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d004      	beq.n	8002d4c <create_chain+0x2c>
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d31b      	bcc.n	8002d84 <create_chain+0x64>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	61bb      	str	r3, [r7, #24]
 8002d50:	e018      	b.n	8002d84 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002d52:	6839      	ldr	r1, [r7, #0]
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff fdea 	bl	800292e <get_fat>
 8002d5a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d801      	bhi.n	8002d66 <create_chain+0x46>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e070      	b.n	8002e48 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6c:	d101      	bne.n	8002d72 <create_chain+0x52>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	e06a      	b.n	8002e48 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d201      	bcs.n	8002d80 <create_chain+0x60>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	e063      	b.n	8002e48 <create_chain+0x128>
		scl = clst;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d307      	bcc.n	8002da8 <create_chain+0x88>
				ncl = 2;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d901      	bls.n	8002da8 <create_chain+0x88>
 8002da4:	2300      	movs	r3, #0
 8002da6:	e04f      	b.n	8002e48 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002da8:	69f9      	ldr	r1, [r7, #28]
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff fdbf 	bl	800292e <get_fat>
 8002db0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00e      	beq.n	8002dd6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d003      	beq.n	8002dc6 <create_chain+0xa6>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d101      	bne.n	8002dca <create_chain+0xaa>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	e03e      	b.n	8002e48 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d1da      	bne.n	8002d88 <create_chain+0x68>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e038      	b.n	8002e48 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8002dd6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8002dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ddc:	69f9      	ldr	r1, [r7, #28]
 8002dde:	6938      	ldr	r0, [r7, #16]
 8002de0:	f7ff fe4d 	bl	8002a7e <put_fat>
 8002de4:	4603      	mov	r3, r0
 8002de6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <create_chain+0xe2>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d006      	beq.n	8002e02 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	6839      	ldr	r1, [r7, #0]
 8002df8:	6938      	ldr	r0, [r7, #16]
 8002dfa:	f7ff fe40 	bl	8002a7e <put_fat>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d116      	bne.n	8002e36 <create_chain+0x116>
		fs->last_clst = ncl;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	3b02      	subs	r3, #2
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d804      	bhi.n	8002e26 <create_chain+0x106>
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	1e5a      	subs	r2, r3, #1
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	791b      	ldrb	r3, [r3, #4]
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	711a      	strb	r2, [r3, #4]
 8002e34:	e007      	b.n	8002e46 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d102      	bne.n	8002e42 <create_chain+0x122>
 8002e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e40:	e000      	b.n	8002e44 <create_chain+0x124>
 8002e42:	2301      	movs	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002e46:	69fb      	ldr	r3, [r7, #28]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3720      	adds	r7, #32
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	3304      	adds	r3, #4
 8002e66:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	0a5b      	lsrs	r3, r3, #9
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	8952      	ldrh	r2, [r2, #10]
 8002e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e74:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1d1a      	adds	r2, r3, #4
 8002e7a:	613a      	str	r2, [r7, #16]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <clmt_clust+0x3a>
 8002e86:	2300      	movs	r3, #0
 8002e88:	e010      	b.n	8002eac <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d307      	bcc.n	8002ea2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002ea0:	e7e9      	b.n	8002e76 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8002ea2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	4413      	add	r3, r2
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ece:	d204      	bcs.n	8002eda <dir_sdi+0x22>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <dir_sdi+0x26>
		return FR_INT_ERR;
 8002eda:	2302      	movs	r3, #2
 8002edc:	e063      	b.n	8002fa6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d106      	bne.n	8002efe <dir_sdi+0x46>
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d902      	bls.n	8002efe <dir_sdi+0x46>
		clst = fs->dirbase;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10c      	bne.n	8002f1e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	8912      	ldrh	r2, [r2, #8]
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d301      	bcc.n	8002f14 <dir_sdi+0x5c>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e048      	b.n	8002fa6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	61da      	str	r2, [r3, #28]
 8002f1c:	e029      	b.n	8002f72 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	895b      	ldrh	r3, [r3, #10]
 8002f22:	025b      	lsls	r3, r3, #9
 8002f24:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002f26:	e019      	b.n	8002f5c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6979      	ldr	r1, [r7, #20]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fcfe 	bl	800292e <get_fat>
 8002f32:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3a:	d101      	bne.n	8002f40 <dir_sdi+0x88>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e032      	b.n	8002fa6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d904      	bls.n	8002f50 <dir_sdi+0x98>
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d301      	bcc.n	8002f54 <dir_sdi+0x9c>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e028      	b.n	8002fa6 <dir_sdi+0xee>
			ofs -= csz;
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d2e1      	bcs.n	8002f28 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8002f64:	6979      	ldr	r1, [r7, #20]
 8002f66:	6938      	ldr	r0, [r7, #16]
 8002f68:	f7ff fcc2 	bl	80028f0 <clust2sect>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <dir_sdi+0xcc>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e010      	b.n	8002fa6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69da      	ldr	r2, [r3, #28]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	0a5b      	lsrs	r3, r3, #9
 8002f8c:	441a      	add	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9e:	441a      	add	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b086      	sub	sp, #24
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	3320      	adds	r3, #32
 8002fc4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <dir_next+0x28>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fd4:	d301      	bcc.n	8002fda <dir_next+0x2c>
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	e0aa      	b.n	8003130 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f040 8098 	bne.w	8003116 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10b      	bne.n	8003010 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	8912      	ldrh	r2, [r2, #8]
 8003000:	4293      	cmp	r3, r2
 8003002:	f0c0 8088 	bcc.w	8003116 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	61da      	str	r2, [r3, #28]
 800300c:	2304      	movs	r3, #4
 800300e:	e08f      	b.n	8003130 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	0a5b      	lsrs	r3, r3, #9
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	8952      	ldrh	r2, [r2, #10]
 8003018:	3a01      	subs	r2, #1
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d17a      	bne.n	8003116 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	4619      	mov	r1, r3
 8003028:	4610      	mov	r0, r2
 800302a:	f7ff fc80 	bl	800292e <get_fat>
 800302e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d801      	bhi.n	800303a <dir_next+0x8c>
 8003036:	2302      	movs	r3, #2
 8003038:	e07a      	b.n	8003130 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d101      	bne.n	8003046 <dir_next+0x98>
 8003042:	2301      	movs	r3, #1
 8003044:	e074      	b.n	8003130 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	429a      	cmp	r2, r3
 800304e:	d358      	bcc.n	8003102 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d104      	bne.n	8003060 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	61da      	str	r2, [r3, #28]
 800305c:	2304      	movs	r3, #4
 800305e:	e067      	b.n	8003130 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	4619      	mov	r1, r3
 8003068:	4610      	mov	r0, r2
 800306a:	f7ff fe59 	bl	8002d20 <create_chain>
 800306e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <dir_next+0xcc>
 8003076:	2307      	movs	r3, #7
 8003078:	e05a      	b.n	8003130 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <dir_next+0xd6>
 8003080:	2302      	movs	r3, #2
 8003082:	e055      	b.n	8003130 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308a:	d101      	bne.n	8003090 <dir_next+0xe2>
 800308c:	2301      	movs	r3, #1
 800308e:	e04f      	b.n	8003130 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f7ff fb4d 	bl	8002730 <sync_window>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <dir_next+0xf2>
 800309c:	2301      	movs	r3, #1
 800309e:	e047      	b.n	8003130 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3334      	adds	r3, #52	; 0x34
 80030a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a8:	2100      	movs	r1, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff f977 	bl	800239e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	6979      	ldr	r1, [r7, #20]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f7ff fc1a 	bl	80028f0 <clust2sect>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
 80030c2:	e012      	b.n	80030ea <dir_next+0x13c>
						fs->wflag = 1;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f7ff fb30 	bl	8002730 <sync_window>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <dir_next+0x12c>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e02a      	b.n	8003130 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	3301      	adds	r3, #1
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	631a      	str	r2, [r3, #48]	; 0x30
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	895b      	ldrh	r3, [r3, #10]
 80030ee:	461a      	mov	r2, r3
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d3e6      	bcc.n	80030c4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad2      	subs	r2, r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003108:	6979      	ldr	r1, [r7, #20]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7ff fbf0 	bl	80028f0 <clust2sect>
 8003110:	4602      	mov	r2, r0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003128:	441a      	add	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003148:	2100      	movs	r1, #0
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff feb4 	bl	8002eb8 <dir_sdi>
 8003150:	4603      	mov	r3, r0
 8003152:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d12b      	bne.n	80031b2 <dir_alloc+0x7a>
		n = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	4619      	mov	r1, r3
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f7ff fb27 	bl	80027b8 <move_window>
 800316a:	4603      	mov	r3, r0
 800316c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d11d      	bne.n	80031b0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2be5      	cmp	r3, #229	; 0xe5
 800317c:	d004      	beq.n	8003188 <dir_alloc+0x50>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d107      	bne.n	8003198 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	3301      	adds	r3, #1
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d102      	bne.n	800319c <dir_alloc+0x64>
 8003196:	e00c      	b.n	80031b2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800319c:	2101      	movs	r1, #1
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ff05 	bl	8002fae <dir_next>
 80031a4:	4603      	mov	r3, r0
 80031a6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0d7      	beq.n	800315e <dir_alloc+0x26>
 80031ae:	e000      	b.n	80031b2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80031b0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d101      	bne.n	80031bc <dir_alloc+0x84>
 80031b8:	2307      	movs	r3, #7
 80031ba:	75fb      	strb	r3, [r7, #23]
	return res;
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	331a      	adds	r3, #26
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff f83f 	bl	8002258 <ld_word>
 80031da:	4603      	mov	r3, r0
 80031dc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d109      	bne.n	80031fa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	3314      	adds	r3, #20
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff f834 	bl	8002258 <ld_word>
 80031f0:	4603      	mov	r3, r0
 80031f2:	041b      	lsls	r3, r3, #16
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80031fa:	68fb      	ldr	r3, [r7, #12]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	331a      	adds	r3, #26
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	b292      	uxth	r2, r2
 8003218:	4611      	mov	r1, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff f857 	bl	80022ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d109      	bne.n	800323c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f103 0214 	add.w	r2, r3, #20
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	b29b      	uxth	r3, r3
 8003234:	4619      	mov	r1, r3
 8003236:	4610      	mov	r0, r2
 8003238:	f7ff f849 	bl	80022ce <st_word>
	}
}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	331a      	adds	r3, #26
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff f800 	bl	8002258 <ld_word>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <cmp_lfn+0x1e>
 800325e:	2300      	movs	r3, #0
 8003260:	e059      	b.n	8003316 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800326a:	1e5a      	subs	r2, r3, #1
 800326c:	4613      	mov	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003278:	2301      	movs	r3, #1
 800327a:	81fb      	strh	r3, [r7, #14]
 800327c:	2300      	movs	r3, #0
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	e033      	b.n	80032ea <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003282:	4a27      	ldr	r2, [pc, #156]	; (8003320 <cmp_lfn+0xdc>)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4413      	add	r3, r2
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4413      	add	r3, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe ffe1 	bl	8002258 <ld_word>
 8003296:	4603      	mov	r3, r0
 8003298:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800329a:	89fb      	ldrh	r3, [r7, #14]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01a      	beq.n	80032d6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2bfe      	cmp	r3, #254	; 0xfe
 80032a4:	d812      	bhi.n	80032cc <cmp_lfn+0x88>
 80032a6:	89bb      	ldrh	r3, [r7, #12]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f003 f835 	bl	8006318 <ff_wtoupper>
 80032ae:	4603      	mov	r3, r0
 80032b0:	461c      	mov	r4, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	617a      	str	r2, [r7, #20]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f003 f829 	bl	8006318 <ff_wtoupper>
 80032c6:	4603      	mov	r3, r0
 80032c8:	429c      	cmp	r4, r3
 80032ca:	d001      	beq.n	80032d0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80032cc:	2300      	movs	r3, #0
 80032ce:	e022      	b.n	8003316 <cmp_lfn+0xd2>
			}
			wc = uc;
 80032d0:	89bb      	ldrh	r3, [r7, #12]
 80032d2:	81fb      	strh	r3, [r7, #14]
 80032d4:	e006      	b.n	80032e4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80032d6:	89bb      	ldrh	r3, [r7, #12]
 80032d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032dc:	4293      	cmp	r3, r2
 80032de:	d001      	beq.n	80032e4 <cmp_lfn+0xa0>
 80032e0:	2300      	movs	r3, #0
 80032e2:	e018      	b.n	8003316 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	3301      	adds	r3, #1
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b0c      	cmp	r3, #12
 80032ee:	d9c8      	bls.n	8003282 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <cmp_lfn+0xd0>
 80032fc:	89fb      	ldrh	r3, [r7, #14]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d008      	beq.n	8003314 <cmp_lfn+0xd0>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <cmp_lfn+0xd0>
 8003310:	2300      	movs	r3, #0
 8003312:	e000      	b.n	8003316 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8003314:	2301      	movs	r3, #1
}
 8003316:	4618      	mov	r0, r3
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd90      	pop	{r4, r7, pc}
 800331e:	bf00      	nop
 8003320:	0800c1f4 	.word	0x0800c1f4

08003324 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	331a      	adds	r3, #26
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe ff90 	bl	8002258 <ld_word>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <pick_lfn+0x1e>
 800333e:	2300      	movs	r3, #0
 8003340:	e04d      	b.n	80033de <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800334a:	1e5a      	subs	r2, r3, #1
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003358:	2301      	movs	r3, #1
 800335a:	81fb      	strh	r3, [r7, #14]
 800335c:	2300      	movs	r3, #0
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	e028      	b.n	80033b4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003362:	4a21      	ldr	r2, [pc, #132]	; (80033e8 <pick_lfn+0xc4>)
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	4413      	add	r3, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe ff71 	bl	8002258 <ld_word>
 8003376:	4603      	mov	r3, r0
 8003378:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800337a:	89fb      	ldrh	r3, [r7, #14]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00f      	beq.n	80033a0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2bfe      	cmp	r3, #254	; 0xfe
 8003384:	d901      	bls.n	800338a <pick_lfn+0x66>
 8003386:	2300      	movs	r3, #0
 8003388:	e029      	b.n	80033de <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800338a:	89bb      	ldrh	r3, [r7, #12]
 800338c:	81fb      	strh	r3, [r7, #14]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	617a      	str	r2, [r7, #20]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	89fa      	ldrh	r2, [r7, #14]
 800339c:	801a      	strh	r2, [r3, #0]
 800339e:	e006      	b.n	80033ae <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80033a0:	89bb      	ldrh	r3, [r7, #12]
 80033a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d001      	beq.n	80033ae <pick_lfn+0x8a>
 80033aa:	2300      	movs	r3, #0
 80033ac:	e017      	b.n	80033de <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	3301      	adds	r3, #1
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	2b0c      	cmp	r3, #12
 80033b8:	d9d3      	bls.n	8003362 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2bfe      	cmp	r3, #254	; 0xfe
 80033ca:	d901      	bls.n	80033d0 <pick_lfn+0xac>
 80033cc:	2300      	movs	r3, #0
 80033ce:	e006      	b.n	80033de <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4413      	add	r3, r2
 80033d8:	2200      	movs	r2, #0
 80033da:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80033dc:	2301      	movs	r3, #1
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	0800c1f4 	.word	0x0800c1f4

080033ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	4611      	mov	r1, r2
 80033f8:	461a      	mov	r2, r3
 80033fa:	460b      	mov	r3, r1
 80033fc:	71fb      	strb	r3, [r7, #7]
 80033fe:	4613      	mov	r3, r2
 8003400:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	330d      	adds	r3, #13
 8003406:	79ba      	ldrb	r2, [r7, #6]
 8003408:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	330b      	adds	r3, #11
 800340e:	220f      	movs	r2, #15
 8003410:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	330c      	adds	r3, #12
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	331a      	adds	r3, #26
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f7fe ff54 	bl	80022ce <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	1e5a      	subs	r2, r3, #1
 800342a:	4613      	mov	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8003436:	2300      	movs	r3, #0
 8003438:	82fb      	strh	r3, [r7, #22]
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800343e:	8afb      	ldrh	r3, [r7, #22]
 8003440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003444:	4293      	cmp	r3, r2
 8003446:	d007      	beq.n	8003458 <put_lfn+0x6c>
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	61fa      	str	r2, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4413      	add	r3, r2
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8003458:	4a17      	ldr	r2, [pc, #92]	; (80034b8 <put_lfn+0xcc>)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	4413      	add	r3, r2
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4413      	add	r3, r2
 8003466:	8afa      	ldrh	r2, [r7, #22]
 8003468:	4611      	mov	r1, r2
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe ff2f 	bl	80022ce <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8003470:	8afb      	ldrh	r3, [r7, #22]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d102      	bne.n	800347c <put_lfn+0x90>
 8003476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800347a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	3301      	adds	r3, #1
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b0c      	cmp	r3, #12
 8003486:	d9da      	bls.n	800343e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8003488:	8afb      	ldrh	r3, [r7, #22]
 800348a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800348e:	4293      	cmp	r3, r2
 8003490:	d006      	beq.n	80034a0 <put_lfn+0xb4>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4413      	add	r3, r2
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d103      	bne.n	80034a8 <put_lfn+0xbc>
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034a6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	79fa      	ldrb	r2, [r7, #7]
 80034ac:	701a      	strb	r2, [r3, #0]
}
 80034ae:	bf00      	nop
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	0800c1f4 	.word	0x0800c1f4

080034bc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08c      	sub	sp, #48	; 0x30
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80034ca:	220b      	movs	r2, #11
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f7fe ff44 	bl	800235c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d92b      	bls.n	8003532 <gen_numname+0x76>
		sr = seq;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80034de:	e022      	b.n	8003526 <gen_numname+0x6a>
			wc = *lfn++;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	1c9a      	adds	r2, r3, #2
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80034ea:	2300      	movs	r3, #0
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ee:	e017      	b.n	8003520 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	005a      	lsls	r2, r3, #1
 80034f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80034fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003500:	085b      	lsrs	r3, r3, #1
 8003502:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <gen_numname+0x5e>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8003514:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8003518:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	3301      	adds	r3, #1
 800351e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	2b0f      	cmp	r3, #15
 8003524:	d9e4      	bls.n	80034f0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1d8      	bne.n	80034e0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8003532:	2307      	movs	r3, #7
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	b2db      	uxtb	r3, r3
 8003540:	3330      	adds	r3, #48	; 0x30
 8003542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8003546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800354a:	2b39      	cmp	r3, #57	; 0x39
 800354c:	d904      	bls.n	8003558 <gen_numname+0x9c>
 800354e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003552:	3307      	adds	r3, #7
 8003554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	1e5a      	subs	r2, r3, #1
 800355c:	62ba      	str	r2, [r7, #40]	; 0x28
 800355e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003562:	4413      	add	r3, r2
 8003564:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003568:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	603b      	str	r3, [r7, #0]
	} while (seq);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1de      	bne.n	8003536 <gen_numname+0x7a>
	ns[i] = '~';
 8003578:	f107 0214 	add.w	r2, r7, #20
 800357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357e:	4413      	add	r3, r2
 8003580:	227e      	movs	r2, #126	; 0x7e
 8003582:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003584:	2300      	movs	r3, #0
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
 8003588:	e002      	b.n	8003590 <gen_numname+0xd4>
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	3301      	adds	r3, #1
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
 8003590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003594:	429a      	cmp	r2, r3
 8003596:	d205      	bcs.n	80035a4 <gen_numname+0xe8>
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	4413      	add	r3, r2
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d1f2      	bne.n	800358a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	2b07      	cmp	r3, #7
 80035a8:	d808      	bhi.n	80035bc <gen_numname+0x100>
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80035b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80035b4:	4413      	add	r3, r2
 80035b6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80035ba:	e000      	b.n	80035be <gen_numname+0x102>
 80035bc:	2120      	movs	r1, #32
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	627a      	str	r2, [r7, #36]	; 0x24
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	460a      	mov	r2, r1
 80035ca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	2b07      	cmp	r3, #7
 80035d0:	d9e8      	bls.n	80035a4 <gen_numname+0xe8>
}
 80035d2:	bf00      	nop
 80035d4:	bf00      	nop
 80035d6:	3730      	adds	r7, #48	; 0x30
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80035e8:	230b      	movs	r3, #11
 80035ea:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	0852      	lsrs	r2, r2, #1
 80035f2:	01db      	lsls	r3, r3, #7
 80035f4:	4313      	orrs	r3, r2
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	1c59      	adds	r1, r3, #1
 80035fc:	6079      	str	r1, [r7, #4]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	4413      	add	r3, r2
 8003602:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	3b01      	subs	r3, #1
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ed      	bne.n	80035ec <sum_sfn+0x10>
	return sum;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b086      	sub	sp, #24
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8003628:	2304      	movs	r3, #4
 800362a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8003632:	23ff      	movs	r3, #255	; 0xff
 8003634:	757b      	strb	r3, [r7, #21]
 8003636:	23ff      	movs	r3, #255	; 0xff
 8003638:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800363a:	e081      	b.n	8003740 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	4619      	mov	r1, r3
 8003642:	6938      	ldr	r0, [r7, #16]
 8003644:	f7ff f8b8 	bl	80027b8 <move_window>
 8003648:	4603      	mov	r3, r0
 800364a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800364c:	7dfb      	ldrb	r3, [r7, #23]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d17c      	bne.n	800374c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800365a:	7dbb      	ldrb	r3, [r7, #22]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8003660:	2304      	movs	r3, #4
 8003662:	75fb      	strb	r3, [r7, #23]
 8003664:	e077      	b.n	8003756 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	330b      	adds	r3, #11
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003672:	73fb      	strb	r3, [r7, #15]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	7bfa      	ldrb	r2, [r7, #15]
 8003678:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800367a:	7dbb      	ldrb	r3, [r7, #22]
 800367c:	2be5      	cmp	r3, #229	; 0xe5
 800367e:	d00e      	beq.n	800369e <dir_read+0x80>
 8003680:	7dbb      	ldrb	r3, [r7, #22]
 8003682:	2b2e      	cmp	r3, #46	; 0x2e
 8003684:	d00b      	beq.n	800369e <dir_read+0x80>
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	f023 0320 	bic.w	r3, r3, #32
 800368c:	2b08      	cmp	r3, #8
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	4293      	cmp	r3, r2
 800369c:	d002      	beq.n	80036a4 <dir_read+0x86>
				ord = 0xFF;
 800369e:	23ff      	movs	r3, #255	; 0xff
 80036a0:	757b      	strb	r3, [r7, #21]
 80036a2:	e044      	b.n	800372e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b0f      	cmp	r3, #15
 80036a8:	d12f      	bne.n	800370a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80036aa:	7dbb      	ldrb	r3, [r7, #22]
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	7b5b      	ldrb	r3, [r3, #13]
 80036ba:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80036bc:	7dbb      	ldrb	r3, [r7, #22]
 80036be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c2:	75bb      	strb	r3, [r7, #22]
 80036c4:	7dbb      	ldrb	r3, [r7, #22]
 80036c6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80036d0:	7dba      	ldrb	r2, [r7, #22]
 80036d2:	7d7b      	ldrb	r3, [r7, #21]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d115      	bne.n	8003704 <dir_read+0xe6>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	330d      	adds	r3, #13
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	7d3a      	ldrb	r2, [r7, #20]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d10e      	bne.n	8003704 <dir_read+0xe6>
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	4619      	mov	r1, r3
 80036f0:	4610      	mov	r0, r2
 80036f2:	f7ff fe17 	bl	8003324 <pick_lfn>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <dir_read+0xe6>
 80036fc:	7d7b      	ldrb	r3, [r7, #21]
 80036fe:	3b01      	subs	r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e000      	b.n	8003706 <dir_read+0xe8>
 8003704:	23ff      	movs	r3, #255	; 0xff
 8003706:	757b      	strb	r3, [r7, #21]
 8003708:	e011      	b.n	800372e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800370a:	7d7b      	ldrb	r3, [r7, #21]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <dir_read+0x106>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff ff61 	bl	80035dc <sum_sfn>
 800371a:	4603      	mov	r3, r0
 800371c:	461a      	mov	r2, r3
 800371e:	7d3b      	ldrb	r3, [r7, #20]
 8003720:	4293      	cmp	r3, r2
 8003722:	d015      	beq.n	8003750 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f04f 32ff 	mov.w	r2, #4294967295
 800372a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800372c:	e010      	b.n	8003750 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800372e:	2100      	movs	r1, #0
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff fc3c 	bl	8002fae <dir_next>
 8003736:	4603      	mov	r3, r0
 8003738:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800373a:	7dfb      	ldrb	r3, [r7, #23]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d109      	bne.n	8003754 <dir_read+0x136>
	while (dp->sect) {
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f47f af79 	bne.w	800363c <dir_read+0x1e>
 800374a:	e004      	b.n	8003756 <dir_read+0x138>
		if (res != FR_OK) break;
 800374c:	bf00      	nop
 800374e:	e002      	b.n	8003756 <dir_read+0x138>
					break;
 8003750:	bf00      	nop
 8003752:	e000      	b.n	8003756 <dir_read+0x138>
		if (res != FR_OK) break;
 8003754:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <dir_read+0x144>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	61da      	str	r2, [r3, #28]
	return res;
 8003762:	7dfb      	ldrb	r3, [r7, #23]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800377a:	2100      	movs	r1, #0
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff fb9b 	bl	8002eb8 <dir_sdi>
 8003782:	4603      	mov	r3, r0
 8003784:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <dir_find+0x24>
 800378c:	7dfb      	ldrb	r3, [r7, #23]
 800378e:	e0a9      	b.n	80038e4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003790:	23ff      	movs	r3, #255	; 0xff
 8003792:	753b      	strb	r3, [r7, #20]
 8003794:	7d3b      	ldrb	r3, [r7, #20]
 8003796:	757b      	strb	r3, [r7, #21]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f04f 32ff 	mov.w	r2, #4294967295
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	4619      	mov	r1, r3
 80037a6:	6938      	ldr	r0, [r7, #16]
 80037a8:	f7ff f806 	bl	80027b8 <move_window>
 80037ac:	4603      	mov	r3, r0
 80037ae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f040 8090 	bne.w	80038d8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80037c0:	7dbb      	ldrb	r3, [r7, #22]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <dir_find+0x60>
 80037c6:	2304      	movs	r3, #4
 80037c8:	75fb      	strb	r3, [r7, #23]
 80037ca:	e08a      	b.n	80038e2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	330b      	adds	r3, #11
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d8:	73fb      	strb	r3, [r7, #15]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80037e0:	7dbb      	ldrb	r3, [r7, #22]
 80037e2:	2be5      	cmp	r3, #229	; 0xe5
 80037e4:	d007      	beq.n	80037f6 <dir_find+0x8a>
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d009      	beq.n	8003804 <dir_find+0x98>
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	2b0f      	cmp	r3, #15
 80037f4:	d006      	beq.n	8003804 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80037f6:	23ff      	movs	r3, #255	; 0xff
 80037f8:	757b      	strb	r3, [r7, #21]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
 8003802:	e05e      	b.n	80038c2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b0f      	cmp	r3, #15
 8003808:	d136      	bne.n	8003878 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d154      	bne.n	80038c2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003818:	7dbb      	ldrb	r3, [r7, #22]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00d      	beq.n	800383e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	7b5b      	ldrb	r3, [r3, #13]
 8003828:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800382a:	7dbb      	ldrb	r3, [r7, #22]
 800382c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003830:	75bb      	strb	r3, [r7, #22]
 8003832:	7dbb      	ldrb	r3, [r7, #22]
 8003834:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800383e:	7dba      	ldrb	r2, [r7, #22]
 8003840:	7d7b      	ldrb	r3, [r7, #21]
 8003842:	429a      	cmp	r2, r3
 8003844:	d115      	bne.n	8003872 <dir_find+0x106>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	330d      	adds	r3, #13
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	7d3a      	ldrb	r2, [r7, #20]
 8003850:	429a      	cmp	r2, r3
 8003852:	d10e      	bne.n	8003872 <dir_find+0x106>
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f7ff fcf0 	bl	8003244 <cmp_lfn>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <dir_find+0x106>
 800386a:	7d7b      	ldrb	r3, [r7, #21]
 800386c:	3b01      	subs	r3, #1
 800386e:	b2db      	uxtb	r3, r3
 8003870:	e000      	b.n	8003874 <dir_find+0x108>
 8003872:	23ff      	movs	r3, #255	; 0xff
 8003874:	757b      	strb	r3, [r7, #21]
 8003876:	e024      	b.n	80038c2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8003878:	7d7b      	ldrb	r3, [r7, #21]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <dir_find+0x126>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff feaa 	bl	80035dc <sum_sfn>
 8003888:	4603      	mov	r3, r0
 800388a:	461a      	mov	r2, r3
 800388c:	7d3b      	ldrb	r3, [r7, #20]
 800388e:	4293      	cmp	r3, r2
 8003890:	d024      	beq.n	80038dc <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <dir_find+0x14a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a18      	ldr	r0, [r3, #32]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3324      	adds	r3, #36	; 0x24
 80038a8:	220b      	movs	r2, #11
 80038aa:	4619      	mov	r1, r3
 80038ac:	f7fe fd92 	bl	80023d4 <mem_cmp>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d014      	beq.n	80038e0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80038b6:	23ff      	movs	r3, #255	; 0xff
 80038b8:	757b      	strb	r3, [r7, #21]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f04f 32ff 	mov.w	r2, #4294967295
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80038c2:	2100      	movs	r1, #0
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff fb72 	bl	8002fae <dir_next>
 80038ca:	4603      	mov	r3, r0
 80038cc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80038ce:	7dfb      	ldrb	r3, [r7, #23]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f43f af65 	beq.w	80037a0 <dir_find+0x34>
 80038d6:	e004      	b.n	80038e2 <dir_find+0x176>
		if (res != FR_OK) break;
 80038d8:	bf00      	nop
 80038da:	e002      	b.n	80038e2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80038dc:	bf00      	nop
 80038de:	e000      	b.n	80038e2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80038e0:	bf00      	nop

	return res;
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08c      	sub	sp, #48	; 0x30
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003900:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <dir_register+0x20>
 8003908:	2306      	movs	r3, #6
 800390a:	e0e0      	b.n	8003ace <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800390c:	2300      	movs	r3, #0
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
 8003910:	e002      	b.n	8003918 <dir_register+0x2c>
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	3301      	adds	r3, #1
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f4      	bne.n	8003912 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800392e:	f107 030c 	add.w	r3, r7, #12
 8003932:	220c      	movs	r2, #12
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fd11 	bl	800235c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800393a:	7dfb      	ldrb	r3, [r7, #23]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d032      	beq.n	80039aa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2240      	movs	r2, #64	; 0x40
 8003948:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800394c:	2301      	movs	r3, #1
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003950:	e016      	b.n	8003980 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	f107 010c 	add.w	r1, r7, #12
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	f7ff fdab 	bl	80034bc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff ff00 	bl	800376c <dir_find>
 800396c:	4603      	mov	r3, r0
 800396e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8003972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	3301      	adds	r3, #1
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	2b63      	cmp	r3, #99	; 0x63
 8003984:	d9e5      	bls.n	8003952 <dir_register+0x66>
 8003986:	e000      	b.n	800398a <dir_register+0x9e>
			if (res != FR_OK) break;
 8003988:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	2b64      	cmp	r3, #100	; 0x64
 800398e:	d101      	bne.n	8003994 <dir_register+0xa8>
 8003990:	2307      	movs	r3, #7
 8003992:	e09c      	b.n	8003ace <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003994:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003998:	2b04      	cmp	r3, #4
 800399a:	d002      	beq.n	80039a2 <dir_register+0xb6>
 800399c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039a0:	e095      	b.n	8003ace <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80039a2:	7dfa      	ldrb	r2, [r7, #23]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <dir_register+0xd8>
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	330c      	adds	r3, #12
 80039b8:	4a47      	ldr	r2, [pc, #284]	; (8003ad8 <dir_register+0x1ec>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	089b      	lsrs	r3, r3, #2
 80039c0:	3301      	adds	r3, #1
 80039c2:	e000      	b.n	80039c6 <dir_register+0xda>
 80039c4:	2301      	movs	r3, #1
 80039c6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80039c8:	6a39      	ldr	r1, [r7, #32]
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff fbb4 	bl	8003138 <dir_alloc>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80039d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d148      	bne.n	8003a70 <dir_register+0x184>
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	623b      	str	r3, [r7, #32]
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d042      	beq.n	8003a70 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	015b      	lsls	r3, r3, #5
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff fa5e 	bl	8002eb8 <dir_sdi>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8003a02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d132      	bne.n	8003a70 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3324      	adds	r3, #36	; 0x24
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fde4 	bl	80035dc <sum_sfn>
 8003a14:	4603      	mov	r3, r0
 8003a16:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	69f8      	ldr	r0, [r7, #28]
 8003a20:	f7fe feca 	bl	80027b8 <move_window>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8003a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d11d      	bne.n	8003a6e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	68d8      	ldr	r0, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a19      	ldr	r1, [r3, #32]
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	7efb      	ldrb	r3, [r7, #27]
 8003a40:	f7ff fcd4 	bl	80033ec <put_lfn>
				fs->wflag = 1;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	2201      	movs	r2, #1
 8003a48:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff faae 	bl	8002fae <dir_next>
 8003a52:	4603      	mov	r3, r0
 8003a54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8003a58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d107      	bne.n	8003a70 <dir_register+0x184>
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	623b      	str	r3, [r7, #32]
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1d5      	bne.n	8003a18 <dir_register+0x12c>
 8003a6c:	e000      	b.n	8003a70 <dir_register+0x184>
				if (res != FR_OK) break;
 8003a6e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003a70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d128      	bne.n	8003aca <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	69f8      	ldr	r0, [r7, #28]
 8003a80:	f7fe fe9a 	bl	80027b8 <move_window>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8003a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d11b      	bne.n	8003aca <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	2220      	movs	r2, #32
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fc7f 	bl	800239e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a18      	ldr	r0, [r3, #32]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3324      	adds	r3, #36	; 0x24
 8003aa8:	220b      	movs	r2, #11
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f7fe fc56 	bl	800235c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	330c      	adds	r3, #12
 8003abc:	f002 0218 	and.w	r2, r2, #24
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3730      	adds	r7, #48	; 0x30
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	4ec4ec4f 	.word	0x4ec4ec4f

08003adc <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af8:	d007      	beq.n	8003b0a <dir_remove+0x2e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	4619      	mov	r1, r3
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff f9d9 	bl	8002eb8 <dir_sdi>
 8003b06:	4603      	mov	r3, r0
 8003b08:	e000      	b.n	8003b0c <dir_remove+0x30>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d128      	bne.n	8003b66 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6938      	ldr	r0, [r7, #16]
 8003b1c:	f7fe fe4c 	bl	80027b8 <move_window>
 8003b20:	4603      	mov	r3, r0
 8003b22:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d115      	bne.n	8003b56 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	22e5      	movs	r2, #229	; 0xe5
 8003b30:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2201      	movs	r2, #1
 8003b36:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d90b      	bls.n	8003b5a <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8003b42:	2100      	movs	r1, #0
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff fa32 	bl	8002fae <dir_next>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0df      	beq.n	8003b14 <dir_remove+0x38>
 8003b54:	e002      	b.n	8003b5c <dir_remove+0x80>
			if (res != FR_OK) break;
 8003b56:	bf00      	nop
 8003b58:	e000      	b.n	8003b5c <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8003b5a:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d101      	bne.n	8003b66 <dir_remove+0x8a>
 8003b62:	2302      	movs	r3, #2
 8003b64:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2200      	movs	r2, #0
 8003b84:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80c9 	beq.w	8003d22 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d032      	beq.n	8003c00 <get_fileinfo+0x90>
			i = j = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8003ba2:	e01b      	b.n	8003bdc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8003ba4:	89fb      	ldrh	r3, [r7, #14]
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f002 fb79 	bl	80062a0 <ff_convert>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8003bb2:	89fb      	ldrh	r3, [r7, #14]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d102      	bne.n	8003bbe <get_fileinfo+0x4e>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61fb      	str	r3, [r7, #28]
 8003bbc:	e01a      	b.n	8003bf4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	2bfe      	cmp	r3, #254	; 0xfe
 8003bc2:	d902      	bls.n	8003bca <get_fileinfo+0x5a>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e014      	b.n	8003bf4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	61fa      	str	r2, [r7, #28]
 8003bd0:	89fa      	ldrh	r2, [r7, #14]
 8003bd2:	b2d1      	uxtb	r1, r2
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	460a      	mov	r2, r1
 8003bda:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	1c59      	adds	r1, r3, #1
 8003be4:	61b9      	str	r1, [r7, #24]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	81fb      	strh	r3, [r7, #14]
 8003bee:	89fb      	ldrh	r3, [r7, #14]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1d7      	bne.n	8003ba4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3316      	adds	r3, #22
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61bb      	str	r3, [r7, #24]
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3316      	adds	r3, #22
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8003c14:	e04c      	b.n	8003cb0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1a      	ldr	r2, [r3, #32]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	1c59      	adds	r1, r3, #1
 8003c1e:	61f9      	str	r1, [r7, #28]
 8003c20:	4413      	add	r3, r2
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d100      	bne.n	8003c2e <get_fileinfo+0xbe>
 8003c2c:	e040      	b.n	8003cb0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
 8003c30:	2b05      	cmp	r3, #5
 8003c32:	d101      	bne.n	8003c38 <get_fileinfo+0xc8>
 8003c34:	23e5      	movs	r3, #229	; 0xe5
 8003c36:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	2b09      	cmp	r3, #9
 8003c3c:	d10f      	bne.n	8003c5e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8003c3e:	89bb      	ldrh	r3, [r7, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d105      	bne.n	8003c50 <get_fileinfo+0xe0>
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	4413      	add	r3, r2
 8003c4a:	3316      	adds	r3, #22
 8003c4c:	222e      	movs	r2, #46	; 0x2e
 8003c4e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	61ba      	str	r2, [r7, #24]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	4413      	add	r3, r2
 8003c5a:	222e      	movs	r2, #46	; 0x2e
 8003c5c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	4413      	add	r3, r2
 8003c64:	3309      	adds	r3, #9
 8003c66:	7dfa      	ldrb	r2, [r7, #23]
 8003c68:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8003c6a:	89bb      	ldrh	r3, [r7, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d11c      	bne.n	8003caa <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
 8003c72:	2b40      	cmp	r3, #64	; 0x40
 8003c74:	d913      	bls.n	8003c9e <get_fileinfo+0x12e>
 8003c76:	7dfb      	ldrb	r3, [r7, #23]
 8003c78:	2b5a      	cmp	r3, #90	; 0x5a
 8003c7a:	d810      	bhi.n	8003c9e <get_fileinfo+0x12e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	330c      	adds	r3, #12
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d901      	bls.n	8003c90 <get_fileinfo+0x120>
 8003c8c:	2310      	movs	r3, #16
 8003c8e:	e000      	b.n	8003c92 <get_fileinfo+0x122>
 8003c90:	2308      	movs	r3, #8
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
 8003c9a:	3320      	adds	r3, #32
 8003c9c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3316      	adds	r3, #22
 8003ca6:	7dfa      	ldrb	r2, [r7, #23]
 8003ca8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	3301      	adds	r3, #1
 8003cae:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2b0a      	cmp	r3, #10
 8003cb4:	d9af      	bls.n	8003c16 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8003cb6:	89bb      	ldrh	r3, [r7, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10d      	bne.n	8003cd8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3316      	adds	r3, #22
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <get_fileinfo+0x168>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	4413      	add	r3, r2
 8003cde:	3309      	adds	r3, #9
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	7ada      	ldrb	r2, [r3, #11]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	331c      	adds	r3, #28
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe fac7 	bl	8002288 <ld_dword>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	3316      	adds	r3, #22
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe fabe 	bl	8002288 <ld_dword>
 8003d0c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	80da      	strh	r2, [r3, #6]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	809a      	strh	r2, [r3, #4]
 8003d20:	e000      	b.n	8003d24 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8003d22:	bf00      	nop
}
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	61ba      	str	r2, [r7, #24]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4413      	add	r3, r2
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8003d5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d5c:	2b1f      	cmp	r3, #31
 8003d5e:	d940      	bls.n	8003de2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8003d60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d62:	2b2f      	cmp	r3, #47	; 0x2f
 8003d64:	d006      	beq.n	8003d74 <create_name+0x48>
 8003d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d68:	2b5c      	cmp	r3, #92	; 0x5c
 8003d6a:	d110      	bne.n	8003d8e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003d6c:	e002      	b.n	8003d74 <create_name+0x48>
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	3301      	adds	r3, #1
 8003d72:	61bb      	str	r3, [r7, #24]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	4413      	add	r3, r2
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b2f      	cmp	r3, #47	; 0x2f
 8003d7e:	d0f6      	beq.n	8003d6e <create_name+0x42>
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4413      	add	r3, r2
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b5c      	cmp	r3, #92	; 0x5c
 8003d8a:	d0f0      	beq.n	8003d6e <create_name+0x42>
			break;
 8003d8c:	e02a      	b.n	8003de4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2bfe      	cmp	r3, #254	; 0xfe
 8003d92:	d901      	bls.n	8003d98 <create_name+0x6c>
 8003d94:	2306      	movs	r3, #6
 8003d96:	e177      	b.n	8004088 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8003d98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003d9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003da0:	2101      	movs	r1, #1
 8003da2:	4618      	mov	r0, r3
 8003da4:	f002 fa7c 	bl	80062a0 <ff_convert>
 8003da8:	4603      	mov	r3, r0
 8003daa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8003dac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <create_name+0x8a>
 8003db2:	2306      	movs	r3, #6
 8003db4:	e168      	b.n	8004088 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8003db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003db8:	2b7f      	cmp	r3, #127	; 0x7f
 8003dba:	d809      	bhi.n	8003dd0 <create_name+0xa4>
 8003dbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	48b3      	ldr	r0, [pc, #716]	; (8004090 <create_name+0x364>)
 8003dc2:	f7fe fb2e 	bl	8002422 <chk_chr>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <create_name+0xa4>
 8003dcc:	2306      	movs	r3, #6
 8003dce:	e15b      	b.n	8004088 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	617a      	str	r2, [r7, #20]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dde:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8003de0:	e7b4      	b.n	8003d4c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8003de2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	441a      	add	r2, r3
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003dee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003df0:	2b1f      	cmp	r3, #31
 8003df2:	d801      	bhi.n	8003df8 <create_name+0xcc>
 8003df4:	2304      	movs	r3, #4
 8003df6:	e000      	b.n	8003dfa <create_name+0xce>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003dfe:	e011      	b.n	8003e24 <create_name+0xf8>
		w = lfn[di - 1];
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e06:	3b01      	subs	r3, #1
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8003e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d002      	beq.n	8003e1e <create_name+0xf2>
 8003e18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e1c:	d106      	bne.n	8003e2c <create_name+0x100>
		di--;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1ea      	bne.n	8003e00 <create_name+0xd4>
 8003e2a:	e000      	b.n	8003e2e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8003e2c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4413      	add	r3, r2
 8003e36:	2200      	movs	r2, #0
 8003e38:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <create_name+0x118>
 8003e40:	2306      	movs	r3, #6
 8003e42:	e121      	b.n	8004088 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3324      	adds	r3, #36	; 0x24
 8003e48:	220b      	movs	r2, #11
 8003e4a:	2120      	movs	r1, #32
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe faa6 	bl	800239e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	e002      	b.n	8003e5e <create_name+0x132>
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	61bb      	str	r3, [r7, #24]
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d0f5      	beq.n	8003e58 <create_name+0x12c>
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	2b2e      	cmp	r3, #46	; 0x2e
 8003e78:	d0ee      	beq.n	8003e58 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <create_name+0x168>
 8003e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e84:	f043 0303 	orr.w	r3, r3, #3
 8003e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8003e8c:	e002      	b.n	8003e94 <create_name+0x168>
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <create_name+0x182>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8003eac:	d1ef      	bne.n	8003e8e <create_name+0x162>

	i = b = 0; ni = 8;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	623b      	str	r3, [r7, #32]
 8003eb8:	2308      	movs	r3, #8
 8003eba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	61ba      	str	r2, [r7, #24]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8003ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8090 	beq.w	8003ff4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8003ed4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	d006      	beq.n	8003ee8 <create_name+0x1bc>
 8003eda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003edc:	2b2e      	cmp	r3, #46	; 0x2e
 8003ede:	d10a      	bne.n	8003ef6 <create_name+0x1ca>
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d006      	beq.n	8003ef6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8003ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003eec:	f043 0303 	orr.w	r3, r3, #3
 8003ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ef4:	e07d      	b.n	8003ff2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003ef6:	6a3a      	ldr	r2, [r7, #32]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d203      	bcs.n	8003f06 <create_name+0x1da>
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d123      	bne.n	8003f4e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	2b0b      	cmp	r3, #11
 8003f0a:	d106      	bne.n	8003f1a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8003f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f10:	f043 0303 	orr.w	r3, r3, #3
 8003f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f18:	e06f      	b.n	8003ffa <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d005      	beq.n	8003f2e <create_name+0x202>
 8003f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f26:	f043 0303 	orr.w	r3, r3, #3
 8003f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d860      	bhi.n	8003ff8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	2308      	movs	r3, #8
 8003f3c:	623b      	str	r3, [r7, #32]
 8003f3e:	230b      	movs	r3, #11
 8003f40:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8003f42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003f4c:	e051      	b.n	8003ff2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8003f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f50:	2b7f      	cmp	r3, #127	; 0x7f
 8003f52:	d914      	bls.n	8003f7e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003f54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f002 f9a1 	bl	80062a0 <ff_convert>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8003f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <create_name+0x246>
 8003f68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f6a:	3b80      	subs	r3, #128	; 0x80
 8003f6c:	4a49      	ldr	r2, [pc, #292]	; (8004094 <create_name+0x368>)
 8003f6e:	5cd3      	ldrb	r3, [r2, r3]
 8003f70:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8003f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f76:	f043 0302 	orr.w	r3, r3, #2
 8003f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8003f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <create_name+0x268>
 8003f84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f86:	4619      	mov	r1, r3
 8003f88:	4843      	ldr	r0, [pc, #268]	; (8004098 <create_name+0x36c>)
 8003f8a:	f7fe fa4a 	bl	8002422 <chk_chr>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003f94:	235f      	movs	r3, #95	; 0x5f
 8003f96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f9c:	f043 0303 	orr.w	r3, r3, #3
 8003fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fa4:	e01b      	b.n	8003fde <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8003fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d909      	bls.n	8003fc0 <create_name+0x294>
 8003fac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fae:	2b5a      	cmp	r3, #90	; 0x5a
 8003fb0:	d806      	bhi.n	8003fc0 <create_name+0x294>
					b |= 2;
 8003fb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003fb6:	f043 0302 	orr.w	r3, r3, #2
 8003fba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003fbe:	e00e      	b.n	8003fde <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8003fc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fc2:	2b60      	cmp	r3, #96	; 0x60
 8003fc4:	d90b      	bls.n	8003fde <create_name+0x2b2>
 8003fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fc8:	2b7a      	cmp	r3, #122	; 0x7a
 8003fca:	d808      	bhi.n	8003fde <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8003fcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003fd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fda:	3b20      	subs	r3, #32
 8003fdc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	623a      	str	r2, [r7, #32]
 8003fe4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fe6:	b2d1      	uxtb	r1, r2
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4413      	add	r3, r2
 8003fec:	460a      	mov	r2, r1
 8003fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8003ff2:	e763      	b.n	8003ebc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8003ff4:	bf00      	nop
 8003ff6:	e000      	b.n	8003ffa <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8003ff8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004000:	2be5      	cmp	r3, #229	; 0xe5
 8004002:	d103      	bne.n	800400c <create_name+0x2e0>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2205      	movs	r2, #5
 8004008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b08      	cmp	r3, #8
 8004010:	d104      	bne.n	800401c <create_name+0x2f0>
 8004012:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800401c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004020:	f003 030c 	and.w	r3, r3, #12
 8004024:	2b0c      	cmp	r3, #12
 8004026:	d005      	beq.n	8004034 <create_name+0x308>
 8004028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	2b03      	cmp	r3, #3
 8004032:	d105      	bne.n	8004040 <create_name+0x314>
 8004034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004038:	f043 0302 	orr.w	r3, r3, #2
 800403c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d117      	bne.n	800407c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800404c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d105      	bne.n	8004064 <create_name+0x338>
 8004058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800405c:	f043 0310 	orr.w	r3, r3, #16
 8004060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004064:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b04      	cmp	r3, #4
 800406e:	d105      	bne.n	800407c <create_name+0x350>
 8004070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004074:	f043 0308 	orr.w	r3, r3, #8
 8004078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004082:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8004086:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8004088:	4618      	mov	r0, r3
 800408a:	3728      	adds	r7, #40	; 0x28
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	0800c100 	.word	0x0800c100
 8004094:	0800c174 	.word	0x0800c174
 8004098:	0800c10c 	.word	0x0800c10c

0800409c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80040b0:	e002      	b.n	80040b8 <follow_path+0x1c>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	3301      	adds	r3, #1
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b2f      	cmp	r3, #47	; 0x2f
 80040be:	d0f8      	beq.n	80040b2 <follow_path+0x16>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b5c      	cmp	r3, #92	; 0x5c
 80040c6:	d0f4      	beq.n	80040b2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2200      	movs	r2, #0
 80040cc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b1f      	cmp	r3, #31
 80040d4:	d80a      	bhi.n	80040ec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2280      	movs	r2, #128	; 0x80
 80040da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80040de:	2100      	movs	r1, #0
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7fe fee9 	bl	8002eb8 <dir_sdi>
 80040e6:	4603      	mov	r3, r0
 80040e8:	75fb      	strb	r3, [r7, #23]
 80040ea:	e043      	b.n	8004174 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80040ec:	463b      	mov	r3, r7
 80040ee:	4619      	mov	r1, r3
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff fe1b 	bl	8003d2c <create_name>
 80040f6:	4603      	mov	r3, r0
 80040f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80040fa:	7dfb      	ldrb	r3, [r7, #23]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d134      	bne.n	800416a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff fb33 	bl	800376c <dir_find>
 8004106:	4603      	mov	r3, r0
 8004108:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004110:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004112:	7dfb      	ldrb	r3, [r7, #23]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004118:	7dfb      	ldrb	r3, [r7, #23]
 800411a:	2b04      	cmp	r3, #4
 800411c:	d127      	bne.n	800416e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800411e:	7afb      	ldrb	r3, [r7, #11]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d122      	bne.n	800416e <follow_path+0xd2>
 8004128:	2305      	movs	r3, #5
 800412a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800412c:	e01f      	b.n	800416e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800412e:	7afb      	ldrb	r3, [r7, #11]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d11c      	bne.n	8004172 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	799b      	ldrb	r3, [r3, #6]
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b00      	cmp	r3, #0
 8004142:	d102      	bne.n	800414a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004144:	2305      	movs	r3, #5
 8004146:	75fb      	strb	r3, [r7, #23]
 8004148:	e014      	b.n	8004174 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004158:	4413      	add	r3, r2
 800415a:	4619      	mov	r1, r3
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f7ff f832 	bl	80031c6 <ld_clust>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004168:	e7c0      	b.n	80040ec <follow_path+0x50>
			if (res != FR_OK) break;
 800416a:	bf00      	nop
 800416c:	e002      	b.n	8004174 <follow_path+0xd8>
				break;
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004172:	bf00      	nop
			}
		}
	}

	return res;
 8004174:	7dfb      	ldrb	r3, [r7, #23]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800417e:	b480      	push	{r7}
 8004180:	b087      	sub	sp, #28
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004186:	f04f 33ff 	mov.w	r3, #4294967295
 800418a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d031      	beq.n	80041f8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	e002      	b.n	80041a2 <get_ldnumber+0x24>
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	3301      	adds	r3, #1
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b1f      	cmp	r3, #31
 80041a8:	d903      	bls.n	80041b2 <get_ldnumber+0x34>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b3a      	cmp	r3, #58	; 0x3a
 80041b0:	d1f4      	bne.n	800419c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b3a      	cmp	r3, #58	; 0x3a
 80041b8:	d11c      	bne.n	80041f4 <get_ldnumber+0x76>
			tp = *path;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	60fa      	str	r2, [r7, #12]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	3b30      	subs	r3, #48	; 0x30
 80041ca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b09      	cmp	r3, #9
 80041d0:	d80e      	bhi.n	80041f0 <get_ldnumber+0x72>
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d10a      	bne.n	80041f0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d807      	bhi.n	80041f0 <get_ldnumber+0x72>
					vol = (int)i;
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	3301      	adds	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	e002      	b.n	80041fa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80041f4:	2300      	movs	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80041f8:	693b      	ldr	r3, [r7, #16]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	70da      	strb	r2, [r3, #3]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f04f 32ff 	mov.w	r2, #4294967295
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004220:	6839      	ldr	r1, [r7, #0]
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fe fac8 	bl	80027b8 <move_window>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <check_fs+0x2a>
 800422e:	2304      	movs	r3, #4
 8004230:	e038      	b.n	80042a4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3334      	adds	r3, #52	; 0x34
 8004236:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800423a:	4618      	mov	r0, r3
 800423c:	f7fe f80c 	bl	8002258 <ld_word>
 8004240:	4603      	mov	r3, r0
 8004242:	461a      	mov	r2, r3
 8004244:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <check_fs+0x48>
 800424c:	2303      	movs	r3, #3
 800424e:	e029      	b.n	80042a4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004256:	2be9      	cmp	r3, #233	; 0xe9
 8004258:	d009      	beq.n	800426e <check_fs+0x66>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004260:	2beb      	cmp	r3, #235	; 0xeb
 8004262:	d11e      	bne.n	80042a2 <check_fs+0x9a>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800426a:	2b90      	cmp	r3, #144	; 0x90
 800426c:	d119      	bne.n	80042a2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3334      	adds	r3, #52	; 0x34
 8004272:	3336      	adds	r3, #54	; 0x36
 8004274:	4618      	mov	r0, r3
 8004276:	f7fe f807 	bl	8002288 <ld_dword>
 800427a:	4603      	mov	r3, r0
 800427c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004280:	4a0a      	ldr	r2, [pc, #40]	; (80042ac <check_fs+0xa4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d101      	bne.n	800428a <check_fs+0x82>
 8004286:	2300      	movs	r3, #0
 8004288:	e00c      	b.n	80042a4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3334      	adds	r3, #52	; 0x34
 800428e:	3352      	adds	r3, #82	; 0x52
 8004290:	4618      	mov	r0, r3
 8004292:	f7fd fff9 	bl	8002288 <ld_dword>
 8004296:	4603      	mov	r3, r0
 8004298:	4a05      	ldr	r2, [pc, #20]	; (80042b0 <check_fs+0xa8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d101      	bne.n	80042a2 <check_fs+0x9a>
 800429e:	2300      	movs	r3, #0
 80042a0:	e000      	b.n	80042a4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80042a2:	2302      	movs	r3, #2
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	00544146 	.word	0x00544146
 80042b0:	33544146 	.word	0x33544146

080042b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b096      	sub	sp, #88	; 0x58
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	4613      	mov	r3, r2
 80042c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f7ff ff58 	bl	800417e <get_ldnumber>
 80042ce:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80042d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	da01      	bge.n	80042da <find_volume+0x26>
 80042d6:	230b      	movs	r3, #11
 80042d8:	e22e      	b.n	8004738 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80042da:	4aa8      	ldr	r2, [pc, #672]	; (800457c <find_volume+0x2c8>)
 80042dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80042e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <find_volume+0x3a>
 80042ea:	230c      	movs	r3, #12
 80042ec:	e224      	b.n	8004738 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042f2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	f023 0301 	bic.w	r3, r3, #1
 80042fa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80042fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01a      	beq.n	800433a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004306:	785b      	ldrb	r3, [r3, #1]
 8004308:	4618      	mov	r0, r3
 800430a:	f7fd feff 	bl	800210c <disk_status>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004314:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10c      	bne.n	800433a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <find_volume+0x82>
 8004326:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004332:	230a      	movs	r3, #10
 8004334:	e200      	b.n	8004738 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8004336:	2300      	movs	r3, #0
 8004338:	e1fe      	b.n	8004738 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004342:	b2da      	uxtb	r2, r3
 8004344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004346:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	785b      	ldrb	r3, [r3, #1]
 800434c:	4618      	mov	r0, r3
 800434e:	f7fd fef7 	bl	8002140 <disk_initialize>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004358:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004364:	2303      	movs	r3, #3
 8004366:	e1e7      	b.n	8004738 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <find_volume+0xca>
 800436e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800437a:	230a      	movs	r3, #10
 800437c:	e1dc      	b.n	8004738 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004382:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004384:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004386:	f7ff ff3f 	bl	8004208 <check_fs>
 800438a:	4603      	mov	r3, r0
 800438c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004390:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004394:	2b02      	cmp	r3, #2
 8004396:	d14b      	bne.n	8004430 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004398:	2300      	movs	r3, #0
 800439a:	643b      	str	r3, [r7, #64]	; 0x40
 800439c:	e01f      	b.n	80043de <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80043a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80043ac:	4413      	add	r3, r2
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	3304      	adds	r3, #4
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d006      	beq.n	80043c8 <find_volume+0x114>
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	3308      	adds	r3, #8
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fd ff62 	bl	8002288 <ld_dword>
 80043c4:	4602      	mov	r2, r0
 80043c6:	e000      	b.n	80043ca <find_volume+0x116>
 80043c8:	2200      	movs	r2, #0
 80043ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80043d2:	440b      	add	r3, r1
 80043d4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80043d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043da:	3301      	adds	r3, #1
 80043dc:	643b      	str	r3, [r7, #64]	; 0x40
 80043de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d9dc      	bls.n	800439e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80043e4:	2300      	movs	r3, #0
 80043e6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80043e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <find_volume+0x140>
 80043ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f0:	3b01      	subs	r3, #1
 80043f2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80043f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80043fc:	4413      	add	r3, r2
 80043fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004402:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <find_volume+0x162>
 800440a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800440c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800440e:	f7ff fefb 	bl	8004208 <check_fs>
 8004412:	4603      	mov	r3, r0
 8004414:	e000      	b.n	8004418 <find_volume+0x164>
 8004416:	2303      	movs	r3, #3
 8004418:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800441c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004420:	2b01      	cmp	r3, #1
 8004422:	d905      	bls.n	8004430 <find_volume+0x17c>
 8004424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004426:	3301      	adds	r3, #1
 8004428:	643b      	str	r3, [r7, #64]	; 0x40
 800442a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800442c:	2b03      	cmp	r3, #3
 800442e:	d9e1      	bls.n	80043f4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004430:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004434:	2b04      	cmp	r3, #4
 8004436:	d101      	bne.n	800443c <find_volume+0x188>
 8004438:	2301      	movs	r3, #1
 800443a:	e17d      	b.n	8004738 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800443c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004440:	2b01      	cmp	r3, #1
 8004442:	d901      	bls.n	8004448 <find_volume+0x194>
 8004444:	230d      	movs	r3, #13
 8004446:	e177      	b.n	8004738 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	3334      	adds	r3, #52	; 0x34
 800444c:	330b      	adds	r3, #11
 800444e:	4618      	mov	r0, r3
 8004450:	f7fd ff02 	bl	8002258 <ld_word>
 8004454:	4603      	mov	r3, r0
 8004456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800445a:	d001      	beq.n	8004460 <find_volume+0x1ac>
 800445c:	230d      	movs	r3, #13
 800445e:	e16b      	b.n	8004738 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004462:	3334      	adds	r3, #52	; 0x34
 8004464:	3316      	adds	r3, #22
 8004466:	4618      	mov	r0, r3
 8004468:	f7fd fef6 	bl	8002258 <ld_word>
 800446c:	4603      	mov	r3, r0
 800446e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <find_volume+0x1d0>
 8004476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004478:	3334      	adds	r3, #52	; 0x34
 800447a:	3324      	adds	r3, #36	; 0x24
 800447c:	4618      	mov	r0, r3
 800447e:	f7fd ff03 	bl	8002288 <ld_dword>
 8004482:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004486:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004488:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004492:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004496:	789b      	ldrb	r3, [r3, #2]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d005      	beq.n	80044a8 <find_volume+0x1f4>
 800449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449e:	789b      	ldrb	r3, [r3, #2]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d001      	beq.n	80044a8 <find_volume+0x1f4>
 80044a4:	230d      	movs	r3, #13
 80044a6:	e147      	b.n	8004738 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80044a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044aa:	789b      	ldrb	r3, [r3, #2]
 80044ac:	461a      	mov	r2, r3
 80044ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b0:	fb02 f303 	mul.w	r3, r2, r3
 80044b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80044b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044bc:	b29a      	uxth	r2, r3
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	895b      	ldrh	r3, [r3, #10]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <find_volume+0x228>
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044cc:	895b      	ldrh	r3, [r3, #10]
 80044ce:	461a      	mov	r2, r3
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	895b      	ldrh	r3, [r3, #10]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <find_volume+0x22c>
 80044dc:	230d      	movs	r3, #13
 80044de:	e12b      	b.n	8004738 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80044e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e2:	3334      	adds	r3, #52	; 0x34
 80044e4:	3311      	adds	r3, #17
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fd feb6 	bl	8002258 <ld_word>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	891b      	ldrh	r3, [r3, #8]
 80044f8:	f003 030f 	and.w	r3, r3, #15
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <find_volume+0x252>
 8004502:	230d      	movs	r3, #13
 8004504:	e118      	b.n	8004738 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	3334      	adds	r3, #52	; 0x34
 800450a:	3313      	adds	r3, #19
 800450c:	4618      	mov	r0, r3
 800450e:	f7fd fea3 	bl	8002258 <ld_word>
 8004512:	4603      	mov	r3, r0
 8004514:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004518:	2b00      	cmp	r3, #0
 800451a:	d106      	bne.n	800452a <find_volume+0x276>
 800451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451e:	3334      	adds	r3, #52	; 0x34
 8004520:	3320      	adds	r3, #32
 8004522:	4618      	mov	r0, r3
 8004524:	f7fd feb0 	bl	8002288 <ld_dword>
 8004528:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452c:	3334      	adds	r3, #52	; 0x34
 800452e:	330e      	adds	r3, #14
 8004530:	4618      	mov	r0, r3
 8004532:	f7fd fe91 	bl	8002258 <ld_word>
 8004536:	4603      	mov	r3, r0
 8004538:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800453a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <find_volume+0x290>
 8004540:	230d      	movs	r3, #13
 8004542:	e0f9      	b.n	8004738 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004544:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004548:	4413      	add	r3, r2
 800454a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800454c:	8912      	ldrh	r2, [r2, #8]
 800454e:	0912      	lsrs	r2, r2, #4
 8004550:	b292      	uxth	r2, r2
 8004552:	4413      	add	r3, r2
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004556:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	429a      	cmp	r2, r3
 800455c:	d201      	bcs.n	8004562 <find_volume+0x2ae>
 800455e:	230d      	movs	r3, #13
 8004560:	e0ea      	b.n	8004738 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800456a:	8952      	ldrh	r2, [r2, #10]
 800456c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	2b00      	cmp	r3, #0
 8004576:	d103      	bne.n	8004580 <find_volume+0x2cc>
 8004578:	230d      	movs	r3, #13
 800457a:	e0dd      	b.n	8004738 <find_volume+0x484>
 800457c:	200002c4 	.word	0x200002c4
		fmt = FS_FAT32;
 8004580:	2303      	movs	r3, #3
 8004582:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800458c:	4293      	cmp	r3, r2
 800458e:	d802      	bhi.n	8004596 <find_volume+0x2e2>
 8004590:	2302      	movs	r3, #2
 8004592:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	f640 72f5 	movw	r2, #4085	; 0xff5
 800459c:	4293      	cmp	r3, r2
 800459e:	d802      	bhi.n	80045a6 <find_volume+0x2f2>
 80045a0:	2301      	movs	r3, #1
 80045a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	1c9a      	adds	r2, r3, #2
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80045ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80045b2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80045b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80045b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b8:	441a      	add	r2, r3
 80045ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80045be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	441a      	add	r2, r3
 80045c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80045c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d11e      	bne.n	800460e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80045d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d2:	3334      	adds	r3, #52	; 0x34
 80045d4:	332a      	adds	r3, #42	; 0x2a
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fd fe3e 	bl	8002258 <ld_word>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <find_volume+0x332>
 80045e2:	230d      	movs	r3, #13
 80045e4:	e0a8      	b.n	8004738 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	891b      	ldrh	r3, [r3, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <find_volume+0x33e>
 80045ee:	230d      	movs	r3, #13
 80045f0:	e0a2      	b.n	8004738 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	3334      	adds	r3, #52	; 0x34
 80045f6:	332c      	adds	r3, #44	; 0x2c
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fd fe45 	bl	8002288 <ld_dword>
 80045fe:	4602      	mov	r2, r0
 8004600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004602:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	647b      	str	r3, [r7, #68]	; 0x44
 800460c:	e01f      	b.n	800464e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004610:	891b      	ldrh	r3, [r3, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <find_volume+0x366>
 8004616:	230d      	movs	r3, #13
 8004618:	e08e      	b.n	8004738 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800461a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800461e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004620:	441a      	add	r2, r3
 8004622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004624:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004626:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800462a:	2b02      	cmp	r3, #2
 800462c:	d103      	bne.n	8004636 <find_volume+0x382>
 800462e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	e00a      	b.n	800464c <find_volume+0x398>
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	4613      	mov	r3, r2
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	4413      	add	r3, r2
 8004640:	085a      	lsrs	r2, r3, #1
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800464c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	69da      	ldr	r2, [r3, #28]
 8004652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004654:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004658:	0a5b      	lsrs	r3, r3, #9
 800465a:	429a      	cmp	r2, r3
 800465c:	d201      	bcs.n	8004662 <find_volume+0x3ae>
 800465e:	230d      	movs	r3, #13
 8004660:	e06a      	b.n	8004738 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	f04f 32ff 	mov.w	r2, #4294967295
 8004668:	615a      	str	r2, [r3, #20]
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	695a      	ldr	r2, [r3, #20]
 800466e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004670:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	2280      	movs	r2, #128	; 0x80
 8004676:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004678:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800467c:	2b03      	cmp	r3, #3
 800467e:	d149      	bne.n	8004714 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004682:	3334      	adds	r3, #52	; 0x34
 8004684:	3330      	adds	r3, #48	; 0x30
 8004686:	4618      	mov	r0, r3
 8004688:	f7fd fde6 	bl	8002258 <ld_word>
 800468c:	4603      	mov	r3, r0
 800468e:	2b01      	cmp	r3, #1
 8004690:	d140      	bne.n	8004714 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004694:	3301      	adds	r3, #1
 8004696:	4619      	mov	r1, r3
 8004698:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800469a:	f7fe f88d 	bl	80027b8 <move_window>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d137      	bne.n	8004714 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80046a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a6:	2200      	movs	r2, #0
 80046a8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ac:	3334      	adds	r3, #52	; 0x34
 80046ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fd fdd0 	bl	8002258 <ld_word>
 80046b8:	4603      	mov	r3, r0
 80046ba:	461a      	mov	r2, r3
 80046bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d127      	bne.n	8004714 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80046c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c6:	3334      	adds	r3, #52	; 0x34
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fd fddd 	bl	8002288 <ld_dword>
 80046ce:	4603      	mov	r3, r0
 80046d0:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <find_volume+0x48c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d11e      	bne.n	8004714 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	3334      	adds	r3, #52	; 0x34
 80046da:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fd fdd2 	bl	8002288 <ld_dword>
 80046e4:	4603      	mov	r3, r0
 80046e6:	4a17      	ldr	r2, [pc, #92]	; (8004744 <find_volume+0x490>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d113      	bne.n	8004714 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80046ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ee:	3334      	adds	r3, #52	; 0x34
 80046f0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fd fdc7 	bl	8002288 <ld_dword>
 80046fa:	4602      	mov	r2, r0
 80046fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fe:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004702:	3334      	adds	r3, #52	; 0x34
 8004704:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004708:	4618      	mov	r0, r3
 800470a:	f7fd fdbd 	bl	8002288 <ld_dword>
 800470e:	4602      	mov	r2, r0
 8004710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004712:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004716:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800471a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800471c:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <find_volume+0x494>)
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	3301      	adds	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	4b08      	ldr	r3, [pc, #32]	; (8004748 <find_volume+0x494>)
 8004726:	801a      	strh	r2, [r3, #0]
 8004728:	4b07      	ldr	r3, [pc, #28]	; (8004748 <find_volume+0x494>)
 800472a:	881a      	ldrh	r2, [r3, #0]
 800472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004730:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004732:	f7fd ffd9 	bl	80026e8 <clear_lock>
#endif
	return FR_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3758      	adds	r7, #88	; 0x58
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	41615252 	.word	0x41615252
 8004744:	61417272 	.word	0x61417272
 8004748:	200002cc 	.word	0x200002cc

0800474c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004756:	2309      	movs	r3, #9
 8004758:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01c      	beq.n	800479a <validate+0x4e>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d018      	beq.n	800479a <validate+0x4e>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d013      	beq.n	800479a <validate+0x4e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	889a      	ldrh	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	88db      	ldrh	r3, [r3, #6]
 800477c:	429a      	cmp	r2, r3
 800477e:	d10c      	bne.n	800479a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	785b      	ldrb	r3, [r3, #1]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fd fcc0 	bl	800210c <disk_status>
 800478c:	4603      	mov	r3, r0
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <validate+0x4e>
			res = FR_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d102      	bne.n	80047a6 <validate+0x5a>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	e000      	b.n	80047a8 <validate+0x5c>
 80047a6:	2300      	movs	r3, #0
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	6013      	str	r3, [r2, #0]
	return res;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b088      	sub	sp, #32
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	4613      	mov	r3, r2
 80047c4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80047ca:	f107 0310 	add.w	r3, r7, #16
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff fcd5 	bl	800417e <get_ldnumber>
 80047d4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	da01      	bge.n	80047e0 <f_mount+0x28>
 80047dc:	230b      	movs	r3, #11
 80047de:	e02b      	b.n	8004838 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80047e0:	4a17      	ldr	r2, [pc, #92]	; (8004840 <f_mount+0x88>)
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80047f0:	69b8      	ldr	r0, [r7, #24]
 80047f2:	f7fd ff79 	bl	80026e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	490d      	ldr	r1, [pc, #52]	; (8004840 <f_mount+0x88>)
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <f_mount+0x66>
 8004818:	79fb      	ldrb	r3, [r7, #7]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d001      	beq.n	8004822 <f_mount+0x6a>
 800481e:	2300      	movs	r3, #0
 8004820:	e00a      	b.n	8004838 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004822:	f107 010c 	add.w	r1, r7, #12
 8004826:	f107 0308 	add.w	r3, r7, #8
 800482a:	2200      	movs	r2, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff fd41 	bl	80042b4 <find_volume>
 8004832:	4603      	mov	r3, r0
 8004834:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004836:	7dfb      	ldrb	r3, [r7, #23]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	200002c4 	.word	0x200002c4

08004844 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800484a:	af00      	add	r7, sp, #0
 800484c:	f107 030c 	add.w	r3, r7, #12
 8004850:	6018      	str	r0, [r3, #0]
 8004852:	f107 0308 	add.w	r3, r7, #8
 8004856:	6019      	str	r1, [r3, #0]
 8004858:	1dfb      	adds	r3, r7, #7
 800485a:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800485c:	f107 030c 	add.w	r3, r7, #12
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <f_open+0x26>
 8004866:	2309      	movs	r3, #9
 8004868:	e231      	b.n	8004cce <f_open+0x48a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800486a:	1dfb      	adds	r3, r7, #7
 800486c:	1dfa      	adds	r2, r7, #7
 800486e:	7812      	ldrb	r2, [r2, #0]
 8004870:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004874:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8004876:	1dfb      	adds	r3, r7, #7
 8004878:	781a      	ldrb	r2, [r3, #0]
 800487a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800487e:	f107 0308 	add.w	r3, r7, #8
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff fd16 	bl	80042b4 <find_volume>
 8004888:	4603      	mov	r3, r0
 800488a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800488e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004892:	2b00      	cmp	r3, #0
 8004894:	f040 8210 	bne.w	8004cb8 <f_open+0x474>
		dj.obj.fs = fs;
 8004898:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800489c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 80048a0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80048a4:	f107 0214 	add.w	r2, r7, #20
 80048a8:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80048aa:	f107 0308 	add.w	r3, r7, #8
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fbf0 	bl	800409c <follow_path>
 80048bc:	4603      	mov	r3, r0
 80048be:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80048c2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d11b      	bne.n	8004902 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80048ca:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80048ce:	b25b      	sxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	da03      	bge.n	80048dc <f_open+0x98>
				res = FR_INVALID_NAME;
 80048d4:	2306      	movs	r3, #6
 80048d6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80048da:	e012      	b.n	8004902 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80048dc:	1dfb      	adds	r3, r7, #7
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	f023 0301 	bic.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bf14      	ite	ne
 80048e8:	2301      	movne	r3, #1
 80048ea:	2300      	moveq	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	461a      	mov	r2, r3
 80048f0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80048f4:	4611      	mov	r1, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fd fdae 	bl	8002458 <chk_lock>
 80048fc:	4603      	mov	r3, r0
 80048fe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004902:	1dfb      	adds	r3, r7, #7
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	f003 031c 	and.w	r3, r3, #28
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 809b 	beq.w	8004a46 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8004910:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004914:	2b00      	cmp	r3, #0
 8004916:	d019      	beq.n	800494c <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004918:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800491c:	2b04      	cmp	r3, #4
 800491e:	d10e      	bne.n	800493e <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004920:	f7fd fdf6 	bl	8002510 <enq_lock>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d006      	beq.n	8004938 <f_open+0xf4>
 800492a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe ffdc 	bl	80038ec <dir_register>
 8004934:	4603      	mov	r3, r0
 8004936:	e000      	b.n	800493a <f_open+0xf6>
 8004938:	2312      	movs	r3, #18
 800493a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800493e:	1dfb      	adds	r3, r7, #7
 8004940:	1dfa      	adds	r2, r7, #7
 8004942:	7812      	ldrb	r2, [r2, #0]
 8004944:	f042 0208 	orr.w	r2, r2, #8
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	e012      	b.n	8004972 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800494c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8004950:	f003 0311 	and.w	r3, r3, #17
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <f_open+0x11c>
					res = FR_DENIED;
 8004958:	2307      	movs	r3, #7
 800495a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800495e:	e008      	b.n	8004972 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004960:	1dfb      	adds	r3, r7, #7
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <f_open+0x12e>
 800496c:	2308      	movs	r3, #8
 800496e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004972:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004976:	2b00      	cmp	r3, #0
 8004978:	f040 8082 	bne.w	8004a80 <f_open+0x23c>
 800497c:	1dfb      	adds	r3, r7, #7
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d07b      	beq.n	8004a80 <f_open+0x23c>
				dw = GET_FATTIME();
 8004988:	f7fd fc5e 	bl	8002248 <get_fattime>
 800498c:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004990:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004994:	330e      	adds	r3, #14
 8004996:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800499a:	4618      	mov	r0, r3
 800499c:	f7fd fcb2 	bl	8002304 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80049a0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80049a4:	3316      	adds	r3, #22
 80049a6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fd fcaa 	bl	8002304 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80049b0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80049b4:	330b      	adds	r3, #11
 80049b6:	2220      	movs	r2, #32
 80049b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80049ba:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80049be:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fe fbfe 	bl	80031c6 <ld_clust>
 80049ca:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80049ce:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80049d2:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80049d6:	2200      	movs	r2, #0
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe fc13 	bl	8003204 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80049de:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80049e2:	331c      	adds	r3, #28
 80049e4:	2100      	movs	r1, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fd fc8c 	bl	8002304 <st_dword>
					fs->wflag = 1;
 80049ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80049f0:	2201      	movs	r2, #1
 80049f2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80049f4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d041      	beq.n	8004a80 <f_open+0x23c>
						dw = fs->winsect;
 80049fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8004a06:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe f920 	bl	8002c56 <remove_chain>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8004a1c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d12d      	bne.n	8004a80 <f_open+0x23c>
							res = move_window(fs, dw);
 8004a24:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004a28:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fd fec3 	bl	80027b8 <move_window>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004a38:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004a3c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8004a40:	3a01      	subs	r2, #1
 8004a42:	611a      	str	r2, [r3, #16]
 8004a44:	e01c      	b.n	8004a80 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004a46:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d118      	bne.n	8004a80 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004a4e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8004a52:	f003 0310 	and.w	r3, r3, #16
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <f_open+0x21e>
					res = FR_NO_FILE;
 8004a5a:	2304      	movs	r3, #4
 8004a5c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8004a60:	e00e      	b.n	8004a80 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004a62:	1dfb      	adds	r3, r7, #7
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <f_open+0x23c>
 8004a6e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <f_open+0x23c>
						res = FR_DENIED;
 8004a7a:	2307      	movs	r3, #7
 8004a7c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8004a80:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d136      	bne.n	8004af6 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004a88:	1dfb      	adds	r3, r7, #7
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <f_open+0x25c>
				mode |= FA_MODIFIED;
 8004a94:	1dfb      	adds	r3, r7, #7
 8004a96:	1dfa      	adds	r2, r7, #7
 8004a98:	7812      	ldrb	r2, [r2, #0]
 8004a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a9e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004aa0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa6:	f107 030c 	add.w	r3, r7, #12
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8004aae:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8004ab2:	f107 030c 	add.w	r3, r7, #12
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004aba:	1dfb      	adds	r3, r7, #7
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	f023 0301 	bic.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	bf14      	ite	ne
 8004ac6:	2301      	movne	r3, #1
 8004ac8:	2300      	moveq	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fd fd3d 	bl	8002554 <inc_lock>
 8004ada:	4602      	mov	r2, r0
 8004adc:	f107 030c 	add.w	r3, r7, #12
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004ae4:	f107 030c 	add.w	r3, r7, #12
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d102      	bne.n	8004af6 <f_open+0x2b2>
 8004af0:	2302      	movs	r3, #2
 8004af2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004af6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 80dc 	bne.w	8004cb8 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004b00:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004b04:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8004b08:	4611      	mov	r1, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fe fb5b 	bl	80031c6 <ld_clust>
 8004b10:	4602      	mov	r2, r0
 8004b12:	f107 030c 	add.w	r3, r7, #12
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004b1a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004b1e:	331c      	adds	r3, #28
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fd fbb1 	bl	8002288 <ld_dword>
 8004b26:	4602      	mov	r2, r0
 8004b28:	f107 030c 	add.w	r3, r7, #12
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004b30:	f107 030c 	add.w	r3, r7, #12
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2200      	movs	r2, #0
 8004b38:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004b3a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8004b3e:	f107 030c 	add.w	r3, r7, #12
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004b46:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004b4a:	88da      	ldrh	r2, [r3, #6]
 8004b4c:	f107 030c 	add.w	r3, r7, #12
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004b54:	f107 030c 	add.w	r3, r7, #12
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	1dfa      	adds	r2, r7, #7
 8004b5c:	7812      	ldrb	r2, [r2, #0]
 8004b5e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004b60:	f107 030c 	add.w	r3, r7, #12
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2200      	movs	r2, #0
 8004b68:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004b6a:	f107 030c 	add.w	r3, r7, #12
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2200      	movs	r2, #0
 8004b72:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004b74:	f107 030c 	add.w	r3, r7, #12
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004b7e:	f107 030c 	add.w	r3, r7, #12
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3330      	adds	r3, #48	; 0x30
 8004b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fd fc06 	bl	800239e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004b92:	1dfb      	adds	r3, r7, #7
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 808c 	beq.w	8004cb8 <f_open+0x474>
 8004ba0:	f107 030c 	add.w	r3, r7, #12
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8085 	beq.w	8004cb8 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004bae:	f107 030c 	add.w	r3, r7, #12
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	f107 030c 	add.w	r3, r7, #12
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004bbe:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004bc2:	895b      	ldrh	r3, [r3, #10]
 8004bc4:	025b      	lsls	r3, r3, #9
 8004bc6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004bca:	f107 030c 	add.w	r3, r7, #12
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004bd6:	f107 030c 	add.w	r3, r7, #12
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8004be2:	e01f      	b.n	8004c24 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 8004be4:	f107 030c 	add.w	r3, r7, #12
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fd fe9d 	bl	800292e <get_fat>
 8004bf4:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8004bf8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d802      	bhi.n	8004c06 <f_open+0x3c2>
 8004c00:	2302      	movs	r3, #2
 8004c02:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004c06:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d102      	bne.n	8004c16 <f_open+0x3d2>
 8004c10:	2301      	movs	r3, #1
 8004c12:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004c16:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8004c1a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8004c24:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d105      	bne.n	8004c38 <f_open+0x3f4>
 8004c2c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8004c30:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d8d5      	bhi.n	8004be4 <f_open+0x3a0>
				}
				fp->clust = clst;
 8004c38:	f107 030c 	add.w	r3, r7, #12
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8004c42:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004c44:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d135      	bne.n	8004cb8 <f_open+0x474>
 8004c4c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d02f      	beq.n	8004cb8 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004c58:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004c5c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fd fe45 	bl	80028f0 <clust2sect>
 8004c66:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8004c6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d103      	bne.n	8004c7a <f_open+0x436>
						res = FR_INT_ERR;
 8004c72:	2302      	movs	r3, #2
 8004c74:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8004c78:	e01e      	b.n	8004cb8 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004c7a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004c7e:	0a5a      	lsrs	r2, r3, #9
 8004c80:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004c84:	441a      	add	r2, r3
 8004c86:	f107 030c 	add.w	r3, r7, #12
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004c8e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004c92:	7858      	ldrb	r0, [r3, #1]
 8004c94:	f107 030c 	add.w	r3, r7, #12
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004c9e:	f107 030c 	add.w	r3, r7, #12
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6a1a      	ldr	r2, [r3, #32]
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f7fd fa70 	bl	800218c <disk_read>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <f_open+0x474>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004cb8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d004      	beq.n	8004cca <f_open+0x486>
 8004cc0:	f107 030c 	add.w	r3, r7, #12
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004cca:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08e      	sub	sp, #56	; 0x38
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f107 0214 	add.w	r2, r7, #20
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff fd27 	bl	800474c <validate>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004d04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d107      	bne.n	8004d1c <f_read+0x44>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	7d5b      	ldrb	r3, [r3, #21]
 8004d10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004d14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <f_read+0x4a>
 8004d1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004d20:	e115      	b.n	8004f4e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	7d1b      	ldrb	r3, [r3, #20]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <f_read+0x5a>
 8004d2e:	2307      	movs	r3, #7
 8004d30:	e10d      	b.n	8004f4e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	f240 80fe 	bls.w	8004f44 <f_read+0x26c>
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8004d4c:	e0fa      	b.n	8004f44 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f040 80c6 	bne.w	8004ee8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	0a5b      	lsrs	r3, r3, #9
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	8952      	ldrh	r2, [r2, #10]
 8004d66:	3a01      	subs	r2, #1
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d12f      	bne.n	8004dd2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d103      	bne.n	8004d82 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d80:	e013      	b.n	8004daa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7fe f85d 	bl	8002e50 <clmt_clust>
 8004d96:	6338      	str	r0, [r7, #48]	; 0x30
 8004d98:	e007      	b.n	8004daa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	4619      	mov	r1, r3
 8004da2:	4610      	mov	r0, r2
 8004da4:	f7fd fdc3 	bl	800292e <get_fat>
 8004da8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d804      	bhi.n	8004dba <f_read+0xe2>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2202      	movs	r2, #2
 8004db4:	755a      	strb	r2, [r3, #21]
 8004db6:	2302      	movs	r3, #2
 8004db8:	e0c9      	b.n	8004f4e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d104      	bne.n	8004dcc <f_read+0xf4>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	755a      	strb	r2, [r3, #21]
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0c0      	b.n	8004f4e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dd0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	f7fd fd88 	bl	80028f0 <clust2sect>
 8004de0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d104      	bne.n	8004df2 <f_read+0x11a>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2202      	movs	r2, #2
 8004dec:	755a      	strb	r2, [r3, #21]
 8004dee:	2302      	movs	r3, #2
 8004df0:	e0ad      	b.n	8004f4e <f_read+0x276>
			sect += csect;
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	4413      	add	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	0a5b      	lsrs	r3, r3, #9
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d039      	beq.n	8004e7a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	4413      	add	r3, r2
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	8952      	ldrh	r2, [r2, #10]
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d905      	bls.n	8004e20 <f_read+0x148>
					cc = fs->csize - csect;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	895b      	ldrh	r3, [r3, #10]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	7858      	ldrb	r0, [r3, #1]
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e2a:	f7fd f9af 	bl	800218c <disk_read>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d004      	beq.n	8004e3e <f_read+0x166>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2201      	movs	r2, #1
 8004e38:	755a      	strb	r2, [r3, #21]
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e087      	b.n	8004f4e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	7d1b      	ldrb	r3, [r3, #20]
 8004e42:	b25b      	sxtb	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	da14      	bge.n	8004e72 <f_read+0x19a>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a1a      	ldr	r2, [r3, #32]
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d90d      	bls.n	8004e72 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a1a      	ldr	r2, [r3, #32]
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	025b      	lsls	r3, r3, #9
 8004e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e62:	18d0      	adds	r0, r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3330      	adds	r3, #48	; 0x30
 8004e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	f7fd fa75 	bl	800235c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	025b      	lsls	r3, r3, #9
 8004e76:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8004e78:	e050      	b.n	8004f1c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d02e      	beq.n	8004ee2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	7d1b      	ldrb	r3, [r3, #20]
 8004e88:	b25b      	sxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	da18      	bge.n	8004ec0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	7858      	ldrb	r0, [r3, #1]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a1a      	ldr	r2, [r3, #32]
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f7fd f995 	bl	80021cc <disk_write>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d004      	beq.n	8004eb2 <f_read+0x1da>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	755a      	strb	r2, [r3, #21]
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e04d      	b.n	8004f4e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	7d1b      	ldrb	r3, [r3, #20]
 8004eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	7858      	ldrb	r0, [r3, #1]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004eca:	2301      	movs	r3, #1
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	f7fd f95d 	bl	800218c <disk_read>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d004      	beq.n	8004ee2 <f_read+0x20a>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	755a      	strb	r2, [r3, #21]
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e035      	b.n	8004f4e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d901      	bls.n	8004f02 <f_read+0x22a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f10:	4413      	add	r3, r2
 8004f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f14:	4619      	mov	r1, r3
 8004f16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f18:	f7fd fa20 	bl	800235c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f20:	4413      	add	r3, r2
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	699a      	ldr	r2, [r3, #24]
 8004f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2a:	441a      	add	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	619a      	str	r2, [r3, #24]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f36:	441a      	add	r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f47f af01 	bne.w	8004d4e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3738      	adds	r7, #56	; 0x38
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b08c      	sub	sp, #48	; 0x30
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
 8004f62:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f107 0210 	add.w	r2, r7, #16
 8004f74:	4611      	mov	r1, r2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff fbe8 	bl	800474c <validate>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004f82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d107      	bne.n	8004f9a <f_write+0x44>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	7d5b      	ldrb	r3, [r3, #21]
 8004f8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004f92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <f_write+0x4a>
 8004f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f9e:	e14b      	b.n	8005238 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	7d1b      	ldrb	r3, [r3, #20]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <f_write+0x5a>
 8004fac:	2307      	movs	r3, #7
 8004fae:	e143      	b.n	8005238 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	699a      	ldr	r2, [r3, #24]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	441a      	add	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	f080 812d 	bcs.w	800521c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8004fca:	e127      	b.n	800521c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f040 80e3 	bne.w	80051a0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	0a5b      	lsrs	r3, r3, #9
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	8952      	ldrh	r2, [r2, #10]
 8004fe4:	3a01      	subs	r2, #1
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d143      	bne.n	8005078 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10c      	bne.n	8005012 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	2b00      	cmp	r3, #0
 8005002:	d11a      	bne.n	800503a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2100      	movs	r1, #0
 8005008:	4618      	mov	r0, r3
 800500a:	f7fd fe89 	bl	8002d20 <create_chain>
 800500e:	62b8      	str	r0, [r7, #40]	; 0x28
 8005010:	e013      	b.n	800503a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	4619      	mov	r1, r3
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f7fd ff15 	bl	8002e50 <clmt_clust>
 8005026:	62b8      	str	r0, [r7, #40]	; 0x28
 8005028:	e007      	b.n	800503a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f7fd fe74 	bl	8002d20 <create_chain>
 8005038:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 80f2 	beq.w	8005226 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	2b01      	cmp	r3, #1
 8005046:	d104      	bne.n	8005052 <f_write+0xfc>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2202      	movs	r2, #2
 800504c:	755a      	strb	r2, [r3, #21]
 800504e:	2302      	movs	r3, #2
 8005050:	e0f2      	b.n	8005238 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005058:	d104      	bne.n	8005064 <f_write+0x10e>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	755a      	strb	r2, [r3, #21]
 8005060:	2301      	movs	r3, #1
 8005062:	e0e9      	b.n	8005238 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005068:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d102      	bne.n	8005078 <f_write+0x122>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005076:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	7d1b      	ldrb	r3, [r3, #20]
 800507c:	b25b      	sxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	da18      	bge.n	80050b4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	7858      	ldrb	r0, [r3, #1]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a1a      	ldr	r2, [r3, #32]
 8005090:	2301      	movs	r3, #1
 8005092:	f7fd f89b 	bl	80021cc <disk_write>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d004      	beq.n	80050a6 <f_write+0x150>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2201      	movs	r2, #1
 80050a0:	755a      	strb	r2, [r3, #21]
 80050a2:	2301      	movs	r3, #1
 80050a4:	e0c8      	b.n	8005238 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	7d1b      	ldrb	r3, [r3, #20]
 80050aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	4619      	mov	r1, r3
 80050bc:	4610      	mov	r0, r2
 80050be:	f7fd fc17 	bl	80028f0 <clust2sect>
 80050c2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d104      	bne.n	80050d4 <f_write+0x17e>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2202      	movs	r2, #2
 80050ce:	755a      	strb	r2, [r3, #21]
 80050d0:	2302      	movs	r3, #2
 80050d2:	e0b1      	b.n	8005238 <f_write+0x2e2>
			sect += csect;
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	4413      	add	r3, r2
 80050da:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	0a5b      	lsrs	r3, r3, #9
 80050e0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d03c      	beq.n	8005162 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	4413      	add	r3, r2
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	8952      	ldrh	r2, [r2, #10]
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d905      	bls.n	8005102 <f_write+0x1ac>
					cc = fs->csize - csect;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	895b      	ldrh	r3, [r3, #10]
 80050fa:	461a      	mov	r2, r3
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	7858      	ldrb	r0, [r3, #1]
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	69f9      	ldr	r1, [r7, #28]
 800510c:	f7fd f85e 	bl	80021cc <disk_write>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d004      	beq.n	8005120 <f_write+0x1ca>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	755a      	strb	r2, [r3, #21]
 800511c:	2301      	movs	r3, #1
 800511e:	e08b      	b.n	8005238 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a1a      	ldr	r2, [r3, #32]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	6a3a      	ldr	r2, [r7, #32]
 800512a:	429a      	cmp	r2, r3
 800512c:	d915      	bls.n	800515a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a1a      	ldr	r2, [r3, #32]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	025b      	lsls	r3, r3, #9
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005146:	4619      	mov	r1, r3
 8005148:	f7fd f908 	bl	800235c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	7d1b      	ldrb	r3, [r3, #20]
 8005150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005154:	b2da      	uxtb	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	025b      	lsls	r3, r3, #9
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005160:	e03f      	b.n	80051e2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	429a      	cmp	r2, r3
 800516a:	d016      	beq.n	800519a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	699a      	ldr	r2, [r3, #24]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005174:	429a      	cmp	r2, r3
 8005176:	d210      	bcs.n	800519a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	7858      	ldrb	r0, [r3, #1]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005182:	2301      	movs	r3, #1
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	f7fd f801 	bl	800218c <disk_read>
 800518a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2201      	movs	r2, #1
 8005194:	755a      	strb	r2, [r3, #21]
 8005196:	2301      	movs	r3, #1
 8005198:	e04e      	b.n	8005238 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80051ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d901      	bls.n	80051ba <f_write+0x264>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c8:	4413      	add	r3, r2
 80051ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051cc:	69f9      	ldr	r1, [r7, #28]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fd f8c4 	bl	800235c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	7d1b      	ldrb	r3, [r3, #20]
 80051d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	4413      	add	r3, r2
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	441a      	add	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	619a      	str	r2, [r3, #24]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	429a      	cmp	r2, r3
 8005200:	bf38      	it	cc
 8005202:	461a      	movcc	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	60da      	str	r2, [r3, #12]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	441a      	add	r2, r3
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	f47f aed4 	bne.w	8004fcc <f_write+0x76>
 8005224:	e000      	b.n	8005228 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005226:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	7d1b      	ldrb	r3, [r3, #20]
 800522c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005230:	b2da      	uxtb	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3730      	adds	r7, #48	; 0x30
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f107 0208 	add.w	r2, r7, #8
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff fa7b 	bl	800474c <validate>
 8005256:	4603      	mov	r3, r0
 8005258:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800525a:	7dfb      	ldrb	r3, [r7, #23]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d168      	bne.n	8005332 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	7d1b      	ldrb	r3, [r3, #20]
 8005264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d062      	beq.n	8005332 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	7d1b      	ldrb	r3, [r3, #20]
 8005270:	b25b      	sxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	da15      	bge.n	80052a2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	7858      	ldrb	r0, [r3, #1]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a1a      	ldr	r2, [r3, #32]
 8005284:	2301      	movs	r3, #1
 8005286:	f7fc ffa1 	bl	80021cc <disk_write>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <f_sync+0x54>
 8005290:	2301      	movs	r3, #1
 8005292:	e04f      	b.n	8005334 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	7d1b      	ldrb	r3, [r3, #20]
 8005298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800529c:	b2da      	uxtb	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80052a2:	f7fc ffd1 	bl	8002248 <get_fattime>
 80052a6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	4619      	mov	r1, r3
 80052b0:	4610      	mov	r0, r2
 80052b2:	f7fd fa81 	bl	80027b8 <move_window>
 80052b6:	4603      	mov	r3, r0
 80052b8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d138      	bne.n	8005332 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	330b      	adds	r3, #11
 80052ca:	781a      	ldrb	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	330b      	adds	r3, #11
 80052d0:	f042 0220 	orr.w	r2, r2, #32
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	461a      	mov	r2, r3
 80052e2:	68f9      	ldr	r1, [r7, #12]
 80052e4:	f7fd ff8e 	bl	8003204 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f103 021c 	add.w	r2, r3, #28
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	4619      	mov	r1, r3
 80052f4:	4610      	mov	r0, r2
 80052f6:	f7fd f805 	bl	8002304 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3316      	adds	r3, #22
 80052fe:	6939      	ldr	r1, [r7, #16]
 8005300:	4618      	mov	r0, r3
 8005302:	f7fc ffff 	bl	8002304 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3312      	adds	r3, #18
 800530a:	2100      	movs	r1, #0
 800530c:	4618      	mov	r0, r3
 800530e:	f7fc ffde 	bl	80022ce <st_word>
					fs->wflag = 1;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2201      	movs	r2, #1
 8005316:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4618      	mov	r0, r3
 800531c:	f7fd fa7a 	bl	8002814 <sync_fs>
 8005320:	4603      	mov	r3, r0
 8005322:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	7d1b      	ldrb	r3, [r3, #20]
 8005328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532c:	b2da      	uxtb	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005332:	7dfb      	ldrb	r3, [r7, #23]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff ff7b 	bl	8005240 <f_sync>
 800534a:	4603      	mov	r3, r0
 800534c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d118      	bne.n	8005386 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f107 0208 	add.w	r2, r7, #8
 800535a:	4611      	mov	r1, r2
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff f9f5 	bl	800474c <validate>
 8005362:	4603      	mov	r3, r0
 8005364:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005366:	7bfb      	ldrb	r3, [r7, #15]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10c      	bne.n	8005386 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	4618      	mov	r0, r3
 8005372:	f7fd f97d 	bl	8002670 <dec_lock>
 8005376:	4603      	mov	r3, r0
 8005378:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d102      	bne.n	8005386 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005386:	7bfb      	ldrb	r3, [r7, #15]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b090      	sub	sp, #64	; 0x40
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f107 0208 	add.w	r2, r7, #8
 80053a0:	4611      	mov	r1, r2
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff f9d2 	bl	800474c <validate>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80053ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d103      	bne.n	80053be <f_lseek+0x2e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	7d5b      	ldrb	r3, [r3, #21]
 80053ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80053be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <f_lseek+0x3c>
 80053c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053ca:	e1e6      	b.n	800579a <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 80d1 	beq.w	8005578 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053dc:	d15a      	bne.n	8005494 <f_lseek+0x104>
			tbl = fp->cltbl;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	1d1a      	adds	r2, r3, #4
 80053e8:	627a      	str	r2, [r7, #36]	; 0x24
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	2302      	movs	r3, #2
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80053f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d03a      	beq.n	8005474 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	2300      	movs	r3, #0
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	3302      	adds	r3, #2
 800540a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005412:	3301      	adds	r3, #1
 8005414:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800541a:	4618      	mov	r0, r3
 800541c:	f7fd fa87 	bl	800292e <get_fat>
 8005420:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	2b01      	cmp	r3, #1
 8005426:	d804      	bhi.n	8005432 <f_lseek+0xa2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	755a      	strb	r2, [r3, #21]
 800542e:	2302      	movs	r3, #2
 8005430:	e1b3      	b.n	800579a <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d104      	bne.n	8005444 <f_lseek+0xb4>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	755a      	strb	r2, [r3, #21]
 8005440:	2301      	movs	r3, #1
 8005442:	e1aa      	b.n	800579a <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	3301      	adds	r3, #1
 8005448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800544a:	429a      	cmp	r2, r3
 800544c:	d0de      	beq.n	800540c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800544e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	429a      	cmp	r2, r3
 8005454:	d809      	bhi.n	800546a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	1d1a      	adds	r2, r3, #4
 800545a:	627a      	str	r2, [r7, #36]	; 0x24
 800545c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	1d1a      	adds	r2, r3, #4
 8005464:	627a      	str	r2, [r7, #36]	; 0x24
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005470:	429a      	cmp	r2, r3
 8005472:	d3c4      	bcc.n	80053fe <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800547a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800547c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	429a      	cmp	r2, r3
 8005482:	d803      	bhi.n	800548c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	e184      	b.n	8005796 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800548c:	2311      	movs	r3, #17
 800548e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005492:	e180      	b.n	8005796 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d902      	bls.n	80054a4 <f_lseek+0x114>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 8172 	beq.w	8005796 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	4619      	mov	r1, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7fd fcc9 	bl	8002e50 <clmt_clust>
 80054be:	4602      	mov	r2, r0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	4619      	mov	r1, r3
 80054cc:	4610      	mov	r0, r2
 80054ce:	f7fd fa0f 	bl	80028f0 <clust2sect>
 80054d2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d104      	bne.n	80054e4 <f_lseek+0x154>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2202      	movs	r2, #2
 80054de:	755a      	strb	r2, [r3, #21]
 80054e0:	2302      	movs	r3, #2
 80054e2:	e15a      	b.n	800579a <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	0a5b      	lsrs	r3, r3, #9
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	8952      	ldrh	r2, [r2, #10]
 80054ee:	3a01      	subs	r2, #1
 80054f0:	4013      	ands	r3, r2
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	4413      	add	r3, r2
 80054f6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 8148 	beq.w	8005796 <f_lseek+0x406>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	429a      	cmp	r2, r3
 800550e:	f000 8142 	beq.w	8005796 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	7d1b      	ldrb	r3, [r3, #20]
 8005516:	b25b      	sxtb	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	da18      	bge.n	800554e <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	7858      	ldrb	r0, [r3, #1]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1a      	ldr	r2, [r3, #32]
 800552a:	2301      	movs	r3, #1
 800552c:	f7fc fe4e 	bl	80021cc <disk_write>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d004      	beq.n	8005540 <f_lseek+0x1b0>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	755a      	strb	r2, [r3, #21]
 800553c:	2301      	movs	r3, #1
 800553e:	e12c      	b.n	800579a <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	7d1b      	ldrb	r3, [r3, #20]
 8005544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005548:	b2da      	uxtb	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	7858      	ldrb	r0, [r3, #1]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005558:	2301      	movs	r3, #1
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	f7fc fe16 	bl	800218c <disk_read>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d004      	beq.n	8005570 <f_lseek+0x1e0>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	755a      	strb	r2, [r3, #21]
 800556c:	2301      	movs	r3, #1
 800556e:	e114      	b.n	800579a <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	621a      	str	r2, [r3, #32]
 8005576:	e10e      	b.n	8005796 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d908      	bls.n	8005594 <f_lseek+0x204>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	7d1b      	ldrb	r3, [r3, #20]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800559a:	2300      	movs	r3, #0
 800559c:	637b      	str	r3, [r7, #52]	; 0x34
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055a2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 80a7 	beq.w	80056fa <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	895b      	ldrh	r3, [r3, #10]
 80055b0:	025b      	lsls	r3, r3, #9
 80055b2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d01b      	beq.n	80055f2 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	1e5a      	subs	r2, r3, #1
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	1e59      	subs	r1, r3, #1
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d30f      	bcc.n	80055f2 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	1e5a      	subs	r2, r3, #1
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	425b      	negs	r3, r3
 80055da:	401a      	ands	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80055f0:	e022      	b.n	8005638 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80055f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d119      	bne.n	8005632 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2100      	movs	r1, #0
 8005602:	4618      	mov	r0, r3
 8005604:	f7fd fb8c 	bl	8002d20 <create_chain>
 8005608:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	2b01      	cmp	r3, #1
 800560e:	d104      	bne.n	800561a <f_lseek+0x28a>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	755a      	strb	r2, [r3, #21]
 8005616:	2302      	movs	r3, #2
 8005618:	e0bf      	b.n	800579a <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005620:	d104      	bne.n	800562c <f_lseek+0x29c>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	755a      	strb	r2, [r3, #21]
 8005628:	2301      	movs	r3, #1
 800562a:	e0b6      	b.n	800579a <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005630:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005636:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8005638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563a:	2b00      	cmp	r3, #0
 800563c:	d05d      	beq.n	80056fa <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800563e:	e03a      	b.n	80056b6 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699a      	ldr	r2, [r3, #24]
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	441a      	add	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	7d1b      	ldrb	r3, [r3, #20]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00b      	beq.n	8005678 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005664:	4618      	mov	r0, r3
 8005666:	f7fd fb5b 	bl	8002d20 <create_chain>
 800566a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	2b00      	cmp	r3, #0
 8005670:	d108      	bne.n	8005684 <f_lseek+0x2f4>
							ofs = 0; break;
 8005672:	2300      	movs	r3, #0
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	e022      	b.n	80056be <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800567c:	4618      	mov	r0, r3
 800567e:	f7fd f956 	bl	800292e <get_fat>
 8005682:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568a:	d104      	bne.n	8005696 <f_lseek+0x306>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	755a      	strb	r2, [r3, #21]
 8005692:	2301      	movs	r3, #1
 8005694:	e081      	b.n	800579a <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8005696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005698:	2b01      	cmp	r3, #1
 800569a:	d904      	bls.n	80056a6 <f_lseek+0x316>
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d304      	bcc.n	80056b0 <f_lseek+0x320>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	755a      	strb	r2, [r3, #21]
 80056ac:	2302      	movs	r3, #2
 80056ae:	e074      	b.n	800579a <f_lseek+0x40a>
					fp->clust = clst;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056b4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d8c0      	bhi.n	8005640 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	441a      	add	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d012      	beq.n	80056fa <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fd f909 	bl	80028f0 <clust2sect>
 80056de:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80056e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d104      	bne.n	80056f0 <f_lseek+0x360>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2202      	movs	r2, #2
 80056ea:	755a      	strb	r2, [r3, #21]
 80056ec:	2302      	movs	r3, #2
 80056ee:	e054      	b.n	800579a <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	0a5b      	lsrs	r3, r3, #9
 80056f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f6:	4413      	add	r3, r2
 80056f8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	429a      	cmp	r2, r3
 8005704:	d90a      	bls.n	800571c <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	7d1b      	ldrb	r3, [r3, #20]
 8005712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005716:	b2da      	uxtb	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005724:	2b00      	cmp	r3, #0
 8005726:	d036      	beq.n	8005796 <f_lseek+0x406>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800572e:	429a      	cmp	r2, r3
 8005730:	d031      	beq.n	8005796 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	7d1b      	ldrb	r3, [r3, #20]
 8005736:	b25b      	sxtb	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	da18      	bge.n	800576e <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	7858      	ldrb	r0, [r3, #1]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1a      	ldr	r2, [r3, #32]
 800574a:	2301      	movs	r3, #1
 800574c:	f7fc fd3e 	bl	80021cc <disk_write>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d004      	beq.n	8005760 <f_lseek+0x3d0>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	755a      	strb	r2, [r3, #21]
 800575c:	2301      	movs	r3, #1
 800575e:	e01c      	b.n	800579a <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	7d1b      	ldrb	r3, [r3, #20]
 8005764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005768:	b2da      	uxtb	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	7858      	ldrb	r0, [r3, #1]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005778:	2301      	movs	r3, #1
 800577a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800577c:	f7fc fd06 	bl	800218c <disk_read>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d004      	beq.n	8005790 <f_lseek+0x400>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	755a      	strb	r2, [r3, #21]
 800578c:	2301      	movs	r3, #1
 800578e:	e004      	b.n	800579a <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005794:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8005796:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800579a:	4618      	mov	r0, r3
 800579c:	3740      	adds	r7, #64	; 0x40
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	1d3b      	adds	r3, r7, #4
 80057ac:	6018      	str	r0, [r3, #0]
 80057ae:	463b      	mov	r3, r7
 80057b0:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80057b2:	1d3b      	adds	r3, r7, #4
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <f_opendir+0x1c>
 80057ba:	2309      	movs	r3, #9
 80057bc:	e08a      	b.n	80058d4 <f_opendir+0x132>

	/* Get logical drive */
	obj = &dp->obj;
 80057be:	1d3b      	adds	r3, r7, #4
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 80057c6:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 80057ca:	463b      	mov	r3, r7
 80057cc:	2200      	movs	r2, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fe fd70 	bl	80042b4 <find_volume>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 80057da:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d16e      	bne.n	80058c0 <f_opendir+0x11e>
		obj->fs = fs;
 80057e2:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80057e6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80057ea:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 80057ec:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80057f0:	f107 020c 	add.w	r2, r7, #12
 80057f4:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80057f6:	463b      	mov	r3, r7
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	1d3b      	adds	r3, r7, #4
 80057fc:	4611      	mov	r1, r2
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	f7fe fc4c 	bl	800409c <follow_path>
 8005804:	4603      	mov	r3, r0
 8005806:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 800580a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800580e:	2b00      	cmp	r3, #0
 8005810:	d14f      	bne.n	80058b2 <f_opendir+0x110>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8005812:	1d3b      	adds	r3, r7, #4
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800581a:	b25b      	sxtb	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	db17      	blt.n	8005850 <f_opendir+0xae>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8005820:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005824:	799b      	ldrb	r3, [r3, #6]
 8005826:	f003 0310 	and.w	r3, r3, #16
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00d      	beq.n	800584a <f_opendir+0xa8>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800582e:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8005832:	1d3b      	adds	r3, r7, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f7fd fcc3 	bl	80031c6 <ld_clust>
 8005840:	4602      	mov	r2, r0
 8005842:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005846:	609a      	str	r2, [r3, #8]
 8005848:	e002      	b.n	8005850 <f_opendir+0xae>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800584a:	2305      	movs	r3, #5
 800584c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 8005850:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005854:	2b00      	cmp	r3, #0
 8005856:	d12c      	bne.n	80058b2 <f_opendir+0x110>
				obj->id = fs->id;
 8005858:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800585c:	88da      	ldrh	r2, [r3, #6]
 800585e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005862:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8005864:	1d3b      	adds	r3, r7, #4
 8005866:	2100      	movs	r1, #0
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	f7fd fb25 	bl	8002eb8 <dir_sdi>
 800586e:	4603      	mov	r3, r0
 8005870:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8005874:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005878:	2b00      	cmp	r3, #0
 800587a:	d11a      	bne.n	80058b2 <f_opendir+0x110>
					if (obj->sclust) {
 800587c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d011      	beq.n	80058aa <f_opendir+0x108>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8005886:	1d3b      	adds	r3, r7, #4
 8005888:	2100      	movs	r1, #0
 800588a:	6818      	ldr	r0, [r3, #0]
 800588c:	f7fc fe62 	bl	8002554 <inc_lock>
 8005890:	4602      	mov	r2, r0
 8005892:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005896:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8005898:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d107      	bne.n	80058b2 <f_opendir+0x110>
 80058a2:	2312      	movs	r3, #18
 80058a4:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 80058a8:	e003      	b.n	80058b2 <f_opendir+0x110>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80058aa:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80058ae:	2200      	movs	r2, #0
 80058b0:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80058b2:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	d102      	bne.n	80058c0 <f_opendir+0x11e>
 80058ba:	2305      	movs	r3, #5
 80058bc:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80058c0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <f_opendir+0x12e>
 80058c8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80058d0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f107 0208 	add.w	r2, r7, #8
 80058ec:	4611      	mov	r1, r2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe ff2c 	bl	800474c <validate>
 80058f4:	4603      	mov	r3, r0
 80058f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d110      	bne.n	8005920 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d006      	beq.n	8005914 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	4618      	mov	r0, r3
 800590c:	f7fc feb0 	bl	8002670 <dec_lock>
 8005910:	4603      	mov	r3, r0
 8005912:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d102      	bne.n	8005920 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8005920:	7bfb      	ldrb	r3, [r7, #15]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8005930:	af00      	add	r7, sp, #0
 8005932:	1d3b      	adds	r3, r7, #4
 8005934:	6018      	str	r0, [r3, #0]
 8005936:	463b      	mov	r3, r7
 8005938:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800593a:	1d3b      	adds	r3, r7, #4
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005942:	4611      	mov	r1, r2
 8005944:	4618      	mov	r0, r3
 8005946:	f7fe ff01 	bl	800474c <validate>
 800594a:	4603      	mov	r3, r0
 800594c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 8005950:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8005954:	2b00      	cmp	r3, #0
 8005956:	d139      	bne.n	80059cc <f_readdir+0xa2>
		if (!fno) {
 8005958:	463b      	mov	r3, r7
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d108      	bne.n	8005972 <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8005960:	1d3b      	adds	r3, r7, #4
 8005962:	2100      	movs	r1, #0
 8005964:	6818      	ldr	r0, [r3, #0]
 8005966:	f7fd faa7 	bl	8002eb8 <dir_sdi>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8005970:	e02c      	b.n	80059cc <f_readdir+0xa2>
		} else {
			INIT_NAMBUF(fs);
 8005972:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005976:	f107 0208 	add.w	r2, r7, #8
 800597a:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800597c:	1d3b      	adds	r3, r7, #4
 800597e:	2100      	movs	r1, #0
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	f7fd fe4c 	bl	800361e <dir_read>
 8005986:	4603      	mov	r3, r0
 8005988:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800598c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8005990:	2b04      	cmp	r3, #4
 8005992:	d102      	bne.n	800599a <f_readdir+0x70>
 8005994:	2300      	movs	r3, #0
 8005996:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 800599a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d114      	bne.n	80059cc <f_readdir+0xa2>
				get_fileinfo(dp, fno);		/* Get the object information */
 80059a2:	463a      	mov	r2, r7
 80059a4:	1d3b      	adds	r3, r7, #4
 80059a6:	6811      	ldr	r1, [r2, #0]
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	f7fe f8e1 	bl	8003b70 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80059ae:	1d3b      	adds	r3, r7, #4
 80059b0:	2100      	movs	r1, #0
 80059b2:	6818      	ldr	r0, [r3, #0]
 80059b4:	f7fd fafb 	bl	8002fae <dir_next>
 80059b8:	4603      	mov	r3, r0
 80059ba:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80059be:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d102      	bne.n	80059cc <f_readdir+0xa2>
 80059c6:	2300      	movs	r3, #0
 80059c8:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80059cc:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b092      	sub	sp, #72	; 0x48
 80059de:	af00      	add	r7, sp, #0
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80059e6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80059ea:	f107 030c 	add.w	r3, r7, #12
 80059ee:	2200      	movs	r2, #0
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fe fc5f 	bl	80042b4 <find_volume>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80059fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f040 8099 	bne.w	8005b38 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8005a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	695a      	ldr	r2, [r3, #20]
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	3b02      	subs	r3, #2
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d804      	bhi.n	8005a24 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8005a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1c:	695a      	ldr	r2, [r3, #20]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	e089      	b.n	8005b38 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005a24:	2300      	movs	r3, #0
 8005a26:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d128      	bne.n	8005a82 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8005a30:	2302      	movs	r3, #2
 8005a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a36:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005a38:	f107 0314 	add.w	r3, r7, #20
 8005a3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fc ff75 	bl	800292e <get_fat>
 8005a44:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d103      	bne.n	8005a56 <f_getfree+0x7c>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005a54:	e063      	b.n	8005b1e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d103      	bne.n	8005a64 <f_getfree+0x8a>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005a62:	e05c      	b.n	8005b1e <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d102      	bne.n	8005a70 <f_getfree+0x96>
 8005a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8005a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a72:	3301      	adds	r3, #1
 8005a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d3db      	bcc.n	8005a38 <f_getfree+0x5e>
 8005a80:	e04d      	b.n	8005b1e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	637b      	str	r3, [r7, #52]	; 0x34
 8005a92:	2300      	movs	r3, #0
 8005a94:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8005a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d113      	bne.n	8005ac4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	63ba      	str	r2, [r7, #56]	; 0x38
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	f7fc fe87 	bl	80027b8 <move_window>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8005ab0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d131      	bne.n	8005b1c <f_getfree+0x142>
							p = fs->win;
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aba:	3334      	adds	r3, #52	; 0x34
 8005abc:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8005abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ac2:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d10f      	bne.n	8005aec <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8005acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ace:	f7fc fbc3 	bl	8002258 <ld_word>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d102      	bne.n	8005ade <f_getfree+0x104>
 8005ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ada:	3301      	adds	r3, #1
 8005adc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae6:	3b02      	subs	r3, #2
 8005ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aea:	e010      	b.n	8005b0e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8005aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aee:	f7fc fbcb 	bl	8002288 <ld_dword>
 8005af2:	4603      	mov	r3, r0
 8005af4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d102      	bne.n	8005b02 <f_getfree+0x128>
 8005afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005afe:	3301      	adds	r3, #1
 8005b00:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	3304      	adds	r3, #4
 8005b06:	633b      	str	r3, [r7, #48]	; 0x30
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0a:	3b04      	subs	r3, #4
 8005b0c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8005b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b10:	3b01      	subs	r3, #1
 8005b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1bd      	bne.n	8005a96 <f_getfree+0xbc>
 8005b1a:	e000      	b.n	8005b1e <f_getfree+0x144>
							if (res != FR_OK) break;
 8005b1c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b22:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b28:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8005b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2c:	791a      	ldrb	r2, [r3, #4]
 8005b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b30:	f042 0201 	orr.w	r2, r2, #1
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8005b38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3748      	adds	r7, #72	; 0x48
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	1d3b      	adds	r3, r7, #4
 8005b4e:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8005b56:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8005b5a:	1d3b      	adds	r3, r7, #4
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe fba8 	bl	80042b4 <find_volume>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
	dj.obj.fs = fs;
 8005b6a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005b6e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	if (res == FR_OK) {
 8005b72:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f040 809e 	bne.w	8005cb8 <f_unlink+0x174>
		INIT_NAMBUF(fs);
 8005b7c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005b80:	f107 020c 	add.w	r2, r7, #12
 8005b84:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 8005b86:	1d3b      	adds	r3, r7, #4
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8005b8e:	4611      	mov	r1, r2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fe fa83 	bl	800409c <follow_path>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8005b9c:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d108      	bne.n	8005bb6 <f_unlink+0x72>
 8005ba4:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8005ba8:	2102      	movs	r1, #2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fc fc54 	bl	8002458 <chk_lock>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8005bb6:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d17c      	bne.n	8005cb8 <f_unlink+0x174>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8005bbe:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 8005bc2:	b25b      	sxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	da03      	bge.n	8005bd0 <f_unlink+0x8c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8005bc8:	2306      	movs	r3, #6
 8005bca:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 8005bce:	e008      	b.n	8005be2 <f_unlink+0x9e>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8005bd0:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <f_unlink+0x9e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8005bdc:	2307      	movs	r3, #7
 8005bde:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				}
			}
			if (res == FR_OK) {
 8005be2:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d13b      	bne.n	8005c62 <f_unlink+0x11e>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8005bea:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005bee:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fd fae6 	bl	80031c6 <ld_clust>
 8005bfa:	f8c7 0278 	str.w	r0, [r7, #632]	; 0x278
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8005bfe:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8005c02:	f003 0310 	and.w	r3, r3, #16
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d02b      	beq.n	8005c62 <f_unlink+0x11e>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8005c0a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005c0e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
						sdj.obj.sclust = dclst;
 8005c12:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8005c16:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8005c1a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fd f949 	bl	8002eb8 <dir_sdi>
 8005c26:	4603      	mov	r3, r0
 8005c28:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						if (res == FR_OK) {
 8005c2c:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d116      	bne.n	8005c62 <f_unlink+0x11e>
							res = dir_read(&sdj, 0);			/* Read an item */
 8005c34:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8005c38:	2100      	movs	r1, #0
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fd fcef 	bl	800361e <dir_read>
 8005c40:	4603      	mov	r3, r0
 8005c42:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8005c46:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <f_unlink+0x110>
 8005c4e:	2307      	movs	r3, #7
 8005c50:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8005c54:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d102      	bne.n	8005c62 <f_unlink+0x11e>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						}
					}
				}
			}
			if (res == FR_OK) {
 8005c62:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d126      	bne.n	8005cb8 <f_unlink+0x174>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8005c6a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fd ff34 	bl	8003adc <dir_remove>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8005c7a:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10e      	bne.n	8005ca0 <f_unlink+0x15c>
 8005c82:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <f_unlink+0x15c>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8005c8a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fc ffde 	bl	8002c56 <remove_chain>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8005ca0:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d107      	bne.n	8005cb8 <f_unlink+0x174>
 8005ca8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fc fdb1 	bl	8002814 <sync_fs>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8005cb8:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f507 7720 	add.w	r7, r7, #640	; 0x280
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	70fb      	strb	r3, [r7, #3]

	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	db25      	blt.n	8005d2a <putc_bfd+0x64>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	60fa      	str	r2, [r7, #12]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	78fa      	ldrb	r2, [r7, #3]
 8005cea:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b3c      	cmp	r3, #60	; 0x3c
 8005cf0:	dd12      	ble.n	8005d18 <putc_bfd+0x52>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f103 010c 	add.w	r1, r3, #12
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	f107 0308 	add.w	r3, r7, #8
 8005d02:	f7ff f928 	bl	8004f56 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d101      	bne.n	8005d12 <putc_bfd+0x4c>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e001      	b.n	8005d16 <putc_bfd+0x50>
 8005d12:	f04f 33ff 	mov.w	r3, #4294967295
 8005d16:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	609a      	str	r2, [r3, #8]
 8005d28:	e000      	b.n	8005d2c <putc_bfd+0x66>
	if (i < 0) return;
 8005d2a:	bf00      	nop
}
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	db16      	blt.n	8005d70 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f103 010c 	add.w	r1, r3, #12
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	461a      	mov	r2, r3
 8005d52:	f107 030c 	add.w	r3, r7, #12
 8005d56:	f7ff f8fe 	bl	8004f56 <f_write>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d107      	bne.n	8005d70 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d102      	bne.n	8005d70 <putc_flush+0x3e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	e001      	b.n	8005d74 <putc_flush+0x42>
	return EOF;
 8005d70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	605a      	str	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	609a      	str	r2, [r3, #8]
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8005da8:	b40e      	push	{r1, r2, r3}
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b0a7      	sub	sp, #156	; 0x9c
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8005db2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff ffdf 	bl	8005d7c <putc_init>

	va_start(arp, fmt);
 8005dbe:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005dc2:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8005dc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8005dd4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 81f4 	beq.w	80061c6 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8005dde:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005de2:	2b25      	cmp	r3, #37	; 0x25
 8005de4:	d008      	beq.n	8005df8 <f_printf+0x50>
			putc_bfd(&pb, c);
 8005de6:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8005dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dee:	4611      	mov	r1, r2
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff ff68 	bl	8005cc6 <putc_bfd>
			continue;
 8005df6:	e1e5      	b.n	80061c4 <f_printf+0x41c>
		}
		w = f = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8005e04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8005e14:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005e18:	2b30      	cmp	r3, #48	; 0x30
 8005e1a:	d10b      	bne.n	8005e34 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005e22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8005e32:	e024      	b.n	8005e7e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8005e34:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005e38:	2b2d      	cmp	r3, #45	; 0x2d
 8005e3a:	d120      	bne.n	8005e7e <f_printf+0xd6>
				f = 2; c = *fmt++;
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005e42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8005e52:	e014      	b.n	8005e7e <f_printf+0xd6>
			w = w * 10 + c - '0';
 8005e54:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	461a      	mov	r2, r3
 8005e62:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005e66:	4413      	add	r3, r2
 8005e68:	3b30      	subs	r3, #48	; 0x30
 8005e6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8005e6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8005e7e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005e82:	2b2f      	cmp	r3, #47	; 0x2f
 8005e84:	d903      	bls.n	8005e8e <f_printf+0xe6>
 8005e86:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005e8a:	2b39      	cmp	r3, #57	; 0x39
 8005e8c:	d9e2      	bls.n	8005e54 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8005e8e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005e92:	2b6c      	cmp	r3, #108	; 0x6c
 8005e94:	d003      	beq.n	8005e9e <f_printf+0xf6>
 8005e96:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005e9a:	2b4c      	cmp	r3, #76	; 0x4c
 8005e9c:	d10d      	bne.n	8005eba <f_printf+0x112>
			f |= 4; c = *fmt++;
 8005e9e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005ea2:	f043 0304 	orr.w	r3, r3, #4
 8005ea6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005eaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8005eba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 8183 	beq.w	80061ca <f_printf+0x422>
		d = c;
 8005ec4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8005ec8:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8005ecc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005ed0:	2b60      	cmp	r3, #96	; 0x60
 8005ed2:	d908      	bls.n	8005ee6 <f_printf+0x13e>
 8005ed4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005ed8:	2b7a      	cmp	r3, #122	; 0x7a
 8005eda:	d804      	bhi.n	8005ee6 <f_printf+0x13e>
 8005edc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005ee0:	3b20      	subs	r3, #32
 8005ee2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8005ee6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005eea:	3b42      	subs	r3, #66	; 0x42
 8005eec:	2b16      	cmp	r3, #22
 8005eee:	f200 8098 	bhi.w	8006022 <f_printf+0x27a>
 8005ef2:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <f_printf+0x150>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08006003 	.word	0x08006003
 8005efc:	08005feb 	.word	0x08005feb
 8005f00:	08006013 	.word	0x08006013
 8005f04:	08006023 	.word	0x08006023
 8005f08:	08006023 	.word	0x08006023
 8005f0c:	08006023 	.word	0x08006023
 8005f10:	08006023 	.word	0x08006023
 8005f14:	08006023 	.word	0x08006023
 8005f18:	08006023 	.word	0x08006023
 8005f1c:	08006023 	.word	0x08006023
 8005f20:	08006023 	.word	0x08006023
 8005f24:	08006023 	.word	0x08006023
 8005f28:	08006023 	.word	0x08006023
 8005f2c:	0800600b 	.word	0x0800600b
 8005f30:	08006023 	.word	0x08006023
 8005f34:	08006023 	.word	0x08006023
 8005f38:	08006023 	.word	0x08006023
 8005f3c:	08005f55 	.word	0x08005f55
 8005f40:	08006023 	.word	0x08006023
 8005f44:	08006013 	.word	0x08006013
 8005f48:	08006023 	.word	0x08006023
 8005f4c:	08006023 	.word	0x08006023
 8005f50:	0800601b 	.word	0x0800601b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8005f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f56:	1d1a      	adds	r2, r3, #4
 8005f58:	67ba      	str	r2, [r7, #120]	; 0x78
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f64:	e004      	b.n	8005f70 <f_printf+0x1c8>
 8005f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f70:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f76:	4413      	add	r3, r2
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1f3      	bne.n	8005f66 <f_printf+0x1be>
			if (!(f & 2)) {
 8005f7e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d11a      	bne.n	8005fc0 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8005f8a:	e005      	b.n	8005f98 <f_printf+0x1f0>
 8005f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f90:	2120      	movs	r1, #32
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff fe97 	bl	8005cc6 <putc_bfd>
 8005f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005fa2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d8f0      	bhi.n	8005f8c <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8005faa:	e009      	b.n	8005fc0 <f_printf+0x218>
 8005fac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005fb2:	781a      	ldrb	r2, [r3, #0]
 8005fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fb8:	4611      	mov	r1, r2
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7ff fe83 	bl	8005cc6 <putc_bfd>
 8005fc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1f1      	bne.n	8005fac <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8005fc8:	e005      	b.n	8005fd6 <f_printf+0x22e>
 8005fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fce:	2120      	movs	r1, #32
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff fe78 	bl	8005cc6 <putc_bfd>
 8005fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005fe0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d8f0      	bhi.n	8005fca <f_printf+0x222>
			continue;
 8005fe8:	e0ec      	b.n	80061c4 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8005fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fec:	1d1a      	adds	r2, r3, #4
 8005fee:	67ba      	str	r2, [r7, #120]	; 0x78
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7ff fe63 	bl	8005cc6 <putc_bfd>
 8006000:	e0e0      	b.n	80061c4 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8006002:	2302      	movs	r3, #2
 8006004:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8006008:	e014      	b.n	8006034 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800600a:	2308      	movs	r3, #8
 800600c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8006010:	e010      	b.n	8006034 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8006012:	230a      	movs	r3, #10
 8006014:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8006018:	e00c      	b.n	8006034 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800601a:	2310      	movs	r3, #16
 800601c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8006020:	e008      	b.n	8006034 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8006022:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8006026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800602a:	4611      	mov	r1, r2
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff fe4a 	bl	8005cc6 <putc_bfd>
 8006032:	e0c7      	b.n	80061c4 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8006034:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	d004      	beq.n	800604a <f_printf+0x2a2>
 8006040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006042:	1d1a      	adds	r2, r3, #4
 8006044:	67ba      	str	r2, [r7, #120]	; 0x78
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	e00c      	b.n	8006064 <f_printf+0x2bc>
 800604a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800604e:	2b44      	cmp	r3, #68	; 0x44
 8006050:	d104      	bne.n	800605c <f_printf+0x2b4>
 8006052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006054:	1d1a      	adds	r2, r3, #4
 8006056:	67ba      	str	r2, [r7, #120]	; 0x78
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	e003      	b.n	8006064 <f_printf+0x2bc>
 800605c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800605e:	1d1a      	adds	r2, r3, #4
 8006060:	67ba      	str	r2, [r7, #120]	; 0x78
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8006068:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800606c:	2b44      	cmp	r3, #68	; 0x44
 800606e:	d10e      	bne.n	800608e <f_printf+0x2e6>
 8006070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006074:	2b00      	cmp	r3, #0
 8006076:	da0a      	bge.n	800608e <f_printf+0x2e6>
			v = 0 - v;
 8006078:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800607c:	425b      	negs	r3, r3
 800607e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8006082:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006086:	f043 0308 	orr.w	r3, r3, #8
 800608a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8006094:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8006098:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800609c:	fbb3 f1f2 	udiv	r1, r3, r2
 80060a0:	fb02 f201 	mul.w	r2, r2, r1
 80060a4:	1a9b      	subs	r3, r3, r2
 80060a6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80060aa:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80060ae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80060b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80060ba:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80060be:	2b09      	cmp	r3, #9
 80060c0:	d90b      	bls.n	80060da <f_printf+0x332>
 80060c2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80060c6:	2b78      	cmp	r3, #120	; 0x78
 80060c8:	d101      	bne.n	80060ce <f_printf+0x326>
 80060ca:	2227      	movs	r2, #39	; 0x27
 80060cc:	e000      	b.n	80060d0 <f_printf+0x328>
 80060ce:	2207      	movs	r2, #7
 80060d0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80060d4:	4413      	add	r3, r2
 80060d6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 80060da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80060e4:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80060e8:	3230      	adds	r2, #48	; 0x30
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80060f0:	440b      	add	r3, r1
 80060f2:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 80060f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <f_printf+0x35e>
 80060fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006102:	2b1f      	cmp	r3, #31
 8006104:	d9c6      	bls.n	8006094 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8006106:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800610a:	f003 0308 	and.w	r3, r3, #8
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <f_printf+0x380>
 8006112:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800611c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8006120:	4413      	add	r3, r2
 8006122:	222d      	movs	r2, #45	; 0x2d
 8006124:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8006128:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800612c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006130:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <f_printf+0x398>
 800613c:	2330      	movs	r3, #48	; 0x30
 800613e:	e000      	b.n	8006142 <f_printf+0x39a>
 8006140:	2320      	movs	r3, #32
 8006142:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8006146:	e007      	b.n	8006158 <f_printf+0x3b0>
 8006148:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800614c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006150:	4611      	mov	r1, r2
 8006152:	4618      	mov	r0, r3
 8006154:	f7ff fdb7 	bl	8005cc6 <putc_bfd>
 8006158:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d108      	bne.n	8006176 <f_printf+0x3ce>
 8006164:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800616e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006172:	429a      	cmp	r2, r3
 8006174:	d8e8      	bhi.n	8006148 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8006176:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800617a:	3b01      	subs	r3, #1
 800617c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006180:	f107 020c 	add.w	r2, r7, #12
 8006184:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006188:	4413      	add	r3, r2
 800618a:	781a      	ldrb	r2, [r3, #0]
 800618c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006190:	4611      	mov	r1, r2
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff fd97 	bl	8005cc6 <putc_bfd>
		} while (i);
 8006198:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1ea      	bne.n	8006176 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 80061a0:	e007      	b.n	80061b2 <f_printf+0x40a>
 80061a2:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80061a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061aa:	4611      	mov	r1, r2
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7ff fd8a 	bl	8005cc6 <putc_bfd>
 80061b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80061bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d8ee      	bhi.n	80061a2 <f_printf+0x3fa>
		c = *fmt++;
 80061c4:	e5fe      	b.n	8005dc4 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80061c6:	bf00      	nop
 80061c8:	e000      	b.n	80061cc <f_printf+0x424>
		if (!c) break;
 80061ca:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80061cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7ff fdae 	bl	8005d32 <putc_flush>
 80061d6:	4603      	mov	r3, r0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	379c      	adds	r7, #156	; 0x9c
 80061dc:	46bd      	mov	sp, r7
 80061de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061e2:	b003      	add	sp, #12
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop

080061e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	4613      	mov	r3, r2
 80061f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80061f6:	2301      	movs	r3, #1
 80061f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80061fe:	4b1f      	ldr	r3, [pc, #124]	; (800627c <FATFS_LinkDriverEx+0x94>)
 8006200:	7b9b      	ldrb	r3, [r3, #14]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b01      	cmp	r3, #1
 8006206:	d831      	bhi.n	800626c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006208:	4b1c      	ldr	r3, [pc, #112]	; (800627c <FATFS_LinkDriverEx+0x94>)
 800620a:	7b9b      	ldrb	r3, [r3, #14]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	461a      	mov	r2, r3
 8006210:	4b1a      	ldr	r3, [pc, #104]	; (800627c <FATFS_LinkDriverEx+0x94>)
 8006212:	2100      	movs	r1, #0
 8006214:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006216:	4b19      	ldr	r3, [pc, #100]	; (800627c <FATFS_LinkDriverEx+0x94>)
 8006218:	7b9b      	ldrb	r3, [r3, #14]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	4a17      	ldr	r2, [pc, #92]	; (800627c <FATFS_LinkDriverEx+0x94>)
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006226:	4b15      	ldr	r3, [pc, #84]	; (800627c <FATFS_LinkDriverEx+0x94>)
 8006228:	7b9b      	ldrb	r3, [r3, #14]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	461a      	mov	r2, r3
 800622e:	4b13      	ldr	r3, [pc, #76]	; (800627c <FATFS_LinkDriverEx+0x94>)
 8006230:	4413      	add	r3, r2
 8006232:	79fa      	ldrb	r2, [r7, #7]
 8006234:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 8006236:	4b11      	ldr	r3, [pc, #68]	; (800627c <FATFS_LinkDriverEx+0x94>)
 8006238:	7b9b      	ldrb	r3, [r3, #14]
 800623a:	b2db      	uxtb	r3, r3
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	b2d1      	uxtb	r1, r2
 8006240:	4a0e      	ldr	r2, [pc, #56]	; (800627c <FATFS_LinkDriverEx+0x94>)
 8006242:	7391      	strb	r1, [r2, #14]
 8006244:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006246:	7dbb      	ldrb	r3, [r7, #22]
 8006248:	3330      	adds	r3, #48	; 0x30
 800624a:	b2da      	uxtb	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	3301      	adds	r3, #1
 8006254:	223a      	movs	r2, #58	; 0x3a
 8006256:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	3302      	adds	r3, #2
 800625c:	222f      	movs	r2, #47	; 0x2f
 800625e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	3303      	adds	r3, #3
 8006264:	2200      	movs	r2, #0
 8006266:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800626c:	7dfb      	ldrb	r3, [r7, #23]
}
 800626e:	4618      	mov	r0, r3
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	200002f0 	.word	0x200002f0

08006280 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800628a:	2200      	movs	r2, #0
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff ffaa 	bl	80061e8 <FATFS_LinkDriverEx>
 8006294:	4603      	mov	r3, r0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	6039      	str	r1, [r7, #0]
 80062aa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80062ac:	88fb      	ldrh	r3, [r7, #6]
 80062ae:	2b7f      	cmp	r3, #127	; 0x7f
 80062b0:	d802      	bhi.n	80062b8 <ff_convert+0x18>
		c = chr;
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	81fb      	strh	r3, [r7, #14]
 80062b6:	e025      	b.n	8006304 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00b      	beq.n	80062d6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	2bff      	cmp	r3, #255	; 0xff
 80062c2:	d805      	bhi.n	80062d0 <ff_convert+0x30>
 80062c4:	88fb      	ldrh	r3, [r7, #6]
 80062c6:	3b80      	subs	r3, #128	; 0x80
 80062c8:	4a12      	ldr	r2, [pc, #72]	; (8006314 <ff_convert+0x74>)
 80062ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ce:	e000      	b.n	80062d2 <ff_convert+0x32>
 80062d0:	2300      	movs	r3, #0
 80062d2:	81fb      	strh	r3, [r7, #14]
 80062d4:	e016      	b.n	8006304 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80062d6:	2300      	movs	r3, #0
 80062d8:	81fb      	strh	r3, [r7, #14]
 80062da:	e009      	b.n	80062f0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80062dc:	89fb      	ldrh	r3, [r7, #14]
 80062de:	4a0d      	ldr	r2, [pc, #52]	; (8006314 <ff_convert+0x74>)
 80062e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062e4:	88fa      	ldrh	r2, [r7, #6]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d006      	beq.n	80062f8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80062ea:	89fb      	ldrh	r3, [r7, #14]
 80062ec:	3301      	adds	r3, #1
 80062ee:	81fb      	strh	r3, [r7, #14]
 80062f0:	89fb      	ldrh	r3, [r7, #14]
 80062f2:	2b7f      	cmp	r3, #127	; 0x7f
 80062f4:	d9f2      	bls.n	80062dc <ff_convert+0x3c>
 80062f6:	e000      	b.n	80062fa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80062f8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80062fa:	89fb      	ldrh	r3, [r7, #14]
 80062fc:	3380      	adds	r3, #128	; 0x80
 80062fe:	b29b      	uxth	r3, r3
 8006300:	b2db      	uxtb	r3, r3
 8006302:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006304:	89fb      	ldrh	r3, [r7, #14]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	0800c204 	.word	0x0800c204

08006318 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006322:	88fb      	ldrh	r3, [r7, #6]
 8006324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006328:	d201      	bcs.n	800632e <ff_wtoupper+0x16>
 800632a:	4b3e      	ldr	r3, [pc, #248]	; (8006424 <ff_wtoupper+0x10c>)
 800632c:	e000      	b.n	8006330 <ff_wtoupper+0x18>
 800632e:	4b3e      	ldr	r3, [pc, #248]	; (8006428 <ff_wtoupper+0x110>)
 8006330:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	1c9a      	adds	r2, r3, #2
 8006336:	617a      	str	r2, [r7, #20]
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800633c:	8a7b      	ldrh	r3, [r7, #18]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d068      	beq.n	8006414 <ff_wtoupper+0xfc>
 8006342:	88fa      	ldrh	r2, [r7, #6]
 8006344:	8a7b      	ldrh	r3, [r7, #18]
 8006346:	429a      	cmp	r2, r3
 8006348:	d364      	bcc.n	8006414 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	1c9a      	adds	r2, r3, #2
 800634e:	617a      	str	r2, [r7, #20]
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	823b      	strh	r3, [r7, #16]
 8006354:	8a3b      	ldrh	r3, [r7, #16]
 8006356:	0a1b      	lsrs	r3, r3, #8
 8006358:	81fb      	strh	r3, [r7, #14]
 800635a:	8a3b      	ldrh	r3, [r7, #16]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006360:	88fa      	ldrh	r2, [r7, #6]
 8006362:	8a79      	ldrh	r1, [r7, #18]
 8006364:	8a3b      	ldrh	r3, [r7, #16]
 8006366:	440b      	add	r3, r1
 8006368:	429a      	cmp	r2, r3
 800636a:	da49      	bge.n	8006400 <ff_wtoupper+0xe8>
			switch (cmd) {
 800636c:	89fb      	ldrh	r3, [r7, #14]
 800636e:	2b08      	cmp	r3, #8
 8006370:	d84f      	bhi.n	8006412 <ff_wtoupper+0xfa>
 8006372:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <ff_wtoupper+0x60>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	0800639d 	.word	0x0800639d
 800637c:	080063af 	.word	0x080063af
 8006380:	080063c5 	.word	0x080063c5
 8006384:	080063cd 	.word	0x080063cd
 8006388:	080063d5 	.word	0x080063d5
 800638c:	080063dd 	.word	0x080063dd
 8006390:	080063e5 	.word	0x080063e5
 8006394:	080063ed 	.word	0x080063ed
 8006398:	080063f5 	.word	0x080063f5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800639c:	88fa      	ldrh	r2, [r7, #6]
 800639e:	8a7b      	ldrh	r3, [r7, #18]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4413      	add	r3, r2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	80fb      	strh	r3, [r7, #6]
 80063ac:	e027      	b.n	80063fe <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80063ae:	88fa      	ldrh	r2, [r7, #6]
 80063b0:	8a7b      	ldrh	r3, [r7, #18]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	88fa      	ldrh	r2, [r7, #6]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	80fb      	strh	r3, [r7, #6]
 80063c2:	e01c      	b.n	80063fe <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80063c4:	88fb      	ldrh	r3, [r7, #6]
 80063c6:	3b10      	subs	r3, #16
 80063c8:	80fb      	strh	r3, [r7, #6]
 80063ca:	e018      	b.n	80063fe <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	3b20      	subs	r3, #32
 80063d0:	80fb      	strh	r3, [r7, #6]
 80063d2:	e014      	b.n	80063fe <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	3b30      	subs	r3, #48	; 0x30
 80063d8:	80fb      	strh	r3, [r7, #6]
 80063da:	e010      	b.n	80063fe <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80063dc:	88fb      	ldrh	r3, [r7, #6]
 80063de:	3b1a      	subs	r3, #26
 80063e0:	80fb      	strh	r3, [r7, #6]
 80063e2:	e00c      	b.n	80063fe <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80063e4:	88fb      	ldrh	r3, [r7, #6]
 80063e6:	3308      	adds	r3, #8
 80063e8:	80fb      	strh	r3, [r7, #6]
 80063ea:	e008      	b.n	80063fe <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80063ec:	88fb      	ldrh	r3, [r7, #6]
 80063ee:	3b50      	subs	r3, #80	; 0x50
 80063f0:	80fb      	strh	r3, [r7, #6]
 80063f2:	e004      	b.n	80063fe <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80063f4:	88fb      	ldrh	r3, [r7, #6]
 80063f6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80063fa:	80fb      	strh	r3, [r7, #6]
 80063fc:	bf00      	nop
			}
			break;
 80063fe:	e008      	b.n	8006412 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006400:	89fb      	ldrh	r3, [r7, #14]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d195      	bne.n	8006332 <ff_wtoupper+0x1a>
 8006406:	8a3b      	ldrh	r3, [r7, #16]
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4413      	add	r3, r2
 800640e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006410:	e78f      	b.n	8006332 <ff_wtoupper+0x1a>
			break;
 8006412:	bf00      	nop
	}

	return chr;
 8006414:	88fb      	ldrh	r3, [r7, #6]
}
 8006416:	4618      	mov	r0, r3
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	0800c304 	.word	0x0800c304
 8006428:	0800c4f8 	.word	0x0800c4f8

0800642c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006430:	4b0e      	ldr	r3, [pc, #56]	; (800646c <HAL_Init+0x40>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a0d      	ldr	r2, [pc, #52]	; (800646c <HAL_Init+0x40>)
 8006436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800643a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800643c:	4b0b      	ldr	r3, [pc, #44]	; (800646c <HAL_Init+0x40>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a0a      	ldr	r2, [pc, #40]	; (800646c <HAL_Init+0x40>)
 8006442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006448:	4b08      	ldr	r3, [pc, #32]	; (800646c <HAL_Init+0x40>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a07      	ldr	r2, [pc, #28]	; (800646c <HAL_Init+0x40>)
 800644e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006454:	2003      	movs	r0, #3
 8006456:	f000 f973 	bl	8006740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800645a:	2000      	movs	r0, #0
 800645c:	f000 f808 	bl	8006470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006460:	f7fa fc10 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	40023c00 	.word	0x40023c00

08006470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006478:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <HAL_InitTick+0x54>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	4b12      	ldr	r3, [pc, #72]	; (80064c8 <HAL_InitTick+0x58>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	4619      	mov	r1, r3
 8006482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006486:	fbb3 f3f1 	udiv	r3, r3, r1
 800648a:	fbb2 f3f3 	udiv	r3, r2, r3
 800648e:	4618      	mov	r0, r3
 8006490:	f000 f999 	bl	80067c6 <HAL_SYSTICK_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e00e      	b.n	80064bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b0f      	cmp	r3, #15
 80064a2:	d80a      	bhi.n	80064ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064a4:	2200      	movs	r2, #0
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	f000 f953 	bl	8006756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064b0:	4a06      	ldr	r2, [pc, #24]	; (80064cc <HAL_InitTick+0x5c>)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e000      	b.n	80064bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20000000 	.word	0x20000000
 80064c8:	20000020 	.word	0x20000020
 80064cc:	2000001c 	.word	0x2000001c

080064d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064d4:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <HAL_IncTick+0x20>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <HAL_IncTick+0x24>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4413      	add	r3, r2
 80064e0:	4a04      	ldr	r2, [pc, #16]	; (80064f4 <HAL_IncTick+0x24>)
 80064e2:	6013      	str	r3, [r2, #0]
}
 80064e4:	bf00      	nop
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	20000020 	.word	0x20000020
 80064f4:	2000088c 	.word	0x2000088c

080064f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
  return uwTick;
 80064fc:	4b03      	ldr	r3, [pc, #12]	; (800650c <HAL_GetTick+0x14>)
 80064fe:	681b      	ldr	r3, [r3, #0]
}
 8006500:	4618      	mov	r0, r3
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	2000088c 	.word	0x2000088c

08006510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006518:	f7ff ffee 	bl	80064f8 <HAL_GetTick>
 800651c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d005      	beq.n	8006536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800652a:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <HAL_Delay+0x44>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4413      	add	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006536:	bf00      	nop
 8006538:	f7ff ffde 	bl	80064f8 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	429a      	cmp	r2, r3
 8006546:	d8f7      	bhi.n	8006538 <HAL_Delay+0x28>
  {
  }
}
 8006548:	bf00      	nop
 800654a:	bf00      	nop
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20000020 	.word	0x20000020

08006558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006568:	4b0c      	ldr	r3, [pc, #48]	; (800659c <__NVIC_SetPriorityGrouping+0x44>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006574:	4013      	ands	r3, r2
 8006576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800658a:	4a04      	ldr	r2, [pc, #16]	; (800659c <__NVIC_SetPriorityGrouping+0x44>)
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	60d3      	str	r3, [r2, #12]
}
 8006590:	bf00      	nop
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	e000ed00 	.word	0xe000ed00

080065a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065a0:	b480      	push	{r7}
 80065a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065a4:	4b04      	ldr	r3, [pc, #16]	; (80065b8 <__NVIC_GetPriorityGrouping+0x18>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	0a1b      	lsrs	r3, r3, #8
 80065aa:	f003 0307 	and.w	r3, r3, #7
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	e000ed00 	.word	0xe000ed00

080065bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	db0b      	blt.n	80065e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065ce:	79fb      	ldrb	r3, [r7, #7]
 80065d0:	f003 021f 	and.w	r2, r3, #31
 80065d4:	4907      	ldr	r1, [pc, #28]	; (80065f4 <__NVIC_EnableIRQ+0x38>)
 80065d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065da:	095b      	lsrs	r3, r3, #5
 80065dc:	2001      	movs	r0, #1
 80065de:	fa00 f202 	lsl.w	r2, r0, r2
 80065e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	e000e100 	.word	0xe000e100

080065f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	4603      	mov	r3, r0
 8006600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006606:	2b00      	cmp	r3, #0
 8006608:	db12      	blt.n	8006630 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	f003 021f 	and.w	r2, r3, #31
 8006610:	490a      	ldr	r1, [pc, #40]	; (800663c <__NVIC_DisableIRQ+0x44>)
 8006612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	2001      	movs	r0, #1
 800661a:	fa00 f202 	lsl.w	r2, r0, r2
 800661e:	3320      	adds	r3, #32
 8006620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006624:	f3bf 8f4f 	dsb	sy
}
 8006628:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800662a:	f3bf 8f6f 	isb	sy
}
 800662e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	e000e100 	.word	0xe000e100

08006640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	6039      	str	r1, [r7, #0]
 800664a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800664c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006650:	2b00      	cmp	r3, #0
 8006652:	db0a      	blt.n	800666a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	b2da      	uxtb	r2, r3
 8006658:	490c      	ldr	r1, [pc, #48]	; (800668c <__NVIC_SetPriority+0x4c>)
 800665a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800665e:	0112      	lsls	r2, r2, #4
 8006660:	b2d2      	uxtb	r2, r2
 8006662:	440b      	add	r3, r1
 8006664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006668:	e00a      	b.n	8006680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	b2da      	uxtb	r2, r3
 800666e:	4908      	ldr	r1, [pc, #32]	; (8006690 <__NVIC_SetPriority+0x50>)
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	f003 030f 	and.w	r3, r3, #15
 8006676:	3b04      	subs	r3, #4
 8006678:	0112      	lsls	r2, r2, #4
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	440b      	add	r3, r1
 800667e:	761a      	strb	r2, [r3, #24]
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	e000e100 	.word	0xe000e100
 8006690:	e000ed00 	.word	0xe000ed00

08006694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006694:	b480      	push	{r7}
 8006696:	b089      	sub	sp, #36	; 0x24
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	f1c3 0307 	rsb	r3, r3, #7
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	bf28      	it	cs
 80066b2:	2304      	movcs	r3, #4
 80066b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	3304      	adds	r3, #4
 80066ba:	2b06      	cmp	r3, #6
 80066bc:	d902      	bls.n	80066c4 <NVIC_EncodePriority+0x30>
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	3b03      	subs	r3, #3
 80066c2:	e000      	b.n	80066c6 <NVIC_EncodePriority+0x32>
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066c8:	f04f 32ff 	mov.w	r2, #4294967295
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	43da      	mvns	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	401a      	ands	r2, r3
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066dc:	f04f 31ff 	mov.w	r1, #4294967295
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	fa01 f303 	lsl.w	r3, r1, r3
 80066e6:	43d9      	mvns	r1, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066ec:	4313      	orrs	r3, r2
         );
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3724      	adds	r7, #36	; 0x24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
	...

080066fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3b01      	subs	r3, #1
 8006708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800670c:	d301      	bcc.n	8006712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800670e:	2301      	movs	r3, #1
 8006710:	e00f      	b.n	8006732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006712:	4a0a      	ldr	r2, [pc, #40]	; (800673c <SysTick_Config+0x40>)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3b01      	subs	r3, #1
 8006718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800671a:	210f      	movs	r1, #15
 800671c:	f04f 30ff 	mov.w	r0, #4294967295
 8006720:	f7ff ff8e 	bl	8006640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <SysTick_Config+0x40>)
 8006726:	2200      	movs	r2, #0
 8006728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800672a:	4b04      	ldr	r3, [pc, #16]	; (800673c <SysTick_Config+0x40>)
 800672c:	2207      	movs	r2, #7
 800672e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	e000e010 	.word	0xe000e010

08006740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7ff ff05 	bl	8006558 <__NVIC_SetPriorityGrouping>
}
 800674e:	bf00      	nop
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006756:	b580      	push	{r7, lr}
 8006758:	b086      	sub	sp, #24
 800675a:	af00      	add	r7, sp, #0
 800675c:	4603      	mov	r3, r0
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	607a      	str	r2, [r7, #4]
 8006762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006764:	2300      	movs	r3, #0
 8006766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006768:	f7ff ff1a 	bl	80065a0 <__NVIC_GetPriorityGrouping>
 800676c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	68b9      	ldr	r1, [r7, #8]
 8006772:	6978      	ldr	r0, [r7, #20]
 8006774:	f7ff ff8e 	bl	8006694 <NVIC_EncodePriority>
 8006778:	4602      	mov	r2, r0
 800677a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800677e:	4611      	mov	r1, r2
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff ff5d 	bl	8006640 <__NVIC_SetPriority>
}
 8006786:	bf00      	nop
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	4603      	mov	r3, r0
 8006796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff ff0d 	bl	80065bc <__NVIC_EnableIRQ>
}
 80067a2:	bf00      	nop
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b082      	sub	sp, #8
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	4603      	mov	r3, r0
 80067b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80067b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff ff1d 	bl	80065f8 <__NVIC_DisableIRQ>
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7ff ff94 	bl	80066fc <SysTick_Config>
 80067d4:	4603      	mov	r3, r0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80067ec:	f7ff fe84 	bl	80064f8 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e099      	b.n	8006930 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0201 	bic.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800681c:	e00f      	b.n	800683e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800681e:	f7ff fe6b 	bl	80064f8 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	2b05      	cmp	r3, #5
 800682a:	d908      	bls.n	800683e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2220      	movs	r2, #32
 8006830:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2203      	movs	r2, #3
 8006836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e078      	b.n	8006930 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e8      	bne.n	800681e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4b38      	ldr	r3, [pc, #224]	; (8006938 <HAL_DMA_Init+0x158>)
 8006858:	4013      	ands	r3, r2
 800685a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800686a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006876:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006882:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	2b04      	cmp	r3, #4
 8006896:	d107      	bne.n	80068a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a0:	4313      	orrs	r3, r2
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f023 0307 	bic.w	r3, r3, #7
 80068be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d117      	bne.n	8006902 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00e      	beq.n	8006902 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fb6b 	bl	8006fc0 <DMA_CheckFifoParam>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d008      	beq.n	8006902 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2240      	movs	r2, #64	; 0x40
 80068f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80068fe:	2301      	movs	r3, #1
 8006900:	e016      	b.n	8006930 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fb22 	bl	8006f54 <DMA_CalcBaseAndBitshift>
 8006910:	4603      	mov	r3, r0
 8006912:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006918:	223f      	movs	r2, #63	; 0x3f
 800691a:	409a      	lsls	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	f010803f 	.word	0xf010803f

0800693c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e050      	b.n	80069f0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d101      	bne.n	800695e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800695a:	2302      	movs	r3, #2
 800695c:	e048      	b.n	80069f0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f022 0201 	bic.w	r2, r2, #1
 800696c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2200      	movs	r2, #0
 800697c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2200      	movs	r2, #0
 8006984:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2200      	movs	r2, #0
 800698c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2200      	movs	r2, #0
 8006994:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2221      	movs	r2, #33	; 0x21
 800699c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fad8 	bl	8006f54 <DMA_CalcBaseAndBitshift>
 80069a4:	4603      	mov	r3, r0
 80069a6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d0:	223f      	movs	r2, #63	; 0x3f
 80069d2:	409a      	lsls	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d101      	bne.n	8006a1e <HAL_DMA_Start_IT+0x26>
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	e040      	b.n	8006aa0 <HAL_DMA_Start_IT+0xa8>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d12f      	bne.n	8006a92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2202      	movs	r2, #2
 8006a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	68b9      	ldr	r1, [r7, #8]
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 fa56 	bl	8006ef8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a50:	223f      	movs	r2, #63	; 0x3f
 8006a52:	409a      	lsls	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0216 	orr.w	r2, r2, #22
 8006a66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d007      	beq.n	8006a80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0208 	orr.w	r2, r2, #8
 8006a7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0201 	orr.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	e005      	b.n	8006a9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006ab6:	f7ff fd1f 	bl	80064f8 <HAL_GetTick>
 8006aba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d008      	beq.n	8006ada <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2280      	movs	r2, #128	; 0x80
 8006acc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e052      	b.n	8006b80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0216 	bic.w	r2, r2, #22
 8006ae8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	695a      	ldr	r2, [r3, #20]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006af8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d103      	bne.n	8006b0a <HAL_DMA_Abort+0x62>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d007      	beq.n	8006b1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 0208 	bic.w	r2, r2, #8
 8006b18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0201 	bic.w	r2, r2, #1
 8006b28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b2a:	e013      	b.n	8006b54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b2c:	f7ff fce4 	bl	80064f8 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b05      	cmp	r3, #5
 8006b38:	d90c      	bls.n	8006b54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2203      	movs	r2, #3
 8006b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e015      	b.n	8006b80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e4      	bne.n	8006b2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b66:	223f      	movs	r2, #63	; 0x3f
 8006b68:	409a      	lsls	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d004      	beq.n	8006ba6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2280      	movs	r2, #128	; 0x80
 8006ba0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e00c      	b.n	8006bc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2205      	movs	r2, #5
 8006baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0201 	bic.w	r2, r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006bd8:	4b92      	ldr	r3, [pc, #584]	; (8006e24 <HAL_DMA_IRQHandler+0x258>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a92      	ldr	r2, [pc, #584]	; (8006e28 <HAL_DMA_IRQHandler+0x25c>)
 8006bde:	fba2 2303 	umull	r2, r3, r2, r3
 8006be2:	0a9b      	lsrs	r3, r3, #10
 8006be4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf6:	2208      	movs	r2, #8
 8006bf8:	409a      	lsls	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d01a      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d013      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0204 	bic.w	r2, r2, #4
 8006c1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c24:	2208      	movs	r2, #8
 8006c26:	409a      	lsls	r2, r3
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c30:	f043 0201 	orr.w	r2, r3, #1
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	409a      	lsls	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4013      	ands	r3, r2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d012      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00b      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	409a      	lsls	r2, r3
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c66:	f043 0202 	orr.w	r2, r3, #2
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c72:	2204      	movs	r2, #4
 8006c74:	409a      	lsls	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d012      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0302 	and.w	r3, r3, #2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c90:	2204      	movs	r2, #4
 8006c92:	409a      	lsls	r2, r3
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9c:	f043 0204 	orr.w	r2, r3, #4
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca8:	2210      	movs	r2, #16
 8006caa:	409a      	lsls	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4013      	ands	r3, r2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d043      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0308 	and.w	r3, r3, #8
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d03c      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc6:	2210      	movs	r2, #16
 8006cc8:	409a      	lsls	r2, r3
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d018      	beq.n	8006d0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d108      	bne.n	8006cfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d024      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	4798      	blx	r3
 8006cfa:	e01f      	b.n	8006d3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d01b      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	4798      	blx	r3
 8006d0c:	e016      	b.n	8006d3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d107      	bne.n	8006d2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0208 	bic.w	r2, r2, #8
 8006d2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d40:	2220      	movs	r2, #32
 8006d42:	409a      	lsls	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4013      	ands	r3, r2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 808e 	beq.w	8006e6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0310 	and.w	r3, r3, #16
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 8086 	beq.w	8006e6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d62:	2220      	movs	r2, #32
 8006d64:	409a      	lsls	r2, r3
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b05      	cmp	r3, #5
 8006d74:	d136      	bne.n	8006de4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0216 	bic.w	r2, r2, #22
 8006d84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	695a      	ldr	r2, [r3, #20]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d103      	bne.n	8006da6 <HAL_DMA_IRQHandler+0x1da>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d007      	beq.n	8006db6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0208 	bic.w	r2, r2, #8
 8006db4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dba:	223f      	movs	r2, #63	; 0x3f
 8006dbc:	409a      	lsls	r2, r3
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d07d      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	4798      	blx	r3
        }
        return;
 8006de2:	e078      	b.n	8006ed6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d01c      	beq.n	8006e2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d108      	bne.n	8006e12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d030      	beq.n	8006e6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	4798      	blx	r3
 8006e10:	e02b      	b.n	8006e6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d027      	beq.n	8006e6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
 8006e22:	e022      	b.n	8006e6a <HAL_DMA_IRQHandler+0x29e>
 8006e24:	20000000 	.word	0x20000000
 8006e28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10f      	bne.n	8006e5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0210 	bic.w	r2, r2, #16
 8006e48:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d032      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d022      	beq.n	8006ec4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2205      	movs	r2, #5
 8006e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 0201 	bic.w	r2, r2, #1
 8006e94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	60bb      	str	r3, [r7, #8]
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d307      	bcc.n	8006eb2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1f2      	bne.n	8006e96 <HAL_DMA_IRQHandler+0x2ca>
 8006eb0:	e000      	b.n	8006eb4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006eb2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	4798      	blx	r3
 8006ed4:	e000      	b.n	8006ed8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006ed6:	bf00      	nop
    }
  }
}
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop

08006ee0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
 8006f04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	2b40      	cmp	r3, #64	; 0x40
 8006f24:	d108      	bne.n	8006f38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006f36:	e007      	b.n	8006f48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	60da      	str	r2, [r3, #12]
}
 8006f48:	bf00      	nop
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	3b10      	subs	r3, #16
 8006f64:	4a14      	ldr	r2, [pc, #80]	; (8006fb8 <DMA_CalcBaseAndBitshift+0x64>)
 8006f66:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6a:	091b      	lsrs	r3, r3, #4
 8006f6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006f6e:	4a13      	ldr	r2, [pc, #76]	; (8006fbc <DMA_CalcBaseAndBitshift+0x68>)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4413      	add	r3, r2
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d909      	bls.n	8006f96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006f8a:	f023 0303 	bic.w	r3, r3, #3
 8006f8e:	1d1a      	adds	r2, r3, #4
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	659a      	str	r2, [r3, #88]	; 0x58
 8006f94:	e007      	b.n	8006fa6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006f9e:	f023 0303 	bic.w	r3, r3, #3
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	aaaaaaab 	.word	0xaaaaaaab
 8006fbc:	0800c5b4 	.word	0x0800c5b4

08006fc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d11f      	bne.n	800701a <DMA_CheckFifoParam+0x5a>
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d856      	bhi.n	800708e <DMA_CheckFifoParam+0xce>
 8006fe0:	a201      	add	r2, pc, #4	; (adr r2, 8006fe8 <DMA_CheckFifoParam+0x28>)
 8006fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe6:	bf00      	nop
 8006fe8:	08006ff9 	.word	0x08006ff9
 8006fec:	0800700b 	.word	0x0800700b
 8006ff0:	08006ff9 	.word	0x08006ff9
 8006ff4:	0800708f 	.word	0x0800708f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d046      	beq.n	8007092 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007008:	e043      	b.n	8007092 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007012:	d140      	bne.n	8007096 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007018:	e03d      	b.n	8007096 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007022:	d121      	bne.n	8007068 <DMA_CheckFifoParam+0xa8>
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b03      	cmp	r3, #3
 8007028:	d837      	bhi.n	800709a <DMA_CheckFifoParam+0xda>
 800702a:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <DMA_CheckFifoParam+0x70>)
 800702c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007030:	08007041 	.word	0x08007041
 8007034:	08007047 	.word	0x08007047
 8007038:	08007041 	.word	0x08007041
 800703c:	08007059 	.word	0x08007059
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	73fb      	strb	r3, [r7, #15]
      break;
 8007044:	e030      	b.n	80070a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d025      	beq.n	800709e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007056:	e022      	b.n	800709e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007060:	d11f      	bne.n	80070a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007066:	e01c      	b.n	80070a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d903      	bls.n	8007076 <DMA_CheckFifoParam+0xb6>
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b03      	cmp	r3, #3
 8007072:	d003      	beq.n	800707c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007074:	e018      	b.n	80070a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	73fb      	strb	r3, [r7, #15]
      break;
 800707a:	e015      	b.n	80070a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00e      	beq.n	80070a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	73fb      	strb	r3, [r7, #15]
      break;
 800708c:	e00b      	b.n	80070a6 <DMA_CheckFifoParam+0xe6>
      break;
 800708e:	bf00      	nop
 8007090:	e00a      	b.n	80070a8 <DMA_CheckFifoParam+0xe8>
      break;
 8007092:	bf00      	nop
 8007094:	e008      	b.n	80070a8 <DMA_CheckFifoParam+0xe8>
      break;
 8007096:	bf00      	nop
 8007098:	e006      	b.n	80070a8 <DMA_CheckFifoParam+0xe8>
      break;
 800709a:	bf00      	nop
 800709c:	e004      	b.n	80070a8 <DMA_CheckFifoParam+0xe8>
      break;
 800709e:	bf00      	nop
 80070a0:	e002      	b.n	80070a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80070a2:	bf00      	nop
 80070a4:	e000      	b.n	80070a8 <DMA_CheckFifoParam+0xe8>
      break;
 80070a6:	bf00      	nop
    }
  } 
  
  return status; 
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop

080070b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b089      	sub	sp, #36	; 0x24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070ce:	2300      	movs	r3, #0
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	e159      	b.n	8007388 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80070d4:	2201      	movs	r2, #1
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	fa02 f303 	lsl.w	r3, r2, r3
 80070dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	4013      	ands	r3, r2
 80070e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	f040 8148 	bne.w	8007382 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d005      	beq.n	800710a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007106:	2b02      	cmp	r3, #2
 8007108:	d130      	bne.n	800716c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	2203      	movs	r2, #3
 8007116:	fa02 f303 	lsl.w	r3, r2, r3
 800711a:	43db      	mvns	r3, r3
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	4013      	ands	r3, r2
 8007120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68da      	ldr	r2, [r3, #12]
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	fa02 f303 	lsl.w	r3, r2, r3
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	4313      	orrs	r3, r2
 8007132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007140:	2201      	movs	r2, #1
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	fa02 f303 	lsl.w	r3, r2, r3
 8007148:	43db      	mvns	r3, r3
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	4013      	ands	r3, r2
 800714e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	091b      	lsrs	r3, r3, #4
 8007156:	f003 0201 	and.w	r2, r3, #1
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	fa02 f303 	lsl.w	r3, r2, r3
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	4313      	orrs	r3, r2
 8007164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f003 0303 	and.w	r3, r3, #3
 8007174:	2b03      	cmp	r3, #3
 8007176:	d017      	beq.n	80071a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	2203      	movs	r2, #3
 8007184:	fa02 f303 	lsl.w	r3, r2, r3
 8007188:	43db      	mvns	r3, r3
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	4013      	ands	r3, r2
 800718e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	005b      	lsls	r3, r3, #1
 8007198:	fa02 f303 	lsl.w	r3, r2, r3
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	4313      	orrs	r3, r2
 80071a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f003 0303 	and.w	r3, r3, #3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d123      	bne.n	80071fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	08da      	lsrs	r2, r3, #3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3208      	adds	r2, #8
 80071bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	f003 0307 	and.w	r3, r3, #7
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	220f      	movs	r2, #15
 80071cc:	fa02 f303 	lsl.w	r3, r2, r3
 80071d0:	43db      	mvns	r3, r3
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	4013      	ands	r3, r2
 80071d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	691a      	ldr	r2, [r3, #16]
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	fa02 f303 	lsl.w	r3, r2, r3
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	08da      	lsrs	r2, r3, #3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3208      	adds	r2, #8
 80071f6:	69b9      	ldr	r1, [r7, #24]
 80071f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	2203      	movs	r2, #3
 8007208:	fa02 f303 	lsl.w	r3, r2, r3
 800720c:	43db      	mvns	r3, r3
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	4013      	ands	r3, r2
 8007212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f003 0203 	and.w	r2, r3, #3
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	005b      	lsls	r3, r3, #1
 8007220:	fa02 f303 	lsl.w	r3, r2, r3
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	4313      	orrs	r3, r2
 8007228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 80a2 	beq.w	8007382 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800723e:	2300      	movs	r3, #0
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	4b57      	ldr	r3, [pc, #348]	; (80073a0 <HAL_GPIO_Init+0x2e8>)
 8007244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007246:	4a56      	ldr	r2, [pc, #344]	; (80073a0 <HAL_GPIO_Init+0x2e8>)
 8007248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800724c:	6453      	str	r3, [r2, #68]	; 0x44
 800724e:	4b54      	ldr	r3, [pc, #336]	; (80073a0 <HAL_GPIO_Init+0x2e8>)
 8007250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800725a:	4a52      	ldr	r2, [pc, #328]	; (80073a4 <HAL_GPIO_Init+0x2ec>)
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	089b      	lsrs	r3, r3, #2
 8007260:	3302      	adds	r3, #2
 8007262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	220f      	movs	r2, #15
 8007272:	fa02 f303 	lsl.w	r3, r2, r3
 8007276:	43db      	mvns	r3, r3
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	4013      	ands	r3, r2
 800727c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a49      	ldr	r2, [pc, #292]	; (80073a8 <HAL_GPIO_Init+0x2f0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d019      	beq.n	80072ba <HAL_GPIO_Init+0x202>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a48      	ldr	r2, [pc, #288]	; (80073ac <HAL_GPIO_Init+0x2f4>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <HAL_GPIO_Init+0x1fe>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a47      	ldr	r2, [pc, #284]	; (80073b0 <HAL_GPIO_Init+0x2f8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00d      	beq.n	80072b2 <HAL_GPIO_Init+0x1fa>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a46      	ldr	r2, [pc, #280]	; (80073b4 <HAL_GPIO_Init+0x2fc>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d007      	beq.n	80072ae <HAL_GPIO_Init+0x1f6>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a45      	ldr	r2, [pc, #276]	; (80073b8 <HAL_GPIO_Init+0x300>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d101      	bne.n	80072aa <HAL_GPIO_Init+0x1f2>
 80072a6:	2304      	movs	r3, #4
 80072a8:	e008      	b.n	80072bc <HAL_GPIO_Init+0x204>
 80072aa:	2307      	movs	r3, #7
 80072ac:	e006      	b.n	80072bc <HAL_GPIO_Init+0x204>
 80072ae:	2303      	movs	r3, #3
 80072b0:	e004      	b.n	80072bc <HAL_GPIO_Init+0x204>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e002      	b.n	80072bc <HAL_GPIO_Init+0x204>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <HAL_GPIO_Init+0x204>
 80072ba:	2300      	movs	r3, #0
 80072bc:	69fa      	ldr	r2, [r7, #28]
 80072be:	f002 0203 	and.w	r2, r2, #3
 80072c2:	0092      	lsls	r2, r2, #2
 80072c4:	4093      	lsls	r3, r2
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80072cc:	4935      	ldr	r1, [pc, #212]	; (80073a4 <HAL_GPIO_Init+0x2ec>)
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	089b      	lsrs	r3, r3, #2
 80072d2:	3302      	adds	r3, #2
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80072da:	4b38      	ldr	r3, [pc, #224]	; (80073bc <HAL_GPIO_Init+0x304>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	43db      	mvns	r3, r3
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	4013      	ands	r3, r2
 80072e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80072f6:	69ba      	ldr	r2, [r7, #24]
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80072fe:	4a2f      	ldr	r2, [pc, #188]	; (80073bc <HAL_GPIO_Init+0x304>)
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007304:	4b2d      	ldr	r3, [pc, #180]	; (80073bc <HAL_GPIO_Init+0x304>)
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	43db      	mvns	r3, r3
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	4013      	ands	r3, r2
 8007312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007328:	4a24      	ldr	r2, [pc, #144]	; (80073bc <HAL_GPIO_Init+0x304>)
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800732e:	4b23      	ldr	r3, [pc, #140]	; (80073bc <HAL_GPIO_Init+0x304>)
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	43db      	mvns	r3, r3
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	4013      	ands	r3, r2
 800733c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800734a:	69ba      	ldr	r2, [r7, #24]
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	4313      	orrs	r3, r2
 8007350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007352:	4a1a      	ldr	r2, [pc, #104]	; (80073bc <HAL_GPIO_Init+0x304>)
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007358:	4b18      	ldr	r3, [pc, #96]	; (80073bc <HAL_GPIO_Init+0x304>)
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	43db      	mvns	r3, r3
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	4013      	ands	r3, r2
 8007366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d003      	beq.n	800737c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	4313      	orrs	r3, r2
 800737a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800737c:	4a0f      	ldr	r2, [pc, #60]	; (80073bc <HAL_GPIO_Init+0x304>)
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	3301      	adds	r3, #1
 8007386:	61fb      	str	r3, [r7, #28]
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	2b0f      	cmp	r3, #15
 800738c:	f67f aea2 	bls.w	80070d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	3724      	adds	r7, #36	; 0x24
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	40023800 	.word	0x40023800
 80073a4:	40013800 	.word	0x40013800
 80073a8:	40020000 	.word	0x40020000
 80073ac:	40020400 	.word	0x40020400
 80073b0:	40020800 	.word	0x40020800
 80073b4:	40020c00 	.word	0x40020c00
 80073b8:	40021000 	.word	0x40021000
 80073bc:	40013c00 	.word	0x40013c00

080073c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80073ca:	2300      	movs	r3, #0
 80073cc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80073d6:	2300      	movs	r3, #0
 80073d8:	617b      	str	r3, [r7, #20]
 80073da:	e0bb      	b.n	8007554 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80073dc:	2201      	movs	r2, #1
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	fa02 f303 	lsl.w	r3, r2, r3
 80073e4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	4013      	ands	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	f040 80ab 	bne.w	800754e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80073f8:	4a5c      	ldr	r2, [pc, #368]	; (800756c <HAL_GPIO_DeInit+0x1ac>)
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	089b      	lsrs	r3, r3, #2
 80073fe:	3302      	adds	r3, #2
 8007400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007404:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f003 0303 	and.w	r3, r3, #3
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	220f      	movs	r2, #15
 8007410:	fa02 f303 	lsl.w	r3, r2, r3
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	4013      	ands	r3, r2
 8007418:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a54      	ldr	r2, [pc, #336]	; (8007570 <HAL_GPIO_DeInit+0x1b0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d019      	beq.n	8007456 <HAL_GPIO_DeInit+0x96>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a53      	ldr	r2, [pc, #332]	; (8007574 <HAL_GPIO_DeInit+0x1b4>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d013      	beq.n	8007452 <HAL_GPIO_DeInit+0x92>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a52      	ldr	r2, [pc, #328]	; (8007578 <HAL_GPIO_DeInit+0x1b8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d00d      	beq.n	800744e <HAL_GPIO_DeInit+0x8e>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a51      	ldr	r2, [pc, #324]	; (800757c <HAL_GPIO_DeInit+0x1bc>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d007      	beq.n	800744a <HAL_GPIO_DeInit+0x8a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a50      	ldr	r2, [pc, #320]	; (8007580 <HAL_GPIO_DeInit+0x1c0>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d101      	bne.n	8007446 <HAL_GPIO_DeInit+0x86>
 8007442:	2304      	movs	r3, #4
 8007444:	e008      	b.n	8007458 <HAL_GPIO_DeInit+0x98>
 8007446:	2307      	movs	r3, #7
 8007448:	e006      	b.n	8007458 <HAL_GPIO_DeInit+0x98>
 800744a:	2303      	movs	r3, #3
 800744c:	e004      	b.n	8007458 <HAL_GPIO_DeInit+0x98>
 800744e:	2302      	movs	r3, #2
 8007450:	e002      	b.n	8007458 <HAL_GPIO_DeInit+0x98>
 8007452:	2301      	movs	r3, #1
 8007454:	e000      	b.n	8007458 <HAL_GPIO_DeInit+0x98>
 8007456:	2300      	movs	r3, #0
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	f002 0203 	and.w	r2, r2, #3
 800745e:	0092      	lsls	r2, r2, #2
 8007460:	4093      	lsls	r3, r2
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	429a      	cmp	r2, r3
 8007466:	d132      	bne.n	80074ce <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007468:	4b46      	ldr	r3, [pc, #280]	; (8007584 <HAL_GPIO_DeInit+0x1c4>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	43db      	mvns	r3, r3
 8007470:	4944      	ldr	r1, [pc, #272]	; (8007584 <HAL_GPIO_DeInit+0x1c4>)
 8007472:	4013      	ands	r3, r2
 8007474:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007476:	4b43      	ldr	r3, [pc, #268]	; (8007584 <HAL_GPIO_DeInit+0x1c4>)
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	43db      	mvns	r3, r3
 800747e:	4941      	ldr	r1, [pc, #260]	; (8007584 <HAL_GPIO_DeInit+0x1c4>)
 8007480:	4013      	ands	r3, r2
 8007482:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007484:	4b3f      	ldr	r3, [pc, #252]	; (8007584 <HAL_GPIO_DeInit+0x1c4>)
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	43db      	mvns	r3, r3
 800748c:	493d      	ldr	r1, [pc, #244]	; (8007584 <HAL_GPIO_DeInit+0x1c4>)
 800748e:	4013      	ands	r3, r2
 8007490:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007492:	4b3c      	ldr	r3, [pc, #240]	; (8007584 <HAL_GPIO_DeInit+0x1c4>)
 8007494:	68da      	ldr	r2, [r3, #12]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	43db      	mvns	r3, r3
 800749a:	493a      	ldr	r1, [pc, #232]	; (8007584 <HAL_GPIO_DeInit+0x1c4>)
 800749c:	4013      	ands	r3, r2
 800749e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	220f      	movs	r2, #15
 80074aa:	fa02 f303 	lsl.w	r3, r2, r3
 80074ae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80074b0:	4a2e      	ldr	r2, [pc, #184]	; (800756c <HAL_GPIO_DeInit+0x1ac>)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	089b      	lsrs	r3, r3, #2
 80074b6:	3302      	adds	r3, #2
 80074b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	43da      	mvns	r2, r3
 80074c0:	482a      	ldr	r0, [pc, #168]	; (800756c <HAL_GPIO_DeInit+0x1ac>)
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	089b      	lsrs	r3, r3, #2
 80074c6:	400a      	ands	r2, r1
 80074c8:	3302      	adds	r3, #2
 80074ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	2103      	movs	r1, #3
 80074d8:	fa01 f303 	lsl.w	r3, r1, r3
 80074dc:	43db      	mvns	r3, r3
 80074de:	401a      	ands	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	08da      	lsrs	r2, r3, #3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3208      	adds	r2, #8
 80074ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	220f      	movs	r2, #15
 80074fa:	fa02 f303 	lsl.w	r3, r2, r3
 80074fe:	43db      	mvns	r3, r3
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	08d2      	lsrs	r2, r2, #3
 8007504:	4019      	ands	r1, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3208      	adds	r2, #8
 800750a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	2103      	movs	r1, #3
 8007518:	fa01 f303 	lsl.w	r3, r1, r3
 800751c:	43db      	mvns	r3, r3
 800751e:	401a      	ands	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	2101      	movs	r1, #1
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	fa01 f303 	lsl.w	r3, r1, r3
 8007530:	43db      	mvns	r3, r3
 8007532:	401a      	ands	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	2103      	movs	r1, #3
 8007542:	fa01 f303 	lsl.w	r3, r1, r3
 8007546:	43db      	mvns	r3, r3
 8007548:	401a      	ands	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	3301      	adds	r3, #1
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2b0f      	cmp	r3, #15
 8007558:	f67f af40 	bls.w	80073dc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800755c:	bf00      	nop
 800755e:	bf00      	nop
 8007560:	371c      	adds	r7, #28
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40013800 	.word	0x40013800
 8007570:	40020000 	.word	0x40020000
 8007574:	40020400 	.word	0x40020400
 8007578:	40020800 	.word	0x40020800
 800757c:	40020c00 	.word	0x40020c00
 8007580:	40021000 	.word	0x40021000
 8007584:	40013c00 	.word	0x40013c00

08007588 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	691a      	ldr	r2, [r3, #16]
 8007598:	887b      	ldrh	r3, [r7, #2]
 800759a:	4013      	ands	r3, r2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075a0:	2301      	movs	r3, #1
 80075a2:	73fb      	strb	r3, [r7, #15]
 80075a4:	e001      	b.n	80075aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	807b      	strh	r3, [r7, #2]
 80075c4:	4613      	mov	r3, r2
 80075c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075c8:	787b      	ldrb	r3, [r7, #1]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075ce:	887a      	ldrh	r2, [r7, #2]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80075d4:	e003      	b.n	80075de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80075d6:	887b      	ldrh	r3, [r7, #2]
 80075d8:	041a      	lsls	r2, r3, #16
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	619a      	str	r2, [r3, #24]
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
	...

080075ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e264      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d075      	beq.n	80076f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800760a:	4ba3      	ldr	r3, [pc, #652]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f003 030c 	and.w	r3, r3, #12
 8007612:	2b04      	cmp	r3, #4
 8007614:	d00c      	beq.n	8007630 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007616:	4ba0      	ldr	r3, [pc, #640]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800761e:	2b08      	cmp	r3, #8
 8007620:	d112      	bne.n	8007648 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007622:	4b9d      	ldr	r3, [pc, #628]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800762a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800762e:	d10b      	bne.n	8007648 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007630:	4b99      	ldr	r3, [pc, #612]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d05b      	beq.n	80076f4 <HAL_RCC_OscConfig+0x108>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d157      	bne.n	80076f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e23f      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007650:	d106      	bne.n	8007660 <HAL_RCC_OscConfig+0x74>
 8007652:	4b91      	ldr	r3, [pc, #580]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a90      	ldr	r2, [pc, #576]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800765c:	6013      	str	r3, [r2, #0]
 800765e:	e01d      	b.n	800769c <HAL_RCC_OscConfig+0xb0>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007668:	d10c      	bne.n	8007684 <HAL_RCC_OscConfig+0x98>
 800766a:	4b8b      	ldr	r3, [pc, #556]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a8a      	ldr	r2, [pc, #552]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007674:	6013      	str	r3, [r2, #0]
 8007676:	4b88      	ldr	r3, [pc, #544]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a87      	ldr	r2, [pc, #540]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800767c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	e00b      	b.n	800769c <HAL_RCC_OscConfig+0xb0>
 8007684:	4b84      	ldr	r3, [pc, #528]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a83      	ldr	r2, [pc, #524]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800768a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	4b81      	ldr	r3, [pc, #516]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a80      	ldr	r2, [pc, #512]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800769a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d013      	beq.n	80076cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a4:	f7fe ff28 	bl	80064f8 <HAL_GetTick>
 80076a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076aa:	e008      	b.n	80076be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076ac:	f7fe ff24 	bl	80064f8 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b64      	cmp	r3, #100	; 0x64
 80076b8:	d901      	bls.n	80076be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e204      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076be:	4b76      	ldr	r3, [pc, #472]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d0f0      	beq.n	80076ac <HAL_RCC_OscConfig+0xc0>
 80076ca:	e014      	b.n	80076f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076cc:	f7fe ff14 	bl	80064f8 <HAL_GetTick>
 80076d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076d2:	e008      	b.n	80076e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076d4:	f7fe ff10 	bl	80064f8 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	2b64      	cmp	r3, #100	; 0x64
 80076e0:	d901      	bls.n	80076e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e1f0      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076e6:	4b6c      	ldr	r3, [pc, #432]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1f0      	bne.n	80076d4 <HAL_RCC_OscConfig+0xe8>
 80076f2:	e000      	b.n	80076f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d063      	beq.n	80077ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007702:	4b65      	ldr	r3, [pc, #404]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f003 030c 	and.w	r3, r3, #12
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00b      	beq.n	8007726 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800770e:	4b62      	ldr	r3, [pc, #392]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007716:	2b08      	cmp	r3, #8
 8007718:	d11c      	bne.n	8007754 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800771a:	4b5f      	ldr	r3, [pc, #380]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d116      	bne.n	8007754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007726:	4b5c      	ldr	r3, [pc, #368]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	2b00      	cmp	r3, #0
 8007730:	d005      	beq.n	800773e <HAL_RCC_OscConfig+0x152>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d001      	beq.n	800773e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e1c4      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800773e:	4b56      	ldr	r3, [pc, #344]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	4952      	ldr	r1, [pc, #328]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800774e:	4313      	orrs	r3, r2
 8007750:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007752:	e03a      	b.n	80077ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d020      	beq.n	800779e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800775c:	4b4f      	ldr	r3, [pc, #316]	; (800789c <HAL_RCC_OscConfig+0x2b0>)
 800775e:	2201      	movs	r2, #1
 8007760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007762:	f7fe fec9 	bl	80064f8 <HAL_GetTick>
 8007766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007768:	e008      	b.n	800777c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800776a:	f7fe fec5 	bl	80064f8 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	2b02      	cmp	r3, #2
 8007776:	d901      	bls.n	800777c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e1a5      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800777c:	4b46      	ldr	r3, [pc, #280]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0302 	and.w	r3, r3, #2
 8007784:	2b00      	cmp	r3, #0
 8007786:	d0f0      	beq.n	800776a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007788:	4b43      	ldr	r3, [pc, #268]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	4940      	ldr	r1, [pc, #256]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007798:	4313      	orrs	r3, r2
 800779a:	600b      	str	r3, [r1, #0]
 800779c:	e015      	b.n	80077ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800779e:	4b3f      	ldr	r3, [pc, #252]	; (800789c <HAL_RCC_OscConfig+0x2b0>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a4:	f7fe fea8 	bl	80064f8 <HAL_GetTick>
 80077a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077aa:	e008      	b.n	80077be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077ac:	f7fe fea4 	bl	80064f8 <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d901      	bls.n	80077be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e184      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077be:	4b36      	ldr	r3, [pc, #216]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1f0      	bne.n	80077ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0308 	and.w	r3, r3, #8
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d030      	beq.n	8007838 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d016      	beq.n	800780c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077de:	4b30      	ldr	r3, [pc, #192]	; (80078a0 <HAL_RCC_OscConfig+0x2b4>)
 80077e0:	2201      	movs	r2, #1
 80077e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077e4:	f7fe fe88 	bl	80064f8 <HAL_GetTick>
 80077e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077ea:	e008      	b.n	80077fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077ec:	f7fe fe84 	bl	80064f8 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d901      	bls.n	80077fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e164      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077fe:	4b26      	ldr	r3, [pc, #152]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d0f0      	beq.n	80077ec <HAL_RCC_OscConfig+0x200>
 800780a:	e015      	b.n	8007838 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800780c:	4b24      	ldr	r3, [pc, #144]	; (80078a0 <HAL_RCC_OscConfig+0x2b4>)
 800780e:	2200      	movs	r2, #0
 8007810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007812:	f7fe fe71 	bl	80064f8 <HAL_GetTick>
 8007816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007818:	e008      	b.n	800782c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800781a:	f7fe fe6d 	bl	80064f8 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	2b02      	cmp	r3, #2
 8007826:	d901      	bls.n	800782c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e14d      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800782c:	4b1a      	ldr	r3, [pc, #104]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800782e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1f0      	bne.n	800781a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 80a0 	beq.w	8007986 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007846:	2300      	movs	r3, #0
 8007848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800784a:	4b13      	ldr	r3, [pc, #76]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800784c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10f      	bne.n	8007876 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007856:	2300      	movs	r3, #0
 8007858:	60bb      	str	r3, [r7, #8]
 800785a:	4b0f      	ldr	r3, [pc, #60]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	4a0e      	ldr	r2, [pc, #56]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007864:	6413      	str	r3, [r2, #64]	; 0x40
 8007866:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800786e:	60bb      	str	r3, [r7, #8]
 8007870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007872:	2301      	movs	r3, #1
 8007874:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007876:	4b0b      	ldr	r3, [pc, #44]	; (80078a4 <HAL_RCC_OscConfig+0x2b8>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787e:	2b00      	cmp	r3, #0
 8007880:	d121      	bne.n	80078c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007882:	4b08      	ldr	r3, [pc, #32]	; (80078a4 <HAL_RCC_OscConfig+0x2b8>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a07      	ldr	r2, [pc, #28]	; (80078a4 <HAL_RCC_OscConfig+0x2b8>)
 8007888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800788c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800788e:	f7fe fe33 	bl	80064f8 <HAL_GetTick>
 8007892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007894:	e011      	b.n	80078ba <HAL_RCC_OscConfig+0x2ce>
 8007896:	bf00      	nop
 8007898:	40023800 	.word	0x40023800
 800789c:	42470000 	.word	0x42470000
 80078a0:	42470e80 	.word	0x42470e80
 80078a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078a8:	f7fe fe26 	bl	80064f8 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d901      	bls.n	80078ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e106      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ba:	4b85      	ldr	r3, [pc, #532]	; (8007ad0 <HAL_RCC_OscConfig+0x4e4>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0f0      	beq.n	80078a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d106      	bne.n	80078dc <HAL_RCC_OscConfig+0x2f0>
 80078ce:	4b81      	ldr	r3, [pc, #516]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 80078d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d2:	4a80      	ldr	r2, [pc, #512]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 80078d4:	f043 0301 	orr.w	r3, r3, #1
 80078d8:	6713      	str	r3, [r2, #112]	; 0x70
 80078da:	e01c      	b.n	8007916 <HAL_RCC_OscConfig+0x32a>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	2b05      	cmp	r3, #5
 80078e2:	d10c      	bne.n	80078fe <HAL_RCC_OscConfig+0x312>
 80078e4:	4b7b      	ldr	r3, [pc, #492]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 80078e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e8:	4a7a      	ldr	r2, [pc, #488]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 80078ea:	f043 0304 	orr.w	r3, r3, #4
 80078ee:	6713      	str	r3, [r2, #112]	; 0x70
 80078f0:	4b78      	ldr	r3, [pc, #480]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 80078f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f4:	4a77      	ldr	r2, [pc, #476]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 80078f6:	f043 0301 	orr.w	r3, r3, #1
 80078fa:	6713      	str	r3, [r2, #112]	; 0x70
 80078fc:	e00b      	b.n	8007916 <HAL_RCC_OscConfig+0x32a>
 80078fe:	4b75      	ldr	r3, [pc, #468]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 8007900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007902:	4a74      	ldr	r2, [pc, #464]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 8007904:	f023 0301 	bic.w	r3, r3, #1
 8007908:	6713      	str	r3, [r2, #112]	; 0x70
 800790a:	4b72      	ldr	r3, [pc, #456]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 800790c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790e:	4a71      	ldr	r2, [pc, #452]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 8007910:	f023 0304 	bic.w	r3, r3, #4
 8007914:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d015      	beq.n	800794a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800791e:	f7fe fdeb 	bl	80064f8 <HAL_GetTick>
 8007922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007924:	e00a      	b.n	800793c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007926:	f7fe fde7 	bl	80064f8 <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	f241 3288 	movw	r2, #5000	; 0x1388
 8007934:	4293      	cmp	r3, r2
 8007936:	d901      	bls.n	800793c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e0c5      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800793c:	4b65      	ldr	r3, [pc, #404]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 800793e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0ee      	beq.n	8007926 <HAL_RCC_OscConfig+0x33a>
 8007948:	e014      	b.n	8007974 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800794a:	f7fe fdd5 	bl	80064f8 <HAL_GetTick>
 800794e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007950:	e00a      	b.n	8007968 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007952:	f7fe fdd1 	bl	80064f8 <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007960:	4293      	cmp	r3, r2
 8007962:	d901      	bls.n	8007968 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e0af      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007968:	4b5a      	ldr	r3, [pc, #360]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 800796a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1ee      	bne.n	8007952 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007974:	7dfb      	ldrb	r3, [r7, #23]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d105      	bne.n	8007986 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800797a:	4b56      	ldr	r3, [pc, #344]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	4a55      	ldr	r2, [pc, #340]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 8007980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007984:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 809b 	beq.w	8007ac6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007990:	4b50      	ldr	r3, [pc, #320]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f003 030c 	and.w	r3, r3, #12
 8007998:	2b08      	cmp	r3, #8
 800799a:	d05c      	beq.n	8007a56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d141      	bne.n	8007a28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079a4:	4b4c      	ldr	r3, [pc, #304]	; (8007ad8 <HAL_RCC_OscConfig+0x4ec>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079aa:	f7fe fda5 	bl	80064f8 <HAL_GetTick>
 80079ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079b0:	e008      	b.n	80079c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079b2:	f7fe fda1 	bl	80064f8 <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d901      	bls.n	80079c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e081      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079c4:	4b43      	ldr	r3, [pc, #268]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1f0      	bne.n	80079b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	69da      	ldr	r2, [r3, #28]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a1b      	ldr	r3, [r3, #32]
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079de:	019b      	lsls	r3, r3, #6
 80079e0:	431a      	orrs	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e6:	085b      	lsrs	r3, r3, #1
 80079e8:	3b01      	subs	r3, #1
 80079ea:	041b      	lsls	r3, r3, #16
 80079ec:	431a      	orrs	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	061b      	lsls	r3, r3, #24
 80079f4:	4937      	ldr	r1, [pc, #220]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079fa:	4b37      	ldr	r3, [pc, #220]	; (8007ad8 <HAL_RCC_OscConfig+0x4ec>)
 80079fc:	2201      	movs	r2, #1
 80079fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a00:	f7fe fd7a 	bl	80064f8 <HAL_GetTick>
 8007a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a06:	e008      	b.n	8007a1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a08:	f7fe fd76 	bl	80064f8 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e056      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a1a:	4b2e      	ldr	r3, [pc, #184]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0f0      	beq.n	8007a08 <HAL_RCC_OscConfig+0x41c>
 8007a26:	e04e      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a28:	4b2b      	ldr	r3, [pc, #172]	; (8007ad8 <HAL_RCC_OscConfig+0x4ec>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a2e:	f7fe fd63 	bl	80064f8 <HAL_GetTick>
 8007a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a34:	e008      	b.n	8007a48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a36:	f7fe fd5f 	bl	80064f8 <HAL_GetTick>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d901      	bls.n	8007a48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e03f      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a48:	4b22      	ldr	r3, [pc, #136]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1f0      	bne.n	8007a36 <HAL_RCC_OscConfig+0x44a>
 8007a54:	e037      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d101      	bne.n	8007a62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e032      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a62:	4b1c      	ldr	r3, [pc, #112]	; (8007ad4 <HAL_RCC_OscConfig+0x4e8>)
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d028      	beq.n	8007ac2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d121      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d11a      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a92:	4013      	ands	r3, r2
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d111      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa8:	085b      	lsrs	r3, r3, #1
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d107      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d001      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e000      	b.n	8007ac8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	40007000 	.word	0x40007000
 8007ad4:	40023800 	.word	0x40023800
 8007ad8:	42470060 	.word	0x42470060

08007adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e0cc      	b.n	8007c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007af0:	4b68      	ldr	r3, [pc, #416]	; (8007c94 <HAL_RCC_ClockConfig+0x1b8>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0307 	and.w	r3, r3, #7
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d90c      	bls.n	8007b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007afe:	4b65      	ldr	r3, [pc, #404]	; (8007c94 <HAL_RCC_ClockConfig+0x1b8>)
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	b2d2      	uxtb	r2, r2
 8007b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b06:	4b63      	ldr	r3, [pc, #396]	; (8007c94 <HAL_RCC_ClockConfig+0x1b8>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0307 	and.w	r3, r3, #7
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d001      	beq.n	8007b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e0b8      	b.n	8007c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0302 	and.w	r3, r3, #2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d020      	beq.n	8007b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0304 	and.w	r3, r3, #4
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d005      	beq.n	8007b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b30:	4b59      	ldr	r3, [pc, #356]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	4a58      	ldr	r2, [pc, #352]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007b36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0308 	and.w	r3, r3, #8
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d005      	beq.n	8007b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b48:	4b53      	ldr	r3, [pc, #332]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	4a52      	ldr	r2, [pc, #328]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007b4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b54:	4b50      	ldr	r3, [pc, #320]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	494d      	ldr	r1, [pc, #308]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d044      	beq.n	8007bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d107      	bne.n	8007b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b7a:	4b47      	ldr	r3, [pc, #284]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d119      	bne.n	8007bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e07f      	b.n	8007c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d003      	beq.n	8007b9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d107      	bne.n	8007baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b9a:	4b3f      	ldr	r3, [pc, #252]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d109      	bne.n	8007bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e06f      	b.n	8007c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007baa:	4b3b      	ldr	r3, [pc, #236]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e067      	b.n	8007c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bba:	4b37      	ldr	r3, [pc, #220]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f023 0203 	bic.w	r2, r3, #3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	4934      	ldr	r1, [pc, #208]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bcc:	f7fe fc94 	bl	80064f8 <HAL_GetTick>
 8007bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bd2:	e00a      	b.n	8007bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bd4:	f7fe fc90 	bl	80064f8 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e04f      	b.n	8007c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bea:	4b2b      	ldr	r3, [pc, #172]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f003 020c 	and.w	r2, r3, #12
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d1eb      	bne.n	8007bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007bfc:	4b25      	ldr	r3, [pc, #148]	; (8007c94 <HAL_RCC_ClockConfig+0x1b8>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0307 	and.w	r3, r3, #7
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d20c      	bcs.n	8007c24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c0a:	4b22      	ldr	r3, [pc, #136]	; (8007c94 <HAL_RCC_ClockConfig+0x1b8>)
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c12:	4b20      	ldr	r3, [pc, #128]	; (8007c94 <HAL_RCC_ClockConfig+0x1b8>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0307 	and.w	r3, r3, #7
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d001      	beq.n	8007c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e032      	b.n	8007c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0304 	and.w	r3, r3, #4
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d008      	beq.n	8007c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c30:	4b19      	ldr	r3, [pc, #100]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	4916      	ldr	r1, [pc, #88]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0308 	and.w	r3, r3, #8
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d009      	beq.n	8007c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c4e:	4b12      	ldr	r3, [pc, #72]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	490e      	ldr	r1, [pc, #56]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c62:	f000 f821 	bl	8007ca8 <HAL_RCC_GetSysClockFreq>
 8007c66:	4602      	mov	r2, r0
 8007c68:	4b0b      	ldr	r3, [pc, #44]	; (8007c98 <HAL_RCC_ClockConfig+0x1bc>)
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	091b      	lsrs	r3, r3, #4
 8007c6e:	f003 030f 	and.w	r3, r3, #15
 8007c72:	490a      	ldr	r1, [pc, #40]	; (8007c9c <HAL_RCC_ClockConfig+0x1c0>)
 8007c74:	5ccb      	ldrb	r3, [r1, r3]
 8007c76:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7a:	4a09      	ldr	r2, [pc, #36]	; (8007ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c7e:	4b09      	ldr	r3, [pc, #36]	; (8007ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fe fbf4 	bl	8006470 <HAL_InitTick>

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	40023c00 	.word	0x40023c00
 8007c98:	40023800 	.word	0x40023800
 8007c9c:	0800c148 	.word	0x0800c148
 8007ca0:	20000000 	.word	0x20000000
 8007ca4:	2000001c 	.word	0x2000001c

08007ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ca8:	b5b0      	push	{r4, r5, r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007cae:	2100      	movs	r1, #0
 8007cb0:	6079      	str	r1, [r7, #4]
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	60f9      	str	r1, [r7, #12]
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007cba:	2100      	movs	r1, #0
 8007cbc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cbe:	4952      	ldr	r1, [pc, #328]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8007cc0:	6889      	ldr	r1, [r1, #8]
 8007cc2:	f001 010c 	and.w	r1, r1, #12
 8007cc6:	2908      	cmp	r1, #8
 8007cc8:	d00d      	beq.n	8007ce6 <HAL_RCC_GetSysClockFreq+0x3e>
 8007cca:	2908      	cmp	r1, #8
 8007ccc:	f200 8094 	bhi.w	8007df8 <HAL_RCC_GetSysClockFreq+0x150>
 8007cd0:	2900      	cmp	r1, #0
 8007cd2:	d002      	beq.n	8007cda <HAL_RCC_GetSysClockFreq+0x32>
 8007cd4:	2904      	cmp	r1, #4
 8007cd6:	d003      	beq.n	8007ce0 <HAL_RCC_GetSysClockFreq+0x38>
 8007cd8:	e08e      	b.n	8007df8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007cda:	4b4c      	ldr	r3, [pc, #304]	; (8007e0c <HAL_RCC_GetSysClockFreq+0x164>)
 8007cdc:	60bb      	str	r3, [r7, #8]
       break;
 8007cde:	e08e      	b.n	8007dfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ce0:	4b4b      	ldr	r3, [pc, #300]	; (8007e10 <HAL_RCC_GetSysClockFreq+0x168>)
 8007ce2:	60bb      	str	r3, [r7, #8]
      break;
 8007ce4:	e08b      	b.n	8007dfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ce6:	4948      	ldr	r1, [pc, #288]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8007ce8:	6849      	ldr	r1, [r1, #4]
 8007cea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007cee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007cf0:	4945      	ldr	r1, [pc, #276]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8007cf2:	6849      	ldr	r1, [r1, #4]
 8007cf4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007cf8:	2900      	cmp	r1, #0
 8007cfa:	d024      	beq.n	8007d46 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cfc:	4942      	ldr	r1, [pc, #264]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8007cfe:	6849      	ldr	r1, [r1, #4]
 8007d00:	0989      	lsrs	r1, r1, #6
 8007d02:	4608      	mov	r0, r1
 8007d04:	f04f 0100 	mov.w	r1, #0
 8007d08:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007d0c:	f04f 0500 	mov.w	r5, #0
 8007d10:	ea00 0204 	and.w	r2, r0, r4
 8007d14:	ea01 0305 	and.w	r3, r1, r5
 8007d18:	493d      	ldr	r1, [pc, #244]	; (8007e10 <HAL_RCC_GetSysClockFreq+0x168>)
 8007d1a:	fb01 f003 	mul.w	r0, r1, r3
 8007d1e:	2100      	movs	r1, #0
 8007d20:	fb01 f102 	mul.w	r1, r1, r2
 8007d24:	1844      	adds	r4, r0, r1
 8007d26:	493a      	ldr	r1, [pc, #232]	; (8007e10 <HAL_RCC_GetSysClockFreq+0x168>)
 8007d28:	fba2 0101 	umull	r0, r1, r2, r1
 8007d2c:	1863      	adds	r3, r4, r1
 8007d2e:	4619      	mov	r1, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	461a      	mov	r2, r3
 8007d34:	f04f 0300 	mov.w	r3, #0
 8007d38:	f7f8 faa2 	bl	8000280 <__aeabi_uldivmod>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4613      	mov	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	e04a      	b.n	8007ddc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d46:	4b30      	ldr	r3, [pc, #192]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	099b      	lsrs	r3, r3, #6
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	f04f 0300 	mov.w	r3, #0
 8007d52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d56:	f04f 0100 	mov.w	r1, #0
 8007d5a:	ea02 0400 	and.w	r4, r2, r0
 8007d5e:	ea03 0501 	and.w	r5, r3, r1
 8007d62:	4620      	mov	r0, r4
 8007d64:	4629      	mov	r1, r5
 8007d66:	f04f 0200 	mov.w	r2, #0
 8007d6a:	f04f 0300 	mov.w	r3, #0
 8007d6e:	014b      	lsls	r3, r1, #5
 8007d70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d74:	0142      	lsls	r2, r0, #5
 8007d76:	4610      	mov	r0, r2
 8007d78:	4619      	mov	r1, r3
 8007d7a:	1b00      	subs	r0, r0, r4
 8007d7c:	eb61 0105 	sbc.w	r1, r1, r5
 8007d80:	f04f 0200 	mov.w	r2, #0
 8007d84:	f04f 0300 	mov.w	r3, #0
 8007d88:	018b      	lsls	r3, r1, #6
 8007d8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d8e:	0182      	lsls	r2, r0, #6
 8007d90:	1a12      	subs	r2, r2, r0
 8007d92:	eb63 0301 	sbc.w	r3, r3, r1
 8007d96:	f04f 0000 	mov.w	r0, #0
 8007d9a:	f04f 0100 	mov.w	r1, #0
 8007d9e:	00d9      	lsls	r1, r3, #3
 8007da0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007da4:	00d0      	lsls	r0, r2, #3
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	1912      	adds	r2, r2, r4
 8007dac:	eb45 0303 	adc.w	r3, r5, r3
 8007db0:	f04f 0000 	mov.w	r0, #0
 8007db4:	f04f 0100 	mov.w	r1, #0
 8007db8:	0299      	lsls	r1, r3, #10
 8007dba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007dbe:	0290      	lsls	r0, r2, #10
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f04f 0300 	mov.w	r3, #0
 8007dd0:	f7f8 fa56 	bl	8000280 <__aeabi_uldivmod>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4613      	mov	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ddc:	4b0a      	ldr	r3, [pc, #40]	; (8007e08 <HAL_RCC_GetSysClockFreq+0x160>)
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	0c1b      	lsrs	r3, r3, #16
 8007de2:	f003 0303 	and.w	r3, r3, #3
 8007de6:	3301      	adds	r3, #1
 8007de8:	005b      	lsls	r3, r3, #1
 8007dea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df4:	60bb      	str	r3, [r7, #8]
      break;
 8007df6:	e002      	b.n	8007dfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007df8:	4b04      	ldr	r3, [pc, #16]	; (8007e0c <HAL_RCC_GetSysClockFreq+0x164>)
 8007dfa:	60bb      	str	r3, [r7, #8]
      break;
 8007dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bdb0      	pop	{r4, r5, r7, pc}
 8007e08:	40023800 	.word	0x40023800
 8007e0c:	00f42400 	.word	0x00f42400
 8007e10:	017d7840 	.word	0x017d7840

08007e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e18:	4b03      	ldr	r3, [pc, #12]	; (8007e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	20000000 	.word	0x20000000

08007e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e30:	f7ff fff0 	bl	8007e14 <HAL_RCC_GetHCLKFreq>
 8007e34:	4602      	mov	r2, r0
 8007e36:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	0a9b      	lsrs	r3, r3, #10
 8007e3c:	f003 0307 	and.w	r3, r3, #7
 8007e40:	4903      	ldr	r1, [pc, #12]	; (8007e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e42:	5ccb      	ldrb	r3, [r1, r3]
 8007e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	40023800 	.word	0x40023800
 8007e50:	0800c158 	.word	0x0800c158

08007e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e58:	f7ff ffdc 	bl	8007e14 <HAL_RCC_GetHCLKFreq>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	0b5b      	lsrs	r3, r3, #13
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	4903      	ldr	r1, [pc, #12]	; (8007e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e6a:	5ccb      	ldrb	r3, [r1, r3]
 8007e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	40023800 	.word	0x40023800
 8007e78:	0800c158 	.word	0x0800c158

08007e7c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e022      	b.n	8007ed4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d105      	bne.n	8007ea6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7f9 fcc3 	bl	800182c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2203      	movs	r2, #3
 8007eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f814 	bl	8007edc <HAL_SD_InitCard>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e00a      	b.n	8007ed4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007edc:	b5b0      	push	{r4, r5, r7, lr}
 8007ede:	b08e      	sub	sp, #56	; 0x38
 8007ee0:	af04      	add	r7, sp, #16
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007eec:	2300      	movs	r3, #0
 8007eee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007ef8:	2376      	movs	r3, #118	; 0x76
 8007efa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681d      	ldr	r5, [r3, #0]
 8007f00:	466c      	mov	r4, sp
 8007f02:	f107 0314 	add.w	r3, r7, #20
 8007f06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f0e:	f107 0308 	add.w	r3, r7, #8
 8007f12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f14:	4628      	mov	r0, r5
 8007f16:	f002 fc3b 	bl	800a790 <SDIO_Init>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d001      	beq.n	8007f2c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e04c      	b.n	8007fc6 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007f2c:	4b28      	ldr	r3, [pc, #160]	; (8007fd0 <HAL_SD_InitCard+0xf4>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f002 fc73 	bl	800a822 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007f3c:	4b24      	ldr	r3, [pc, #144]	; (8007fd0 <HAL_SD_InitCard+0xf4>)
 8007f3e:	2201      	movs	r2, #1
 8007f40:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 f80e 	bl	8008f64 <SD_PowerON>
 8007f48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00b      	beq.n	8007f68 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e02e      	b.n	8007fc6 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 ff2f 	bl	8008dcc <SD_InitCard>
 8007f6e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00b      	beq.n	8007f8e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	431a      	orrs	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e01b      	b.n	8007fc6 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007f96:	4618      	mov	r0, r3
 8007f98:	f002 fcd6 	bl	800a948 <SDMMC_CmdBlockLength>
 8007f9c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00f      	beq.n	8007fc4 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a0a      	ldr	r2, [pc, #40]	; (8007fd4 <HAL_SD_InitCard+0xf8>)
 8007faa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e000      	b.n	8007fc6 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3728      	adds	r7, #40	; 0x28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	422580a0 	.word	0x422580a0
 8007fd4:	004005ff 	.word	0x004005ff

08007fd8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08c      	sub	sp, #48	; 0x30
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d107      	bne.n	8008000 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e0c0      	b.n	8008182 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b01      	cmp	r3, #1
 800800a:	f040 80b9 	bne.w	8008180 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	441a      	add	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800801e:	429a      	cmp	r2, r3
 8008020:	d907      	bls.n	8008032 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008026:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e0a7      	b.n	8008182 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2203      	movs	r2, #3
 8008036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2200      	movs	r2, #0
 8008040:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	6812      	ldr	r2, [r2, #0]
 800804c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8008050:	f043 0302 	orr.w	r3, r3, #2
 8008054:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805a:	4a4c      	ldr	r2, [pc, #304]	; (800818c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800805c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008062:	4a4b      	ldr	r2, [pc, #300]	; (8008190 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008064:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	2200      	movs	r2, #0
 800806c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008072:	2200      	movs	r2, #0
 8008074:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008086:	689a      	ldr	r2, [r3, #8]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3380      	adds	r3, #128	; 0x80
 800809c:	4619      	mov	r1, r3
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	025b      	lsls	r3, r3, #9
 80080a4:	089b      	lsrs	r3, r3, #2
 80080a6:	f7fe fca7 	bl	80069f8 <HAL_DMA_Start_IT>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d017      	beq.n	80080e0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80080be:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a33      	ldr	r2, [pc, #204]	; (8008194 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80080c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e050      	b.n	8008182 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80080e0:	4b2d      	ldr	r3, [pc, #180]	; (8008198 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80080e2:	2201      	movs	r2, #1
 80080e4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d002      	beq.n	80080f4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	025b      	lsls	r3, r3, #9
 80080f2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80080f4:	f04f 33ff 	mov.w	r3, #4294967295
 80080f8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	025b      	lsls	r3, r3, #9
 80080fe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008100:	2390      	movs	r3, #144	; 0x90
 8008102:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008104:	2302      	movs	r3, #2
 8008106:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008108:	2300      	movs	r3, #0
 800810a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800810c:	2301      	movs	r3, #1
 800810e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f107 0210 	add.w	r2, r7, #16
 8008118:	4611      	mov	r1, r2
 800811a:	4618      	mov	r0, r3
 800811c:	f002 fbe8 	bl	800a8f0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d90a      	bls.n	800813c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2282      	movs	r2, #130	; 0x82
 800812a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008132:	4618      	mov	r0, r3
 8008134:	f002 fc4c 	bl	800a9d0 <SDMMC_CmdReadMultiBlock>
 8008138:	62f8      	str	r0, [r7, #44]	; 0x2c
 800813a:	e009      	b.n	8008150 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2281      	movs	r2, #129	; 0x81
 8008140:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008148:	4618      	mov	r0, r3
 800814a:	f002 fc1f 	bl	800a98c <SDMMC_CmdReadSingleBlock>
 800814e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008152:	2b00      	cmp	r3, #0
 8008154:	d012      	beq.n	800817c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a0e      	ldr	r2, [pc, #56]	; (8008194 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800815c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008164:	431a      	orrs	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e002      	b.n	8008182 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	e000      	b.n	8008182 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8008180:	2302      	movs	r3, #2
  }
}
 8008182:	4618      	mov	r0, r3
 8008184:	3730      	adds	r7, #48	; 0x30
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	08008bdb 	.word	0x08008bdb
 8008190:	08008c4d 	.word	0x08008c4d
 8008194:	004005ff 	.word	0x004005ff
 8008198:	4225858c 	.word	0x4225858c

0800819c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b08c      	sub	sp, #48	; 0x30
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
 80081a8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d107      	bne.n	80081c4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e0c5      	b.n	8008350 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	f040 80be 	bne.w	800834e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80081d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	441a      	add	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d907      	bls.n	80081f6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e0ac      	b.n	8008350 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2203      	movs	r2, #3
 80081fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2200      	movs	r2, #0
 8008204:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	6812      	ldr	r2, [r2, #0]
 8008210:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8008214:	f043 0302 	orr.w	r3, r3, #2
 8008218:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800821e:	4a4e      	ldr	r2, [pc, #312]	; (8008358 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8008220:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008226:	4a4d      	ldr	r2, [pc, #308]	; (800835c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008228:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822e:	2200      	movs	r2, #0
 8008230:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008236:	2b01      	cmp	r3, #1
 8008238:	d002      	beq.n	8008240 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	025b      	lsls	r3, r3, #9
 800823e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d90a      	bls.n	800825c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	22a0      	movs	r2, #160	; 0xa0
 800824a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008252:	4618      	mov	r0, r3
 8008254:	f002 fc00 	bl	800aa58 <SDMMC_CmdWriteMultiBlock>
 8008258:	62f8      	str	r0, [r7, #44]	; 0x2c
 800825a:	e009      	b.n	8008270 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2290      	movs	r2, #144	; 0x90
 8008260:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008268:	4618      	mov	r0, r3
 800826a:	f002 fbd3 	bl	800aa14 <SDMMC_CmdWriteSingleBlock>
 800826e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	2b00      	cmp	r3, #0
 8008274:	d012      	beq.n	800829c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a39      	ldr	r2, [pc, #228]	; (8008360 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800827c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008284:	431a      	orrs	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e059      	b.n	8008350 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800829c:	4b31      	ldr	r3, [pc, #196]	; (8008364 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800829e:	2201      	movs	r2, #1
 80082a0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a6:	2240      	movs	r2, #64	; 0x40
 80082a8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80082ca:	68b9      	ldr	r1, [r7, #8]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3380      	adds	r3, #128	; 0x80
 80082d2:	461a      	mov	r2, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	025b      	lsls	r3, r3, #9
 80082d8:	089b      	lsrs	r3, r3, #2
 80082da:	f7fe fb8d 	bl	80069f8 <HAL_DMA_Start_IT>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d01c      	beq.n	800831e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	6812      	ldr	r2, [r2, #0]
 80082ee:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80082f2:	f023 0302 	bic.w	r3, r3, #2
 80082f6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a18      	ldr	r2, [pc, #96]	; (8008360 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80082fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008304:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e018      	b.n	8008350 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800831e:	f04f 33ff 	mov.w	r3, #4294967295
 8008322:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	025b      	lsls	r3, r3, #9
 8008328:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800832a:	2390      	movs	r3, #144	; 0x90
 800832c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800832e:	2300      	movs	r3, #0
 8008330:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008332:	2300      	movs	r3, #0
 8008334:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008336:	2301      	movs	r3, #1
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f107 0210 	add.w	r2, r7, #16
 8008342:	4611      	mov	r1, r2
 8008344:	4618      	mov	r0, r3
 8008346:	f002 fad3 	bl	800a8f0 <SDIO_ConfigData>

      return HAL_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	e000      	b.n	8008350 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800834e:	2302      	movs	r3, #2
  }
}
 8008350:	4618      	mov	r0, r3
 8008352:	3730      	adds	r7, #48	; 0x30
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	08008bb1 	.word	0x08008bb1
 800835c:	08008c4d 	.word	0x08008c4d
 8008360:	004005ff 	.word	0x004005ff
 8008364:	4225858c 	.word	0x4225858c

08008368 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008374:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d008      	beq.n	8008396 <HAL_SD_IRQHandler+0x2e>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f003 0308 	and.w	r3, r3, #8
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 f807 	bl	80093a2 <SD_Read_IT>
 8008394:	e165      	b.n	8008662 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800839c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 808f 	beq.w	80084c4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	6812      	ldr	r2, [r2, #0]
 80083ba:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80083be:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80083c2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f022 0201 	bic.w	r2, r2, #1
 80083d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f003 0308 	and.w	r3, r3, #8
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d039      	beq.n	8008452 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f003 0302 	and.w	r3, r3, #2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d104      	bne.n	80083f2 <HAL_SD_IRQHandler+0x8a>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f003 0320 	and.w	r3, r3, #32
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d011      	beq.n	8008416 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f002 fb50 	bl	800aa9c <SDMMC_CmdStopTransfer>
 80083fc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d008      	beq.n	8008416 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	431a      	orrs	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f92f 	bl	8008674 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f240 523a 	movw	r2, #1338	; 0x53a
 800841e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	d104      	bne.n	8008442 <HAL_SD_IRQHandler+0xda>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7f9 f988 	bl	8001758 <HAL_SD_RxCpltCallback>
 8008448:	e10b      	b.n	8008662 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7f9 f994 	bl	8001778 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008450:	e107      	b.n	8008662 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 8102 	beq.w	8008662 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f003 0320 	and.w	r3, r3, #32
 8008464:	2b00      	cmp	r3, #0
 8008466:	d011      	beq.n	800848c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4618      	mov	r0, r3
 800846e:	f002 fb15 	bl	800aa9c <SDMMC_CmdStopTransfer>
 8008472:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d008      	beq.n	800848c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	431a      	orrs	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f8f4 	bl	8008674 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	f040 80e5 	bne.w	8008662 <HAL_SD_IRQHandler+0x2fa>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f003 0302 	and.w	r3, r3, #2
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f040 80df 	bne.w	8008662 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f022 0208 	bic.w	r2, r2, #8
 80084b2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7f9 f95b 	bl	8001778 <HAL_SD_TxCpltCallback>
}
 80084c2:	e0ce      	b.n	8008662 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d008      	beq.n	80084e4 <HAL_SD_IRQHandler+0x17c>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f003 0308 	and.w	r3, r3, #8
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 ffb1 	bl	8009444 <SD_Write_IT>
 80084e2:	e0be      	b.n	8008662 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084ea:	f240 233a 	movw	r3, #570	; 0x23a
 80084ee:	4013      	ands	r3, r2
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 80b6 	beq.w	8008662 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d005      	beq.n	8008510 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008508:	f043 0202 	orr.w	r2, r3, #2
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008516:	f003 0308 	and.w	r3, r3, #8
 800851a:	2b00      	cmp	r3, #0
 800851c:	d005      	beq.n	800852a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	f043 0208 	orr.w	r2, r3, #8
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008530:	f003 0320 	and.w	r3, r3, #32
 8008534:	2b00      	cmp	r3, #0
 8008536:	d005      	beq.n	8008544 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853c:	f043 0220 	orr.w	r2, r3, #32
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854a:	f003 0310 	and.w	r3, r3, #16
 800854e:	2b00      	cmp	r3, #0
 8008550:	d005      	beq.n	800855e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008556:	f043 0210 	orr.w	r2, r3, #16
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008568:	2b00      	cmp	r3, #0
 800856a:	d005      	beq.n	8008578 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008570:	f043 0208 	orr.w	r2, r3, #8
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f240 723a 	movw	r2, #1850	; 0x73a
 8008580:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	6812      	ldr	r2, [r2, #0]
 800858c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8008590:	f023 0302 	bic.w	r3, r3, #2
 8008594:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f002 fa7e 	bl	800aa9c <SDMMC_CmdStopTransfer>
 80085a0:	4602      	mov	r2, r0
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a6:	431a      	orrs	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f003 0308 	and.w	r3, r3, #8
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00a      	beq.n	80085cc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f855 	bl	8008674 <HAL_SD_ErrorCallback>
}
 80085ca:	e04a      	b.n	8008662 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d045      	beq.n	8008662 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f003 0310 	and.w	r3, r3, #16
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d104      	bne.n	80085ea <HAL_SD_IRQHandler+0x282>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f003 0320 	and.w	r3, r3, #32
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d011      	beq.n	800860e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ee:	4a1f      	ldr	r2, [pc, #124]	; (800866c <HAL_SD_IRQHandler+0x304>)
 80085f0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe fac6 	bl	8006b88 <HAL_DMA_Abort_IT>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d02f      	beq.n	8008662 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008606:	4618      	mov	r0, r3
 8008608:	f000 fb72 	bl	8008cf0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800860c:	e029      	b.n	8008662 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	2b00      	cmp	r3, #0
 8008616:	d104      	bne.n	8008622 <HAL_SD_IRQHandler+0x2ba>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f003 0302 	and.w	r3, r3, #2
 800861e:	2b00      	cmp	r3, #0
 8008620:	d011      	beq.n	8008646 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008626:	4a12      	ldr	r2, [pc, #72]	; (8008670 <HAL_SD_IRQHandler+0x308>)
 8008628:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862e:	4618      	mov	r0, r3
 8008630:	f7fe faaa 	bl	8006b88 <HAL_DMA_Abort_IT>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d013      	beq.n	8008662 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	4618      	mov	r0, r3
 8008640:	f000 fb8d 	bl	8008d5e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008644:	e00d      	b.n	8008662 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f814 	bl	8008688 <HAL_SD_AbortCallback>
}
 8008660:	e7ff      	b.n	8008662 <HAL_SD_IRQHandler+0x2fa>
 8008662:	bf00      	nop
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	08008cf1 	.word	0x08008cf1
 8008670:	08008d5f 	.word	0x08008d5f

08008674 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086aa:	0f9b      	lsrs	r3, r3, #30
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086b6:	0e9b      	lsrs	r3, r3, #26
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	f003 030f 	and.w	r3, r3, #15
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086c8:	0e1b      	lsrs	r3, r3, #24
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	f003 0303 	and.w	r3, r3, #3
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086da:	0c1b      	lsrs	r3, r3, #16
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086e6:	0a1b      	lsrs	r3, r3, #8
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086fc:	0d1b      	lsrs	r3, r3, #20
 80086fe:	b29a      	uxth	r2, r3
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008708:	0c1b      	lsrs	r3, r3, #16
 800870a:	b2db      	uxtb	r3, r3
 800870c:	f003 030f 	and.w	r3, r3, #15
 8008710:	b2da      	uxtb	r2, r3
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800871a:	0bdb      	lsrs	r3, r3, #15
 800871c:	b2db      	uxtb	r3, r3
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	b2da      	uxtb	r2, r3
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800872c:	0b9b      	lsrs	r3, r3, #14
 800872e:	b2db      	uxtb	r3, r3
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	b2da      	uxtb	r2, r3
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800873e:	0b5b      	lsrs	r3, r3, #13
 8008740:	b2db      	uxtb	r3, r3
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	b2da      	uxtb	r2, r3
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008750:	0b1b      	lsrs	r3, r3, #12
 8008752:	b2db      	uxtb	r3, r3
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	b2da      	uxtb	r2, r3
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	2200      	movs	r2, #0
 8008762:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008768:	2b00      	cmp	r3, #0
 800876a:	d163      	bne.n	8008834 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008770:	009a      	lsls	r2, r3, #2
 8008772:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008776:	4013      	ands	r3, r2
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800877c:	0f92      	lsrs	r2, r2, #30
 800877e:	431a      	orrs	r2, r3
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008788:	0edb      	lsrs	r3, r3, #27
 800878a:	b2db      	uxtb	r3, r3
 800878c:	f003 0307 	and.w	r3, r3, #7
 8008790:	b2da      	uxtb	r2, r3
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800879a:	0e1b      	lsrs	r3, r3, #24
 800879c:	b2db      	uxtb	r3, r3
 800879e:	f003 0307 	and.w	r3, r3, #7
 80087a2:	b2da      	uxtb	r2, r3
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ac:	0d5b      	lsrs	r3, r3, #21
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	f003 0307 	and.w	r3, r3, #7
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087be:	0c9b      	lsrs	r3, r3, #18
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d0:	0bdb      	lsrs	r3, r3, #15
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	f003 0307 	and.w	r3, r3, #7
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	1c5a      	adds	r2, r3, #1
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	7e1b      	ldrb	r3, [r3, #24]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	f003 0307 	and.w	r3, r3, #7
 80087f2:	3302      	adds	r3, #2
 80087f4:	2201      	movs	r2, #1
 80087f6:	fa02 f303 	lsl.w	r3, r2, r3
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80087fe:	fb02 f203 	mul.w	r2, r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	7a1b      	ldrb	r3, [r3, #8]
 800880a:	b2db      	uxtb	r3, r3
 800880c:	f003 030f 	and.w	r3, r3, #15
 8008810:	2201      	movs	r2, #1
 8008812:	409a      	lsls	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008820:	0a52      	lsrs	r2, r2, #9
 8008822:	fb02 f203 	mul.w	r2, r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008830:	661a      	str	r2, [r3, #96]	; 0x60
 8008832:	e031      	b.n	8008898 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008838:	2b01      	cmp	r3, #1
 800883a:	d11d      	bne.n	8008878 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008840:	041b      	lsls	r3, r3, #16
 8008842:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800884a:	0c1b      	lsrs	r3, r3, #16
 800884c:	431a      	orrs	r2, r3
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	3301      	adds	r3, #1
 8008858:	029a      	lsls	r2, r3, #10
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800886c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	661a      	str	r2, [r3, #96]	; 0x60
 8008876:	e00f      	b.n	8008898 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a58      	ldr	r2, [pc, #352]	; (80089e0 <HAL_SD_GetCardCSD+0x344>)
 800887e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008884:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e09d      	b.n	80089d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800889c:	0b9b      	lsrs	r3, r3, #14
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ae:	09db      	lsrs	r3, r3, #7
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d0:	0fdb      	lsrs	r3, r3, #31
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088dc:	0f5b      	lsrs	r3, r3, #29
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	f003 0303 	and.w	r3, r3, #3
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ee:	0e9b      	lsrs	r3, r3, #26
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	f003 0307 	and.w	r3, r3, #7
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008900:	0d9b      	lsrs	r3, r3, #22
 8008902:	b2db      	uxtb	r3, r3
 8008904:	f003 030f 	and.w	r3, r3, #15
 8008908:	b2da      	uxtb	r2, r3
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008912:	0d5b      	lsrs	r3, r3, #21
 8008914:	b2db      	uxtb	r3, r3
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	b2da      	uxtb	r2, r3
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892e:	0c1b      	lsrs	r3, r3, #16
 8008930:	b2db      	uxtb	r3, r3
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	b2da      	uxtb	r2, r3
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008942:	0bdb      	lsrs	r3, r3, #15
 8008944:	b2db      	uxtb	r3, r3
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	b2da      	uxtb	r2, r3
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008956:	0b9b      	lsrs	r3, r3, #14
 8008958:	b2db      	uxtb	r3, r3
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	b2da      	uxtb	r2, r3
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896a:	0b5b      	lsrs	r3, r3, #13
 800896c:	b2db      	uxtb	r3, r3
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	b2da      	uxtb	r2, r3
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897e:	0b1b      	lsrs	r3, r3, #12
 8008980:	b2db      	uxtb	r3, r3
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	b2da      	uxtb	r2, r3
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008992:	0a9b      	lsrs	r3, r3, #10
 8008994:	b2db      	uxtb	r3, r3
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	b2da      	uxtb	r2, r3
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a6:	0a1b      	lsrs	r3, r3, #8
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	f003 0303 	and.w	r3, r3, #3
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ba:	085b      	lsrs	r3, r3, #1
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	004005ff 	.word	0x004005ff

080089e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008a3c:	b5b0      	push	{r4, r5, r7, lr}
 8008a3e:	b08e      	sub	sp, #56	; 0x38
 8008a40:	af04      	add	r7, sp, #16
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2203      	movs	r2, #3
 8008a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d02e      	beq.n	8008aba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a62:	d106      	bne.n	8008a72 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38
 8008a70:	e029      	b.n	8008ac6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a78:	d10a      	bne.n	8008a90 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fb28 	bl	80090d0 <SD_WideBus_Enable>
 8008a80:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	639a      	str	r2, [r3, #56]	; 0x38
 8008a8e:	e01a      	b.n	8008ac6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10a      	bne.n	8008aac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fb65 	bl	8009166 <SD_WideBus_Disable>
 8008a9c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	431a      	orrs	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	639a      	str	r2, [r3, #56]	; 0x38
 8008aaa:	e00c      	b.n	8008ac6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	639a      	str	r2, [r3, #56]	; 0x38
 8008ab8:	e005      	b.n	8008ac6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00b      	beq.n	8008ae6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a26      	ldr	r2, [pc, #152]	; (8008b6c <HAL_SD_ConfigWideBusOperation+0x130>)
 8008ad4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ae4:	e01f      	b.n	8008b26 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681d      	ldr	r5, [r3, #0]
 8008b0c:	466c      	mov	r4, sp
 8008b0e:	f107 0314 	add.w	r3, r7, #20
 8008b12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b1a:	f107 0308 	add.w	r3, r7, #8
 8008b1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b20:	4628      	mov	r0, r5
 8008b22:	f001 fe35 	bl	800a790 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f001 ff0a 	bl	800a948 <SDMMC_CmdBlockLength>
 8008b34:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00c      	beq.n	8008b56 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a0a      	ldr	r2, [pc, #40]	; (8008b6c <HAL_SD_ConfigWideBusOperation+0x130>)
 8008b42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	431a      	orrs	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3728      	adds	r7, #40	; 0x28
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bdb0      	pop	{r4, r5, r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	004005ff 	.word	0x004005ff

08008b70 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008b7c:	f107 030c 	add.w	r3, r7, #12
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fa7c 	bl	8009080 <SD_SendStatus>
 8008b88:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d005      	beq.n	8008b9c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	431a      	orrs	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	0a5b      	lsrs	r3, r3, #9
 8008ba0:	f003 030f 	and.w	r3, r3, #15
 8008ba4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008ba6:	693b      	ldr	r3, [r7, #16]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bcc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008bce:	bf00      	nop
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr

08008bda <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bec:	2b82      	cmp	r3, #130	; 0x82
 8008bee:	d111      	bne.n	8008c14 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f001 ff51 	bl	800aa9c <SDMMC_CmdStopTransfer>
 8008bfa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d008      	beq.n	8008c14 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f7ff fd30 	bl	8008674 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f022 0208 	bic.w	r2, r2, #8
 8008c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f240 523a 	movw	r2, #1338	; 0x53a
 8008c2c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f7f8 fd8b 	bl	8001758 <HAL_SD_RxCpltCallback>
#endif
}
 8008c42:	bf00      	nop
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
	...

08008c4c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c58:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7fe f940 	bl	8006ee0 <HAL_DMA_GetError>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d03e      	beq.n	8008ce4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c6c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c74:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d002      	beq.n	8008c82 <SD_DMAError+0x36>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d12d      	bne.n	8008cde <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a19      	ldr	r2, [pc, #100]	; (8008cec <SD_DMAError+0xa0>)
 8008c88:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008c98:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008ca6:	6978      	ldr	r0, [r7, #20]
 8008ca8:	f7ff ff62 	bl	8008b70 <HAL_SD_GetCardState>
 8008cac:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2b06      	cmp	r3, #6
 8008cb2:	d002      	beq.n	8008cba <SD_DMAError+0x6e>
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2b05      	cmp	r3, #5
 8008cb8:	d10a      	bne.n	8008cd0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f001 feec 	bl	800aa9c <SDMMC_CmdStopTransfer>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008cde:	6978      	ldr	r0, [r7, #20]
 8008ce0:	f7ff fcc8 	bl	8008674 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008ce4:	bf00      	nop
 8008ce6:	3718      	adds	r7, #24
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	004005ff 	.word	0x004005ff

08008cf0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f240 523a 	movw	r2, #1338	; 0x53a
 8008d06:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f7ff ff31 	bl	8008b70 <HAL_SD_GetCardState>
 8008d0e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2b06      	cmp	r3, #6
 8008d22:	d002      	beq.n	8008d2a <SD_DMATxAbort+0x3a>
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2b05      	cmp	r3, #5
 8008d28:	d10a      	bne.n	8008d40 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f001 feb4 	bl	800aa9c <SDMMC_CmdStopTransfer>
 8008d34:	4602      	mov	r2, r0
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3a:	431a      	orrs	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d103      	bne.n	8008d50 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f7ff fc9d 	bl	8008688 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008d4e:	e002      	b.n	8008d56 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7ff fc8f 	bl	8008674 <HAL_SD_ErrorCallback>
}
 8008d56:	bf00      	nop
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f240 523a 	movw	r2, #1338	; 0x53a
 8008d74:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f7ff fefa 	bl	8008b70 <HAL_SD_GetCardState>
 8008d7c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	2b06      	cmp	r3, #6
 8008d90:	d002      	beq.n	8008d98 <SD_DMARxAbort+0x3a>
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2b05      	cmp	r3, #5
 8008d96:	d10a      	bne.n	8008dae <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f001 fe7d 	bl	800aa9c <SDMMC_CmdStopTransfer>
 8008da2:	4602      	mov	r2, r0
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da8:	431a      	orrs	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d103      	bne.n	8008dbe <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f7ff fc66 	bl	8008688 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008dbc:	e002      	b.n	8008dc4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f7ff fc58 	bl	8008674 <HAL_SD_ErrorCallback>
}
 8008dc4:	bf00      	nop
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008dcc:	b5b0      	push	{r4, r5, r7, lr}
 8008dce:	b094      	sub	sp, #80	; 0x50
 8008dd0:	af04      	add	r7, sp, #16
 8008dd2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f001 fd2f 	bl	800a840 <SDIO_GetPowerState>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d102      	bne.n	8008dee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008de8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008dec:	e0b6      	b.n	8008f5c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d02f      	beq.n	8008e56 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f001 ff58 	bl	800acb0 <SDMMC_CmdSendCID>
 8008e00:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <SD_InitCard+0x40>
    {
      return errorstate;
 8008e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0a:	e0a7      	b.n	8008f5c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2100      	movs	r1, #0
 8008e12:	4618      	mov	r0, r3
 8008e14:	f001 fd59 	bl	800a8ca <SDIO_GetResponse>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2104      	movs	r1, #4
 8008e24:	4618      	mov	r0, r3
 8008e26:	f001 fd50 	bl	800a8ca <SDIO_GetResponse>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2108      	movs	r1, #8
 8008e36:	4618      	mov	r0, r3
 8008e38:	f001 fd47 	bl	800a8ca <SDIO_GetResponse>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	210c      	movs	r1, #12
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f001 fd3e 	bl	800a8ca <SDIO_GetResponse>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d00d      	beq.n	8008e7a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f107 020e 	add.w	r2, r7, #14
 8008e66:	4611      	mov	r1, r2
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f001 ff5e 	bl	800ad2a <SDMMC_CmdSetRelAdd>
 8008e6e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d001      	beq.n	8008e7a <SD_InitCard+0xae>
    {
      return errorstate;
 8008e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e78:	e070      	b.n	8008f5c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d036      	beq.n	8008ef0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008e82:	89fb      	ldrh	r3, [r7, #14]
 8008e84:	461a      	mov	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e92:	041b      	lsls	r3, r3, #16
 8008e94:	4619      	mov	r1, r3
 8008e96:	4610      	mov	r0, r2
 8008e98:	f001 ff28 	bl	800acec <SDMMC_CmdSendCSD>
 8008e9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ea6:	e059      	b.n	8008f5c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2100      	movs	r1, #0
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f001 fd0b 	bl	800a8ca <SDIO_GetResponse>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2104      	movs	r1, #4
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f001 fd02 	bl	800a8ca <SDIO_GetResponse>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2108      	movs	r1, #8
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f001 fcf9 	bl	800a8ca <SDIO_GetResponse>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	210c      	movs	r1, #12
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f001 fcf0 	bl	800a8ca <SDIO_GetResponse>
 8008eea:	4602      	mov	r2, r0
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2104      	movs	r1, #4
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f001 fce7 	bl	800a8ca <SDIO_GetResponse>
 8008efc:	4603      	mov	r3, r0
 8008efe:	0d1a      	lsrs	r2, r3, #20
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008f04:	f107 0310 	add.w	r3, r7, #16
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff fbc6 	bl	800869c <HAL_SD_GetCardCSD>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d002      	beq.n	8008f1c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f1a:	e01f      	b.n	8008f5c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6819      	ldr	r1, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f24:	041b      	lsls	r3, r3, #16
 8008f26:	461a      	mov	r2, r3
 8008f28:	f04f 0300 	mov.w	r3, #0
 8008f2c:	4608      	mov	r0, r1
 8008f2e:	f001 fdd7 	bl	800aae0 <SDMMC_CmdSelDesel>
 8008f32:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <SD_InitCard+0x172>
  {
    return errorstate;
 8008f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f3c:	e00e      	b.n	8008f5c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681d      	ldr	r5, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	466c      	mov	r4, sp
 8008f46:	f103 0210 	add.w	r2, r3, #16
 8008f4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f50:	3304      	adds	r3, #4
 8008f52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f54:	4628      	mov	r0, r5
 8008f56:	f001 fc1b 	bl	800a790 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3740      	adds	r7, #64	; 0x40
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bdb0      	pop	{r4, r5, r7, pc}

08008f64 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	2300      	movs	r3, #0
 8008f76:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f001 fdd2 	bl	800ab26 <SDMMC_CmdGoIdleState>
 8008f82:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <SD_PowerON+0x2a>
  {
    return errorstate;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	e072      	b.n	8009074 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f001 fde5 	bl	800ab62 <SDMMC_CmdOperCond>
 8008f98:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00d      	beq.n	8008fbc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f001 fdbb 	bl	800ab26 <SDMMC_CmdGoIdleState>
 8008fb0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d004      	beq.n	8008fc2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	e05b      	b.n	8009074 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d137      	bne.n	800903a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2100      	movs	r1, #0
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f001 fde5 	bl	800aba0 <SDMMC_CmdAppCommand>
 8008fd6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d02d      	beq.n	800903a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008fe2:	e047      	b.n	8009074 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f001 fdd8 	bl	800aba0 <SDMMC_CmdAppCommand>
 8008ff0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <SD_PowerON+0x98>
    {
      return errorstate;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	e03b      	b.n	8009074 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	491e      	ldr	r1, [pc, #120]	; (800907c <SD_PowerON+0x118>)
 8009002:	4618      	mov	r0, r3
 8009004:	f001 fdee 	bl	800abe4 <SDMMC_CmdAppOperCommand>
 8009008:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d002      	beq.n	8009016 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009010:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009014:	e02e      	b.n	8009074 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2100      	movs	r1, #0
 800901c:	4618      	mov	r0, r3
 800901e:	f001 fc54 	bl	800a8ca <SDIO_GetResponse>
 8009022:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	0fdb      	lsrs	r3, r3, #31
 8009028:	2b01      	cmp	r3, #1
 800902a:	d101      	bne.n	8009030 <SD_PowerON+0xcc>
 800902c:	2301      	movs	r3, #1
 800902e:	e000      	b.n	8009032 <SD_PowerON+0xce>
 8009030:	2300      	movs	r3, #0
 8009032:	613b      	str	r3, [r7, #16]

    count++;
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	3301      	adds	r3, #1
 8009038:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009040:	4293      	cmp	r3, r2
 8009042:	d802      	bhi.n	800904a <SD_PowerON+0xe6>
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d0cc      	beq.n	8008fe4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009050:	4293      	cmp	r3, r2
 8009052:	d902      	bls.n	800905a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009058:	e00c      	b.n	8009074 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d003      	beq.n	800906c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	645a      	str	r2, [r3, #68]	; 0x44
 800906a:	e002      	b.n	8009072 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3718      	adds	r7, #24
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	c1100000 	.word	0xc1100000

08009080 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d102      	bne.n	8009096 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009090:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009094:	e018      	b.n	80090c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800909e:	041b      	lsls	r3, r3, #16
 80090a0:	4619      	mov	r1, r3
 80090a2:	4610      	mov	r0, r2
 80090a4:	f001 fe62 	bl	800ad6c <SDMMC_CmdSendStatus>
 80090a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	e009      	b.n	80090c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2100      	movs	r1, #0
 80090ba:	4618      	mov	r0, r3
 80090bc:	f001 fc05 	bl	800a8ca <SDIO_GetResponse>
 80090c0:	4602      	mov	r2, r0
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80090d8:	2300      	movs	r3, #0
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	2300      	movs	r3, #0
 80090de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2100      	movs	r1, #0
 80090e6:	4618      	mov	r0, r3
 80090e8:	f001 fbef 	bl	800a8ca <SDIO_GetResponse>
 80090ec:	4603      	mov	r3, r0
 80090ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090f6:	d102      	bne.n	80090fe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090fc:	e02f      	b.n	800915e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80090fe:	f107 030c 	add.w	r3, r7, #12
 8009102:	4619      	mov	r1, r3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f879 	bl	80091fc <SD_FindSCR>
 800910a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	e023      	b.n	800915e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d01c      	beq.n	800915a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009128:	041b      	lsls	r3, r3, #16
 800912a:	4619      	mov	r1, r3
 800912c:	4610      	mov	r0, r2
 800912e:	f001 fd37 	bl	800aba0 <SDMMC_CmdAppCommand>
 8009132:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	e00f      	b.n	800915e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2102      	movs	r1, #2
 8009144:	4618      	mov	r0, r3
 8009146:	f001 fd70 	bl	800ac2a <SDMMC_CmdBusWidth>
 800914a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	e003      	b.n	800915e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009156:	2300      	movs	r3, #0
 8009158:	e001      	b.n	800915e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800915a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800915e:	4618      	mov	r0, r3
 8009160:	3718      	adds	r7, #24
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b086      	sub	sp, #24
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800916e:	2300      	movs	r3, #0
 8009170:	60fb      	str	r3, [r7, #12]
 8009172:	2300      	movs	r3, #0
 8009174:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2100      	movs	r1, #0
 800917c:	4618      	mov	r0, r3
 800917e:	f001 fba4 	bl	800a8ca <SDIO_GetResponse>
 8009182:	4603      	mov	r3, r0
 8009184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009188:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800918c:	d102      	bne.n	8009194 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800918e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009192:	e02f      	b.n	80091f4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009194:	f107 030c 	add.w	r3, r7, #12
 8009198:	4619      	mov	r1, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f82e 	bl	80091fc <SD_FindSCR>
 80091a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d001      	beq.n	80091ac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	e023      	b.n	80091f4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d01c      	beq.n	80091f0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091be:	041b      	lsls	r3, r3, #16
 80091c0:	4619      	mov	r1, r3
 80091c2:	4610      	mov	r0, r2
 80091c4:	f001 fcec 	bl	800aba0 <SDMMC_CmdAppCommand>
 80091c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	e00f      	b.n	80091f4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2100      	movs	r1, #0
 80091da:	4618      	mov	r0, r3
 80091dc:	f001 fd25 	bl	800ac2a <SDMMC_CmdBusWidth>
 80091e0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	e003      	b.n	80091f4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80091ec:	2300      	movs	r3, #0
 80091ee:	e001      	b.n	80091f4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80091fc:	b590      	push	{r4, r7, lr}
 80091fe:	b08f      	sub	sp, #60	; 0x3c
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009206:	f7fd f977 	bl	80064f8 <HAL_GetTick>
 800920a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009210:	2300      	movs	r3, #0
 8009212:	60bb      	str	r3, [r7, #8]
 8009214:	2300      	movs	r3, #0
 8009216:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2108      	movs	r1, #8
 8009222:	4618      	mov	r0, r3
 8009224:	f001 fb90 	bl	800a948 <SDMMC_CmdBlockLength>
 8009228:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009232:	e0b2      	b.n	800939a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800923c:	041b      	lsls	r3, r3, #16
 800923e:	4619      	mov	r1, r3
 8009240:	4610      	mov	r0, r2
 8009242:	f001 fcad 	bl	800aba0 <SDMMC_CmdAppCommand>
 8009246:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <SD_FindSCR+0x56>
  {
    return errorstate;
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	e0a3      	b.n	800939a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009252:	f04f 33ff 	mov.w	r3, #4294967295
 8009256:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009258:	2308      	movs	r3, #8
 800925a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800925c:	2330      	movs	r3, #48	; 0x30
 800925e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009260:	2302      	movs	r3, #2
 8009262:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009264:	2300      	movs	r3, #0
 8009266:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009268:	2301      	movs	r3, #1
 800926a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f107 0210 	add.w	r2, r7, #16
 8009274:	4611      	mov	r1, r2
 8009276:	4618      	mov	r0, r3
 8009278:	f001 fb3a 	bl	800a8f0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4618      	mov	r0, r3
 8009282:	f001 fcf4 	bl	800ac6e <SDMMC_CmdSendSCR>
 8009286:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928a:	2b00      	cmp	r3, #0
 800928c:	d02a      	beq.n	80092e4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009290:	e083      	b.n	800939a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00f      	beq.n	80092c0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6819      	ldr	r1, [r3, #0]
 80092a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	f107 0208 	add.w	r2, r7, #8
 80092ac:	18d4      	adds	r4, r2, r3
 80092ae:	4608      	mov	r0, r1
 80092b0:	f001 fa99 	bl	800a7e6 <SDIO_ReadFIFO>
 80092b4:	4603      	mov	r3, r0
 80092b6:	6023      	str	r3, [r4, #0]
      index++;
 80092b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ba:	3301      	adds	r3, #1
 80092bc:	637b      	str	r3, [r7, #52]	; 0x34
 80092be:	e006      	b.n	80092ce <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d012      	beq.n	80092f4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80092ce:	f7fd f913 	bl	80064f8 <HAL_GetTick>
 80092d2:	4602      	mov	r2, r0
 80092d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092dc:	d102      	bne.n	80092e4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80092de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092e2:	e05a      	b.n	800939a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ea:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0cf      	beq.n	8009292 <SD_FindSCR+0x96>
 80092f2:	e000      	b.n	80092f6 <SD_FindSCR+0xfa>
      break;
 80092f4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fc:	f003 0308 	and.w	r3, r3, #8
 8009300:	2b00      	cmp	r3, #0
 8009302:	d005      	beq.n	8009310 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2208      	movs	r2, #8
 800930a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800930c:	2308      	movs	r3, #8
 800930e:	e044      	b.n	800939a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d005      	beq.n	800932a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2202      	movs	r2, #2
 8009324:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009326:	2302      	movs	r3, #2
 8009328:	e037      	b.n	800939a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009330:	f003 0320 	and.w	r3, r3, #32
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2220      	movs	r2, #32
 800933e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009340:	2320      	movs	r3, #32
 8009342:	e02a      	b.n	800939a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f240 523a 	movw	r2, #1338	; 0x53a
 800934c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	061a      	lsls	r2, r3, #24
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	021b      	lsls	r3, r3, #8
 8009356:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800935a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	0a1b      	lsrs	r3, r3, #8
 8009360:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009364:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	0e1b      	lsrs	r3, r3, #24
 800936a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	601a      	str	r2, [r3, #0]
    scr++;
 8009370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009372:	3304      	adds	r3, #4
 8009374:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	061a      	lsls	r2, r3, #24
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	021b      	lsls	r3, r3, #8
 800937e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009382:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	0a1b      	lsrs	r3, r3, #8
 8009388:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800938c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	0e1b      	lsrs	r3, r3, #24
 8009392:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009396:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	373c      	adds	r7, #60	; 0x3c
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd90      	pop	{r4, r7, pc}

080093a2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b086      	sub	sp, #24
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ae:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d03f      	beq.n	800943c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80093bc:	2300      	movs	r3, #0
 80093be:	617b      	str	r3, [r7, #20]
 80093c0:	e033      	b.n	800942a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f001 fa0d 	bl	800a7e6 <SDIO_ReadFIFO>
 80093cc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3301      	adds	r3, #1
 80093da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	3b01      	subs	r3, #1
 80093e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	0a1b      	lsrs	r3, r3, #8
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	3301      	adds	r3, #1
 80093f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	0c1b      	lsrs	r3, r3, #16
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3301      	adds	r3, #1
 8009406:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	3b01      	subs	r3, #1
 800940c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	0e1b      	lsrs	r3, r3, #24
 8009412:	b2da      	uxtb	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	3301      	adds	r3, #1
 800941c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	3b01      	subs	r3, #1
 8009422:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	3301      	adds	r3, #1
 8009428:	617b      	str	r3, [r7, #20]
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2b07      	cmp	r3, #7
 800942e:	d9c8      	bls.n	80093c2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800943c:	bf00      	nop
 800943e:	3718      	adds	r7, #24
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a1b      	ldr	r3, [r3, #32]
 8009450:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009456:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d043      	beq.n	80094e6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800945e:	2300      	movs	r3, #0
 8009460:	617b      	str	r3, [r7, #20]
 8009462:	e037      	b.n	80094d4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	60bb      	str	r3, [r7, #8]
      tmp++;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3301      	adds	r3, #1
 800946e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	3b01      	subs	r3, #1
 8009474:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	021a      	lsls	r2, r3, #8
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	4313      	orrs	r3, r2
 8009480:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3301      	adds	r3, #1
 8009486:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	3b01      	subs	r3, #1
 800948c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	041a      	lsls	r2, r3, #16
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	4313      	orrs	r3, r2
 8009498:	60bb      	str	r3, [r7, #8]
      tmp++;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3301      	adds	r3, #1
 800949e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	3b01      	subs	r3, #1
 80094a4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	061a      	lsls	r2, r3, #24
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3301      	adds	r3, #1
 80094b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	3b01      	subs	r3, #1
 80094bc:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f107 0208 	add.w	r2, r7, #8
 80094c6:	4611      	mov	r1, r2
 80094c8:	4618      	mov	r0, r3
 80094ca:	f001 f999 	bl	800a800 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	3301      	adds	r3, #1
 80094d2:	617b      	str	r3, [r7, #20]
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	2b07      	cmp	r3, #7
 80094d8:	d9c4      	bls.n	8009464 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80094e6:	bf00      	nop
 80094e8:	3718      	adds	r7, #24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b082      	sub	sp, #8
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e03f      	b.n	8009580 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b00      	cmp	r3, #0
 800950a:	d106      	bne.n	800951a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7f8 fd03 	bl	8001f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2224      	movs	r2, #36	; 0x24
 800951e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68da      	ldr	r2, [r3, #12]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009530:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 ff64 	bl	800a400 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691a      	ldr	r2, [r3, #16]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009546:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	695a      	ldr	r2, [r3, #20]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009556:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68da      	ldr	r2, [r3, #12]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009566:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2220      	movs	r2, #32
 8009572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2220      	movs	r2, #32
 800957a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e021      	b.n	80095de <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2224      	movs	r2, #36	; 0x24
 800959e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68da      	ldr	r2, [r3, #12]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095b0:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7f8 fd6a 	bl	800208c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
	...

080095e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08c      	sub	sp, #48	; 0x30
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	4613      	mov	r3, r2
 80095f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b20      	cmp	r3, #32
 8009600:	d165      	bne.n	80096ce <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <HAL_UART_Transmit_DMA+0x26>
 8009608:	88fb      	ldrh	r3, [r7, #6]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e05e      	b.n	80096d0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009618:	2b01      	cmp	r3, #1
 800961a:	d101      	bne.n	8009620 <HAL_UART_Transmit_DMA+0x38>
 800961c:	2302      	movs	r3, #2
 800961e:	e057      	b.n	80096d0 <HAL_UART_Transmit_DMA+0xe8>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	88fa      	ldrh	r2, [r7, #6]
 8009632:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	88fa      	ldrh	r2, [r7, #6]
 8009638:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2221      	movs	r2, #33	; 0x21
 8009644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800964c:	4a22      	ldr	r2, [pc, #136]	; (80096d8 <HAL_UART_Transmit_DMA+0xf0>)
 800964e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009654:	4a21      	ldr	r2, [pc, #132]	; (80096dc <HAL_UART_Transmit_DMA+0xf4>)
 8009656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965c:	4a20      	ldr	r2, [pc, #128]	; (80096e0 <HAL_UART_Transmit_DMA+0xf8>)
 800965e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009664:	2200      	movs	r2, #0
 8009666:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8009668:	f107 0308 	add.w	r3, r7, #8
 800966c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009674:	6819      	ldr	r1, [r3, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3304      	adds	r3, #4
 800967c:	461a      	mov	r2, r3
 800967e:	88fb      	ldrh	r3, [r7, #6]
 8009680:	f7fd f9ba 	bl	80069f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800968c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3314      	adds	r3, #20
 800969c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	e853 3f00 	ldrex	r3, [r3]
 80096a4:	617b      	str	r3, [r7, #20]
   return(result);
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3314      	adds	r3, #20
 80096b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096b6:	627a      	str	r2, [r7, #36]	; 0x24
 80096b8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ba:	6a39      	ldr	r1, [r7, #32]
 80096bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096be:	e841 2300 	strex	r3, r2, [r1]
 80096c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1e5      	bne.n	8009696 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	e000      	b.n	80096d0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80096ce:	2302      	movs	r3, #2
  }
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3730      	adds	r7, #48	; 0x30
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	08009ca1 	.word	0x08009ca1
 80096dc:	08009d3b 	.word	0x08009d3b
 80096e0:	08009eb3 	.word	0x08009eb3

080096e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	4613      	mov	r3, r2
 80096f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b20      	cmp	r3, #32
 80096fc:	d11d      	bne.n	800973a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <HAL_UART_Receive_DMA+0x26>
 8009704:	88fb      	ldrh	r3, [r7, #6]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e016      	b.n	800973c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009714:	2b01      	cmp	r3, #1
 8009716:	d101      	bne.n	800971c <HAL_UART_Receive_DMA+0x38>
 8009718:	2302      	movs	r3, #2
 800971a:	e00f      	b.n	800973c <HAL_UART_Receive_DMA+0x58>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800972a:	88fb      	ldrh	r3, [r7, #6]
 800972c:	461a      	mov	r2, r3
 800972e:	68b9      	ldr	r1, [r7, #8]
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f000 fc09 	bl	8009f48 <UART_Start_Receive_DMA>
 8009736:	4603      	mov	r3, r0
 8009738:	e000      	b.n	800973c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800973a:	2302      	movs	r3, #2
  }
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b0ba      	sub	sp, #232	; 0xe8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800976a:	2300      	movs	r3, #0
 800976c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009770:	2300      	movs	r3, #0
 8009772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800977a:	f003 030f 	and.w	r3, r3, #15
 800977e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10f      	bne.n	80097aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800978a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800978e:	f003 0320 	and.w	r3, r3, #32
 8009792:	2b00      	cmp	r3, #0
 8009794:	d009      	beq.n	80097aa <HAL_UART_IRQHandler+0x66>
 8009796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800979a:	f003 0320 	and.w	r3, r3, #32
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fd71 	bl	800a28a <UART_Receive_IT>
      return;
 80097a8:	e256      	b.n	8009c58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80097aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 80de 	beq.w	8009970 <HAL_UART_IRQHandler+0x22c>
 80097b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097b8:	f003 0301 	and.w	r3, r3, #1
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d106      	bne.n	80097ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80097c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 80d1 	beq.w	8009970 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80097ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00b      	beq.n	80097f2 <HAL_UART_IRQHandler+0xae>
 80097da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d005      	beq.n	80097f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ea:	f043 0201 	orr.w	r2, r3, #1
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00b      	beq.n	8009816 <HAL_UART_IRQHandler+0xd2>
 80097fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	2b00      	cmp	r3, #0
 8009808:	d005      	beq.n	8009816 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980e:	f043 0202 	orr.w	r2, r3, #2
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800981a:	f003 0302 	and.w	r3, r3, #2
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00b      	beq.n	800983a <HAL_UART_IRQHandler+0xf6>
 8009822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	2b00      	cmp	r3, #0
 800982c:	d005      	beq.n	800983a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009832:	f043 0204 	orr.w	r2, r3, #4
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800983a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800983e:	f003 0308 	and.w	r3, r3, #8
 8009842:	2b00      	cmp	r3, #0
 8009844:	d011      	beq.n	800986a <HAL_UART_IRQHandler+0x126>
 8009846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800984a:	f003 0320 	and.w	r3, r3, #32
 800984e:	2b00      	cmp	r3, #0
 8009850:	d105      	bne.n	800985e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	2b00      	cmp	r3, #0
 800985c:	d005      	beq.n	800986a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009862:	f043 0208 	orr.w	r2, r3, #8
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 81ed 	beq.w	8009c4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009878:	f003 0320 	and.w	r3, r3, #32
 800987c:	2b00      	cmp	r3, #0
 800987e:	d008      	beq.n	8009892 <HAL_UART_IRQHandler+0x14e>
 8009880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009884:	f003 0320 	and.w	r3, r3, #32
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fcfc 	bl	800a28a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800989c:	2b40      	cmp	r3, #64	; 0x40
 800989e:	bf0c      	ite	eq
 80098a0:	2301      	moveq	r3, #1
 80098a2:	2300      	movne	r3, #0
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ae:	f003 0308 	and.w	r3, r3, #8
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d103      	bne.n	80098be <HAL_UART_IRQHandler+0x17a>
 80098b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d04f      	beq.n	800995e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fc04 	bl	800a0cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ce:	2b40      	cmp	r3, #64	; 0x40
 80098d0:	d141      	bne.n	8009956 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3314      	adds	r3, #20
 80098d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098e0:	e853 3f00 	ldrex	r3, [r3]
 80098e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80098e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3314      	adds	r3, #20
 80098fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80098fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009906:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800990a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1d9      	bne.n	80098d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009922:	2b00      	cmp	r3, #0
 8009924:	d013      	beq.n	800994e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992a:	4a7d      	ldr	r2, [pc, #500]	; (8009b20 <HAL_UART_IRQHandler+0x3dc>)
 800992c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009932:	4618      	mov	r0, r3
 8009934:	f7fd f928 	bl	8006b88 <HAL_DMA_Abort_IT>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d016      	beq.n	800996c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009948:	4610      	mov	r0, r2
 800994a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800994c:	e00e      	b.n	800996c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7f8 fac8 	bl	8001ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009954:	e00a      	b.n	800996c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7f8 fac4 	bl	8001ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800995c:	e006      	b.n	800996c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7f8 fac0 	bl	8001ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800996a:	e170      	b.n	8009c4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800996c:	bf00      	nop
    return;
 800996e:	e16e      	b.n	8009c4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009974:	2b01      	cmp	r3, #1
 8009976:	f040 814a 	bne.w	8009c0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800997a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800997e:	f003 0310 	and.w	r3, r3, #16
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 8143 	beq.w	8009c0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800998c:	f003 0310 	and.w	r3, r3, #16
 8009990:	2b00      	cmp	r3, #0
 8009992:	f000 813c 	beq.w	8009c0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009996:	2300      	movs	r3, #0
 8009998:	60bb      	str	r3, [r7, #8]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	60bb      	str	r3, [r7, #8]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	60bb      	str	r3, [r7, #8]
 80099aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b6:	2b40      	cmp	r3, #64	; 0x40
 80099b8:	f040 80b4 	bne.w	8009b24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f000 8140 	beq.w	8009c52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80099d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099da:	429a      	cmp	r2, r3
 80099dc:	f080 8139 	bcs.w	8009c52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ec:	69db      	ldr	r3, [r3, #28]
 80099ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099f2:	f000 8088 	beq.w	8009b06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	330c      	adds	r3, #12
 80099fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a04:	e853 3f00 	ldrex	r3, [r3]
 8009a08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	330c      	adds	r3, #12
 8009a1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009a22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009a2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a32:	e841 2300 	strex	r3, r2, [r1]
 8009a36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1d9      	bne.n	80099f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	3314      	adds	r3, #20
 8009a48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a4c:	e853 3f00 	ldrex	r3, [r3]
 8009a50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a54:	f023 0301 	bic.w	r3, r3, #1
 8009a58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3314      	adds	r3, #20
 8009a62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a72:	e841 2300 	strex	r3, r2, [r1]
 8009a76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1e1      	bne.n	8009a42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3314      	adds	r3, #20
 8009a84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a88:	e853 3f00 	ldrex	r3, [r3]
 8009a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	3314      	adds	r3, #20
 8009a9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009aa2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009aa4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009aa8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009aaa:	e841 2300 	strex	r3, r2, [r1]
 8009aae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1e3      	bne.n	8009a7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2220      	movs	r2, #32
 8009aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	330c      	adds	r3, #12
 8009aca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ace:	e853 3f00 	ldrex	r3, [r3]
 8009ad2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ad6:	f023 0310 	bic.w	r3, r3, #16
 8009ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	330c      	adds	r3, #12
 8009ae4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009ae8:	65ba      	str	r2, [r7, #88]	; 0x58
 8009aea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009aee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009af0:	e841 2300 	strex	r3, r2, [r1]
 8009af4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1e3      	bne.n	8009ac4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fc ffd1 	bl	8006aa8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f8b6 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009b1c:	e099      	b.n	8009c52 <HAL_UART_IRQHandler+0x50e>
 8009b1e:	bf00      	nop
 8009b20:	0800a193 	.word	0x0800a193
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	f000 808b 	beq.w	8009c56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f000 8086 	beq.w	8009c56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	330c      	adds	r3, #12
 8009b50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	330c      	adds	r3, #12
 8009b6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009b6e:	647a      	str	r2, [r7, #68]	; 0x44
 8009b70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b76:	e841 2300 	strex	r3, r2, [r1]
 8009b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1e3      	bne.n	8009b4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	3314      	adds	r3, #20
 8009b88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	e853 3f00 	ldrex	r3, [r3]
 8009b90:	623b      	str	r3, [r7, #32]
   return(result);
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	f023 0301 	bic.w	r3, r3, #1
 8009b98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3314      	adds	r3, #20
 8009ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009ba6:	633a      	str	r2, [r7, #48]	; 0x30
 8009ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bae:	e841 2300 	strex	r3, r2, [r1]
 8009bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1e3      	bne.n	8009b82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	330c      	adds	r3, #12
 8009bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	e853 3f00 	ldrex	r3, [r3]
 8009bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f023 0310 	bic.w	r3, r3, #16
 8009bde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	330c      	adds	r3, #12
 8009be8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009bec:	61fa      	str	r2, [r7, #28]
 8009bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf0:	69b9      	ldr	r1, [r7, #24]
 8009bf2:	69fa      	ldr	r2, [r7, #28]
 8009bf4:	e841 2300 	strex	r3, r2, [r1]
 8009bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1e3      	bne.n	8009bc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f83e 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c0c:	e023      	b.n	8009c56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d009      	beq.n	8009c2e <HAL_UART_IRQHandler+0x4ea>
 8009c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fac7 	bl	800a1ba <UART_Transmit_IT>
    return;
 8009c2c:	e014      	b.n	8009c58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00e      	beq.n	8009c58 <HAL_UART_IRQHandler+0x514>
 8009c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d008      	beq.n	8009c58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fb07 	bl	800a25a <UART_EndTransmit_IT>
    return;
 8009c4c:	e004      	b.n	8009c58 <HAL_UART_IRQHandler+0x514>
    return;
 8009c4e:	bf00      	nop
 8009c50:	e002      	b.n	8009c58 <HAL_UART_IRQHandler+0x514>
      return;
 8009c52:	bf00      	nop
 8009c54:	e000      	b.n	8009c58 <HAL_UART_IRQHandler+0x514>
      return;
 8009c56:	bf00      	nop
  }
}
 8009c58:	37e8      	adds	r7, #232	; 0xe8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop

08009c60 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b090      	sub	sp, #64	; 0x40
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d137      	bne.n	8009d2c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3314      	adds	r3, #20
 8009cc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	e853 3f00 	ldrex	r3, [r3]
 8009cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8009cd2:	6a3b      	ldr	r3, [r7, #32]
 8009cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3314      	adds	r3, #20
 8009ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ce2:	633a      	str	r2, [r7, #48]	; 0x30
 8009ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cea:	e841 2300 	strex	r3, r2, [r1]
 8009cee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1e5      	bne.n	8009cc2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	330c      	adds	r3, #12
 8009cfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	e853 3f00 	ldrex	r3, [r3]
 8009d04:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	330c      	adds	r3, #12
 8009d14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d16:	61fa      	str	r2, [r7, #28]
 8009d18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1a:	69b9      	ldr	r1, [r7, #24]
 8009d1c:	69fa      	ldr	r2, [r7, #28]
 8009d1e:	e841 2300 	strex	r3, r2, [r1]
 8009d22:	617b      	str	r3, [r7, #20]
   return(result);
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1e5      	bne.n	8009cf6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d2a:	e002      	b.n	8009d32 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009d2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009d2e:	f7f8 f8ed 	bl	8001f0c <HAL_UART_TxCpltCallback>
}
 8009d32:	bf00      	nop
 8009d34:	3740      	adds	r7, #64	; 0x40
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d46:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f7ff ff89 	bl	8009c60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d4e:	bf00      	nop
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b09c      	sub	sp, #112	; 0x70
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d62:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d172      	bne.n	8009e58 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d74:	2200      	movs	r2, #0
 8009d76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	330c      	adds	r3, #12
 8009d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d82:	e853 3f00 	ldrex	r3, [r3]
 8009d86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	330c      	adds	r3, #12
 8009d96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d98:	65ba      	str	r2, [r7, #88]	; 0x58
 8009d9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009da0:	e841 2300 	strex	r3, r2, [r1]
 8009da4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1e5      	bne.n	8009d78 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3314      	adds	r3, #20
 8009db2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db6:	e853 3f00 	ldrex	r3, [r3]
 8009dba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dbe:	f023 0301 	bic.w	r3, r3, #1
 8009dc2:	667b      	str	r3, [r7, #100]	; 0x64
 8009dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	3314      	adds	r3, #20
 8009dca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009dcc:	647a      	str	r2, [r7, #68]	; 0x44
 8009dce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dd4:	e841 2300 	strex	r3, r2, [r1]
 8009dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1e5      	bne.n	8009dac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	3314      	adds	r3, #20
 8009de6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	e853 3f00 	ldrex	r3, [r3]
 8009dee:	623b      	str	r3, [r7, #32]
   return(result);
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009df6:	663b      	str	r3, [r7, #96]	; 0x60
 8009df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3314      	adds	r3, #20
 8009dfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e00:	633a      	str	r2, [r7, #48]	; 0x30
 8009e02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e08:	e841 2300 	strex	r3, r2, [r1]
 8009e0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1e5      	bne.n	8009de0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e16:	2220      	movs	r2, #32
 8009e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d119      	bne.n	8009e58 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	330c      	adds	r3, #12
 8009e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	e853 3f00 	ldrex	r3, [r3]
 8009e32:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f023 0310 	bic.w	r3, r3, #16
 8009e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	330c      	adds	r3, #12
 8009e42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e44:	61fa      	str	r2, [r7, #28]
 8009e46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e48:	69b9      	ldr	r1, [r7, #24]
 8009e4a:	69fa      	ldr	r2, [r7, #28]
 8009e4c:	e841 2300 	strex	r3, r2, [r1]
 8009e50:	617b      	str	r3, [r7, #20]
   return(result);
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1e5      	bne.n	8009e24 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d106      	bne.n	8009e6e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e64:	4619      	mov	r1, r3
 8009e66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009e68:	f7ff ff0e 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e6c:	e002      	b.n	8009e74 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009e6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009e70:	f7f8 f842 	bl	8001ef8 <HAL_UART_RxCpltCallback>
}
 8009e74:	bf00      	nop
 8009e76:	3770      	adds	r7, #112	; 0x70
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e88:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d108      	bne.n	8009ea4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e96:	085b      	lsrs	r3, r3, #1
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f7ff fef3 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ea2:	e002      	b.n	8009eaa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f7ff fee5 	bl	8009c74 <HAL_UART_RxHalfCpltCallback>
}
 8009eaa:	bf00      	nop
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b084      	sub	sp, #16
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ece:	2b80      	cmp	r3, #128	; 0x80
 8009ed0:	bf0c      	ite	eq
 8009ed2:	2301      	moveq	r3, #1
 8009ed4:	2300      	movne	r3, #0
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	2b21      	cmp	r3, #33	; 0x21
 8009ee4:	d108      	bne.n	8009ef8 <UART_DMAError+0x46>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d005      	beq.n	8009ef8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009ef2:	68b8      	ldr	r0, [r7, #8]
 8009ef4:	f000 f8c2 	bl	800a07c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	695b      	ldr	r3, [r3, #20]
 8009efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f02:	2b40      	cmp	r3, #64	; 0x40
 8009f04:	bf0c      	ite	eq
 8009f06:	2301      	moveq	r3, #1
 8009f08:	2300      	movne	r3, #0
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b22      	cmp	r3, #34	; 0x22
 8009f18:	d108      	bne.n	8009f2c <UART_DMAError+0x7a>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d005      	beq.n	8009f2c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2200      	movs	r2, #0
 8009f24:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009f26:	68b8      	ldr	r0, [r7, #8]
 8009f28:	f000 f8d0 	bl	800a0cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f30:	f043 0210 	orr.w	r2, r3, #16
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f38:	68b8      	ldr	r0, [r7, #8]
 8009f3a:	f7f7 ffd3 	bl	8001ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f3e:	bf00      	nop
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b098      	sub	sp, #96	; 0x60
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	4613      	mov	r3, r2
 8009f54:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	88fa      	ldrh	r2, [r7, #6]
 8009f60:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2222      	movs	r2, #34	; 0x22
 8009f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f74:	4a3e      	ldr	r2, [pc, #248]	; (800a070 <UART_Start_Receive_DMA+0x128>)
 8009f76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7c:	4a3d      	ldr	r2, [pc, #244]	; (800a074 <UART_Start_Receive_DMA+0x12c>)
 8009f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f84:	4a3c      	ldr	r2, [pc, #240]	; (800a078 <UART_Start_Receive_DMA+0x130>)
 8009f86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009f90:	f107 0308 	add.w	r3, r7, #8
 8009f94:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	88fb      	ldrh	r3, [r7, #6]
 8009fa8:	f7fc fd26 	bl	80069f8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009fac:	2300      	movs	r3, #0
 8009fae:	613b      	str	r3, [r7, #16]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	613b      	str	r3, [r7, #16]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	613b      	str	r3, [r7, #16]
 8009fc0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	330c      	adds	r3, #12
 8009fd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fd4:	e853 3f00 	ldrex	r3, [r3]
 8009fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fe0:	65bb      	str	r3, [r7, #88]	; 0x58
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	330c      	adds	r3, #12
 8009fe8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009fea:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009fec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009ff0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ff2:	e841 2300 	strex	r3, r2, [r1]
 8009ff6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1e5      	bne.n	8009fca <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3314      	adds	r3, #20
 800a004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a008:	e853 3f00 	ldrex	r3, [r3]
 800a00c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a010:	f043 0301 	orr.w	r3, r3, #1
 800a014:	657b      	str	r3, [r7, #84]	; 0x54
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3314      	adds	r3, #20
 800a01c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a01e:	63ba      	str	r2, [r7, #56]	; 0x38
 800a020:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a022:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a026:	e841 2300 	strex	r3, r2, [r1]
 800a02a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1e5      	bne.n	8009ffe <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	3314      	adds	r3, #20
 800a038:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	e853 3f00 	ldrex	r3, [r3]
 800a040:	617b      	str	r3, [r7, #20]
   return(result);
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a048:	653b      	str	r3, [r7, #80]	; 0x50
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3314      	adds	r3, #20
 800a050:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a052:	627a      	str	r2, [r7, #36]	; 0x24
 800a054:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a056:	6a39      	ldr	r1, [r7, #32]
 800a058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05a:	e841 2300 	strex	r3, r2, [r1]
 800a05e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1e5      	bne.n	800a032 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3760      	adds	r7, #96	; 0x60
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	08009d57 	.word	0x08009d57
 800a074:	08009e7d 	.word	0x08009e7d
 800a078:	08009eb3 	.word	0x08009eb3

0800a07c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b089      	sub	sp, #36	; 0x24
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	330c      	adds	r3, #12
 800a08a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	e853 3f00 	ldrex	r3, [r3]
 800a092:	60bb      	str	r3, [r7, #8]
   return(result);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a09a:	61fb      	str	r3, [r7, #28]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	330c      	adds	r3, #12
 800a0a2:	69fa      	ldr	r2, [r7, #28]
 800a0a4:	61ba      	str	r2, [r7, #24]
 800a0a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a8:	6979      	ldr	r1, [r7, #20]
 800a0aa:	69ba      	ldr	r2, [r7, #24]
 800a0ac:	e841 2300 	strex	r3, r2, [r1]
 800a0b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1e5      	bne.n	800a084 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2220      	movs	r2, #32
 800a0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a0c0:	bf00      	nop
 800a0c2:	3724      	adds	r7, #36	; 0x24
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b095      	sub	sp, #84	; 0x54
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	330c      	adds	r3, #12
 800a0da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0de:	e853 3f00 	ldrex	r3, [r3]
 800a0e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	330c      	adds	r3, #12
 800a0f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0f4:	643a      	str	r2, [r7, #64]	; 0x40
 800a0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0fc:	e841 2300 	strex	r3, r2, [r1]
 800a100:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e5      	bne.n	800a0d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3314      	adds	r3, #20
 800a10e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a110:	6a3b      	ldr	r3, [r7, #32]
 800a112:	e853 3f00 	ldrex	r3, [r3]
 800a116:	61fb      	str	r3, [r7, #28]
   return(result);
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	f023 0301 	bic.w	r3, r3, #1
 800a11e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3314      	adds	r3, #20
 800a126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a12a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a12e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a130:	e841 2300 	strex	r3, r2, [r1]
 800a134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1e5      	bne.n	800a108 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a140:	2b01      	cmp	r3, #1
 800a142:	d119      	bne.n	800a178 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	330c      	adds	r3, #12
 800a14a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	e853 3f00 	ldrex	r3, [r3]
 800a152:	60bb      	str	r3, [r7, #8]
   return(result);
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	f023 0310 	bic.w	r3, r3, #16
 800a15a:	647b      	str	r3, [r7, #68]	; 0x44
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	330c      	adds	r3, #12
 800a162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a164:	61ba      	str	r2, [r7, #24]
 800a166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a168:	6979      	ldr	r1, [r7, #20]
 800a16a:	69ba      	ldr	r2, [r7, #24]
 800a16c:	e841 2300 	strex	r3, r2, [r1]
 800a170:	613b      	str	r3, [r7, #16]
   return(result);
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1e5      	bne.n	800a144 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2220      	movs	r2, #32
 800a17c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a186:	bf00      	nop
 800a188:	3754      	adds	r7, #84	; 0x54
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b084      	sub	sp, #16
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f7f7 fe99 	bl	8001ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1b2:	bf00      	nop
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b085      	sub	sp, #20
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b21      	cmp	r3, #33	; 0x21
 800a1cc:	d13e      	bne.n	800a24c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1d6:	d114      	bne.n	800a202 <UART_Transmit_IT+0x48>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d110      	bne.n	800a202 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	881b      	ldrh	r3, [r3, #0]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	1c9a      	adds	r2, r3, #2
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	621a      	str	r2, [r3, #32]
 800a200:	e008      	b.n	800a214 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	1c59      	adds	r1, r3, #1
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	6211      	str	r1, [r2, #32]
 800a20c:	781a      	ldrb	r2, [r3, #0]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a218:	b29b      	uxth	r3, r3
 800a21a:	3b01      	subs	r3, #1
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	4619      	mov	r1, r3
 800a222:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10f      	bne.n	800a248 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68da      	ldr	r2, [r3, #12]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a236:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68da      	ldr	r2, [r3, #12]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a246:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a248:	2300      	movs	r3, #0
 800a24a:	e000      	b.n	800a24e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a24c:	2302      	movs	r3, #2
  }
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b082      	sub	sp, #8
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68da      	ldr	r2, [r3, #12]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a270:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2220      	movs	r2, #32
 800a276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7f7 fe46 	bl	8001f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3708      	adds	r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b08c      	sub	sp, #48	; 0x30
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	2b22      	cmp	r3, #34	; 0x22
 800a29c:	f040 80ab 	bne.w	800a3f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2a8:	d117      	bne.n	800a2da <UART_Receive_IT+0x50>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d113      	bne.n	800a2da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d2:	1c9a      	adds	r2, r3, #2
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	629a      	str	r2, [r3, #40]	; 0x28
 800a2d8:	e026      	b.n	800a328 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2ec:	d007      	beq.n	800a2fe <UART_Receive_IT+0x74>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10a      	bne.n	800a30c <UART_Receive_IT+0x82>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d106      	bne.n	800a30c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	b2da      	uxtb	r2, r3
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	701a      	strb	r2, [r3, #0]
 800a30a:	e008      	b.n	800a31e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	b2db      	uxtb	r3, r3
 800a314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	3b01      	subs	r3, #1
 800a330:	b29b      	uxth	r3, r3
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	4619      	mov	r1, r3
 800a336:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d15a      	bne.n	800a3f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68da      	ldr	r2, [r3, #12]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f022 0220 	bic.w	r2, r2, #32
 800a34a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68da      	ldr	r2, [r3, #12]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a35a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	695a      	ldr	r2, [r3, #20]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f022 0201 	bic.w	r2, r2, #1
 800a36a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2220      	movs	r2, #32
 800a370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d135      	bne.n	800a3e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	330c      	adds	r3, #12
 800a388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	e853 3f00 	ldrex	r3, [r3]
 800a390:	613b      	str	r3, [r7, #16]
   return(result);
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	f023 0310 	bic.w	r3, r3, #16
 800a398:	627b      	str	r3, [r7, #36]	; 0x24
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	330c      	adds	r3, #12
 800a3a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3a2:	623a      	str	r2, [r7, #32]
 800a3a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a6:	69f9      	ldr	r1, [r7, #28]
 800a3a8:	6a3a      	ldr	r2, [r7, #32]
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e5      	bne.n	800a382 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0310 	and.w	r3, r3, #16
 800a3c0:	2b10      	cmp	r3, #16
 800a3c2:	d10a      	bne.n	800a3da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	60fb      	str	r3, [r7, #12]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	60fb      	str	r3, [r7, #12]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	60fb      	str	r3, [r7, #12]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3de:	4619      	mov	r1, r3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7ff fc51 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
 800a3e6:	e002      	b.n	800a3ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7f7 fd85 	bl	8001ef8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	e002      	b.n	800a3f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	e000      	b.n	800a3f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a3f6:	2302      	movs	r3, #2
  }
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3730      	adds	r7, #48	; 0x30
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	b09f      	sub	sp, #124	; 0x7c
 800a406:	af00      	add	r7, sp, #0
 800a408:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a40a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a416:	68d9      	ldr	r1, [r3, #12]
 800a418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	ea40 0301 	orr.w	r3, r0, r1
 800a420:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a424:	689a      	ldr	r2, [r3, #8]
 800a426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	431a      	orrs	r2, r3
 800a42c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a42e:	695b      	ldr	r3, [r3, #20]
 800a430:	431a      	orrs	r2, r3
 800a432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a434:	69db      	ldr	r3, [r3, #28]
 800a436:	4313      	orrs	r3, r2
 800a438:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a43a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a444:	f021 010c 	bic.w	r1, r1, #12
 800a448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a44e:	430b      	orrs	r3, r1
 800a450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a45c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a45e:	6999      	ldr	r1, [r3, #24]
 800a460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	ea40 0301 	orr.w	r3, r0, r1
 800a468:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a46a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	4bc5      	ldr	r3, [pc, #788]	; (800a784 <UART_SetConfig+0x384>)
 800a470:	429a      	cmp	r2, r3
 800a472:	d004      	beq.n	800a47e <UART_SetConfig+0x7e>
 800a474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	4bc3      	ldr	r3, [pc, #780]	; (800a788 <UART_SetConfig+0x388>)
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d103      	bne.n	800a486 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a47e:	f7fd fce9 	bl	8007e54 <HAL_RCC_GetPCLK2Freq>
 800a482:	6778      	str	r0, [r7, #116]	; 0x74
 800a484:	e002      	b.n	800a48c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a486:	f7fd fcd1 	bl	8007e2c <HAL_RCC_GetPCLK1Freq>
 800a48a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a48c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a48e:	69db      	ldr	r3, [r3, #28]
 800a490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a494:	f040 80b6 	bne.w	800a604 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a49a:	461c      	mov	r4, r3
 800a49c:	f04f 0500 	mov.w	r5, #0
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	462b      	mov	r3, r5
 800a4a4:	1891      	adds	r1, r2, r2
 800a4a6:	6439      	str	r1, [r7, #64]	; 0x40
 800a4a8:	415b      	adcs	r3, r3
 800a4aa:	647b      	str	r3, [r7, #68]	; 0x44
 800a4ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a4b0:	1912      	adds	r2, r2, r4
 800a4b2:	eb45 0303 	adc.w	r3, r5, r3
 800a4b6:	f04f 0000 	mov.w	r0, #0
 800a4ba:	f04f 0100 	mov.w	r1, #0
 800a4be:	00d9      	lsls	r1, r3, #3
 800a4c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a4c4:	00d0      	lsls	r0, r2, #3
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	1911      	adds	r1, r2, r4
 800a4cc:	6639      	str	r1, [r7, #96]	; 0x60
 800a4ce:	416b      	adcs	r3, r5
 800a4d0:	667b      	str	r3, [r7, #100]	; 0x64
 800a4d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	f04f 0300 	mov.w	r3, #0
 800a4dc:	1891      	adds	r1, r2, r2
 800a4de:	63b9      	str	r1, [r7, #56]	; 0x38
 800a4e0:	415b      	adcs	r3, r3
 800a4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a4e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a4ec:	f7f5 fec8 	bl	8000280 <__aeabi_uldivmod>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	4ba5      	ldr	r3, [pc, #660]	; (800a78c <UART_SetConfig+0x38c>)
 800a4f6:	fba3 2302 	umull	r2, r3, r3, r2
 800a4fa:	095b      	lsrs	r3, r3, #5
 800a4fc:	011e      	lsls	r6, r3, #4
 800a4fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a500:	461c      	mov	r4, r3
 800a502:	f04f 0500 	mov.w	r5, #0
 800a506:	4622      	mov	r2, r4
 800a508:	462b      	mov	r3, r5
 800a50a:	1891      	adds	r1, r2, r2
 800a50c:	6339      	str	r1, [r7, #48]	; 0x30
 800a50e:	415b      	adcs	r3, r3
 800a510:	637b      	str	r3, [r7, #52]	; 0x34
 800a512:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a516:	1912      	adds	r2, r2, r4
 800a518:	eb45 0303 	adc.w	r3, r5, r3
 800a51c:	f04f 0000 	mov.w	r0, #0
 800a520:	f04f 0100 	mov.w	r1, #0
 800a524:	00d9      	lsls	r1, r3, #3
 800a526:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a52a:	00d0      	lsls	r0, r2, #3
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	1911      	adds	r1, r2, r4
 800a532:	65b9      	str	r1, [r7, #88]	; 0x58
 800a534:	416b      	adcs	r3, r5
 800a536:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	461a      	mov	r2, r3
 800a53e:	f04f 0300 	mov.w	r3, #0
 800a542:	1891      	adds	r1, r2, r2
 800a544:	62b9      	str	r1, [r7, #40]	; 0x28
 800a546:	415b      	adcs	r3, r3
 800a548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a54a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a54e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a552:	f7f5 fe95 	bl	8000280 <__aeabi_uldivmod>
 800a556:	4602      	mov	r2, r0
 800a558:	460b      	mov	r3, r1
 800a55a:	4b8c      	ldr	r3, [pc, #560]	; (800a78c <UART_SetConfig+0x38c>)
 800a55c:	fba3 1302 	umull	r1, r3, r3, r2
 800a560:	095b      	lsrs	r3, r3, #5
 800a562:	2164      	movs	r1, #100	; 0x64
 800a564:	fb01 f303 	mul.w	r3, r1, r3
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	00db      	lsls	r3, r3, #3
 800a56c:	3332      	adds	r3, #50	; 0x32
 800a56e:	4a87      	ldr	r2, [pc, #540]	; (800a78c <UART_SetConfig+0x38c>)
 800a570:	fba2 2303 	umull	r2, r3, r2, r3
 800a574:	095b      	lsrs	r3, r3, #5
 800a576:	005b      	lsls	r3, r3, #1
 800a578:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a57c:	441e      	add	r6, r3
 800a57e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a580:	4618      	mov	r0, r3
 800a582:	f04f 0100 	mov.w	r1, #0
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	1894      	adds	r4, r2, r2
 800a58c:	623c      	str	r4, [r7, #32]
 800a58e:	415b      	adcs	r3, r3
 800a590:	627b      	str	r3, [r7, #36]	; 0x24
 800a592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a596:	1812      	adds	r2, r2, r0
 800a598:	eb41 0303 	adc.w	r3, r1, r3
 800a59c:	f04f 0400 	mov.w	r4, #0
 800a5a0:	f04f 0500 	mov.w	r5, #0
 800a5a4:	00dd      	lsls	r5, r3, #3
 800a5a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a5aa:	00d4      	lsls	r4, r2, #3
 800a5ac:	4622      	mov	r2, r4
 800a5ae:	462b      	mov	r3, r5
 800a5b0:	1814      	adds	r4, r2, r0
 800a5b2:	653c      	str	r4, [r7, #80]	; 0x50
 800a5b4:	414b      	adcs	r3, r1
 800a5b6:	657b      	str	r3, [r7, #84]	; 0x54
 800a5b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	f04f 0300 	mov.w	r3, #0
 800a5c2:	1891      	adds	r1, r2, r2
 800a5c4:	61b9      	str	r1, [r7, #24]
 800a5c6:	415b      	adcs	r3, r3
 800a5c8:	61fb      	str	r3, [r7, #28]
 800a5ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a5ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a5d2:	f7f5 fe55 	bl	8000280 <__aeabi_uldivmod>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4b6c      	ldr	r3, [pc, #432]	; (800a78c <UART_SetConfig+0x38c>)
 800a5dc:	fba3 1302 	umull	r1, r3, r3, r2
 800a5e0:	095b      	lsrs	r3, r3, #5
 800a5e2:	2164      	movs	r1, #100	; 0x64
 800a5e4:	fb01 f303 	mul.w	r3, r1, r3
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	00db      	lsls	r3, r3, #3
 800a5ec:	3332      	adds	r3, #50	; 0x32
 800a5ee:	4a67      	ldr	r2, [pc, #412]	; (800a78c <UART_SetConfig+0x38c>)
 800a5f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f4:	095b      	lsrs	r3, r3, #5
 800a5f6:	f003 0207 	and.w	r2, r3, #7
 800a5fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4432      	add	r2, r6
 800a600:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a602:	e0b9      	b.n	800a778 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a606:	461c      	mov	r4, r3
 800a608:	f04f 0500 	mov.w	r5, #0
 800a60c:	4622      	mov	r2, r4
 800a60e:	462b      	mov	r3, r5
 800a610:	1891      	adds	r1, r2, r2
 800a612:	6139      	str	r1, [r7, #16]
 800a614:	415b      	adcs	r3, r3
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a61c:	1912      	adds	r2, r2, r4
 800a61e:	eb45 0303 	adc.w	r3, r5, r3
 800a622:	f04f 0000 	mov.w	r0, #0
 800a626:	f04f 0100 	mov.w	r1, #0
 800a62a:	00d9      	lsls	r1, r3, #3
 800a62c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a630:	00d0      	lsls	r0, r2, #3
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	eb12 0804 	adds.w	r8, r2, r4
 800a63a:	eb43 0905 	adc.w	r9, r3, r5
 800a63e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	4618      	mov	r0, r3
 800a644:	f04f 0100 	mov.w	r1, #0
 800a648:	f04f 0200 	mov.w	r2, #0
 800a64c:	f04f 0300 	mov.w	r3, #0
 800a650:	008b      	lsls	r3, r1, #2
 800a652:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a656:	0082      	lsls	r2, r0, #2
 800a658:	4640      	mov	r0, r8
 800a65a:	4649      	mov	r1, r9
 800a65c:	f7f5 fe10 	bl	8000280 <__aeabi_uldivmod>
 800a660:	4602      	mov	r2, r0
 800a662:	460b      	mov	r3, r1
 800a664:	4b49      	ldr	r3, [pc, #292]	; (800a78c <UART_SetConfig+0x38c>)
 800a666:	fba3 2302 	umull	r2, r3, r3, r2
 800a66a:	095b      	lsrs	r3, r3, #5
 800a66c:	011e      	lsls	r6, r3, #4
 800a66e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a670:	4618      	mov	r0, r3
 800a672:	f04f 0100 	mov.w	r1, #0
 800a676:	4602      	mov	r2, r0
 800a678:	460b      	mov	r3, r1
 800a67a:	1894      	adds	r4, r2, r2
 800a67c:	60bc      	str	r4, [r7, #8]
 800a67e:	415b      	adcs	r3, r3
 800a680:	60fb      	str	r3, [r7, #12]
 800a682:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a686:	1812      	adds	r2, r2, r0
 800a688:	eb41 0303 	adc.w	r3, r1, r3
 800a68c:	f04f 0400 	mov.w	r4, #0
 800a690:	f04f 0500 	mov.w	r5, #0
 800a694:	00dd      	lsls	r5, r3, #3
 800a696:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a69a:	00d4      	lsls	r4, r2, #3
 800a69c:	4622      	mov	r2, r4
 800a69e:	462b      	mov	r3, r5
 800a6a0:	1814      	adds	r4, r2, r0
 800a6a2:	64bc      	str	r4, [r7, #72]	; 0x48
 800a6a4:	414b      	adcs	r3, r1
 800a6a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f04f 0100 	mov.w	r1, #0
 800a6b2:	f04f 0200 	mov.w	r2, #0
 800a6b6:	f04f 0300 	mov.w	r3, #0
 800a6ba:	008b      	lsls	r3, r1, #2
 800a6bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a6c0:	0082      	lsls	r2, r0, #2
 800a6c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a6c6:	f7f5 fddb 	bl	8000280 <__aeabi_uldivmod>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	4b2f      	ldr	r3, [pc, #188]	; (800a78c <UART_SetConfig+0x38c>)
 800a6d0:	fba3 1302 	umull	r1, r3, r3, r2
 800a6d4:	095b      	lsrs	r3, r3, #5
 800a6d6:	2164      	movs	r1, #100	; 0x64
 800a6d8:	fb01 f303 	mul.w	r3, r1, r3
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	011b      	lsls	r3, r3, #4
 800a6e0:	3332      	adds	r3, #50	; 0x32
 800a6e2:	4a2a      	ldr	r2, [pc, #168]	; (800a78c <UART_SetConfig+0x38c>)
 800a6e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a6e8:	095b      	lsrs	r3, r3, #5
 800a6ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6ee:	441e      	add	r6, r3
 800a6f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f04f 0100 	mov.w	r1, #0
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	1894      	adds	r4, r2, r2
 800a6fe:	603c      	str	r4, [r7, #0]
 800a700:	415b      	adcs	r3, r3
 800a702:	607b      	str	r3, [r7, #4]
 800a704:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a708:	1812      	adds	r2, r2, r0
 800a70a:	eb41 0303 	adc.w	r3, r1, r3
 800a70e:	f04f 0400 	mov.w	r4, #0
 800a712:	f04f 0500 	mov.w	r5, #0
 800a716:	00dd      	lsls	r5, r3, #3
 800a718:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a71c:	00d4      	lsls	r4, r2, #3
 800a71e:	4622      	mov	r2, r4
 800a720:	462b      	mov	r3, r5
 800a722:	eb12 0a00 	adds.w	sl, r2, r0
 800a726:	eb43 0b01 	adc.w	fp, r3, r1
 800a72a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	4618      	mov	r0, r3
 800a730:	f04f 0100 	mov.w	r1, #0
 800a734:	f04f 0200 	mov.w	r2, #0
 800a738:	f04f 0300 	mov.w	r3, #0
 800a73c:	008b      	lsls	r3, r1, #2
 800a73e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a742:	0082      	lsls	r2, r0, #2
 800a744:	4650      	mov	r0, sl
 800a746:	4659      	mov	r1, fp
 800a748:	f7f5 fd9a 	bl	8000280 <__aeabi_uldivmod>
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	4b0e      	ldr	r3, [pc, #56]	; (800a78c <UART_SetConfig+0x38c>)
 800a752:	fba3 1302 	umull	r1, r3, r3, r2
 800a756:	095b      	lsrs	r3, r3, #5
 800a758:	2164      	movs	r1, #100	; 0x64
 800a75a:	fb01 f303 	mul.w	r3, r1, r3
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	011b      	lsls	r3, r3, #4
 800a762:	3332      	adds	r3, #50	; 0x32
 800a764:	4a09      	ldr	r2, [pc, #36]	; (800a78c <UART_SetConfig+0x38c>)
 800a766:	fba2 2303 	umull	r2, r3, r2, r3
 800a76a:	095b      	lsrs	r3, r3, #5
 800a76c:	f003 020f 	and.w	r2, r3, #15
 800a770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4432      	add	r2, r6
 800a776:	609a      	str	r2, [r3, #8]
}
 800a778:	bf00      	nop
 800a77a:	377c      	adds	r7, #124	; 0x7c
 800a77c:	46bd      	mov	sp, r7
 800a77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a782:	bf00      	nop
 800a784:	40011000 	.word	0x40011000
 800a788:	40011400 	.word	0x40011400
 800a78c:	51eb851f 	.word	0x51eb851f

0800a790 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a790:	b084      	sub	sp, #16
 800a792:	b480      	push	{r7}
 800a794:	b085      	sub	sp, #20
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	f107 001c 	add.w	r0, r7, #28
 800a79e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a7a6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a7a8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a7aa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a7ae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a7b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a7b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a7ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a7ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a7ce:	68fa      	ldr	r2, [r7, #12]
 800a7d0:	431a      	orrs	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3714      	adds	r7, #20
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	b004      	add	sp, #16
 800a7e4:	4770      	bx	lr

0800a7e6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b083      	sub	sp, #12
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	370c      	adds	r7, #12
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a822:	b580      	push	{r7, lr}
 800a824:	b082      	sub	sp, #8
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2203      	movs	r2, #3
 800a82e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a830:	2002      	movs	r0, #2
 800a832:	f7fb fe6d 	bl	8006510 <HAL_Delay>
  
  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 0303 	and.w	r3, r3, #3
}
 800a850:	4618      	mov	r0, r3
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a87a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a880:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a886:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a896:	f023 030f 	bic.w	r3, r3, #15
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	431a      	orrs	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	b2db      	uxtb	r3, r3
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	370c      	adds	r7, #12
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a8ca:	b480      	push	{r7}
 800a8cc:	b085      	sub	sp, #20
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	3314      	adds	r3, #20
 800a8d8:	461a      	mov	r2, r3
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	4413      	add	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
}  
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	685a      	ldr	r2, [r3, #4]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a916:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a91c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a922:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	4313      	orrs	r3, r2
 800a928:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	431a      	orrs	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a93a:	2300      	movs	r3, #0

}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b088      	sub	sp, #32
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a956:	2310      	movs	r3, #16
 800a958:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a95a:	2340      	movs	r3, #64	; 0x40
 800a95c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a95e:	2300      	movs	r3, #0
 800a960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a966:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a968:	f107 0308 	add.w	r3, r7, #8
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7ff ff74 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a974:	f241 3288 	movw	r2, #5000	; 0x1388
 800a978:	2110      	movs	r1, #16
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fa44 	bl	800ae08 <SDMMC_GetCmdResp1>
 800a980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a982:	69fb      	ldr	r3, [r7, #28]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3720      	adds	r7, #32
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b088      	sub	sp, #32
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a99a:	2311      	movs	r3, #17
 800a99c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a99e:	2340      	movs	r3, #64	; 0x40
 800a9a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9ac:	f107 0308 	add.w	r3, r7, #8
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7ff ff52 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a9b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9bc:	2111      	movs	r1, #17
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fa22 	bl	800ae08 <SDMMC_GetCmdResp1>
 800a9c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9c6:	69fb      	ldr	r3, [r7, #28]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3720      	adds	r7, #32
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b088      	sub	sp, #32
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a9de:	2312      	movs	r3, #18
 800a9e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9e2:	2340      	movs	r3, #64	; 0x40
 800a9e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9f0:	f107 0308 	add.w	r3, r7, #8
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff ff30 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a9fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa00:	2112      	movs	r1, #18
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fa00 	bl	800ae08 <SDMMC_GetCmdResp1>
 800aa08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa0a:	69fb      	ldr	r3, [r7, #28]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3720      	adds	r7, #32
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b088      	sub	sp, #32
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800aa22:	2318      	movs	r3, #24
 800aa24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa26:	2340      	movs	r3, #64	; 0x40
 800aa28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa34:	f107 0308 	add.w	r3, r7, #8
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7ff ff0e 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aa40:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa44:	2118      	movs	r1, #24
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 f9de 	bl	800ae08 <SDMMC_GetCmdResp1>
 800aa4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa4e:	69fb      	ldr	r3, [r7, #28]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3720      	adds	r7, #32
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800aa66:	2319      	movs	r3, #25
 800aa68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa6a:	2340      	movs	r3, #64	; 0x40
 800aa6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa78:	f107 0308 	add.w	r3, r7, #8
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f7ff feec 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800aa84:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa88:	2119      	movs	r1, #25
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f9bc 	bl	800ae08 <SDMMC_GetCmdResp1>
 800aa90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa92:	69fb      	ldr	r3, [r7, #28]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3720      	adds	r7, #32
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b088      	sub	sp, #32
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800aaa8:	230c      	movs	r3, #12
 800aaaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aaac:	2340      	movs	r3, #64	; 0x40
 800aaae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aab0:	2300      	movs	r3, #0
 800aab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aab8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aaba:	f107 0308 	add.w	r3, r7, #8
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff fecb 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800aac6:	4a05      	ldr	r2, [pc, #20]	; (800aadc <SDMMC_CmdStopTransfer+0x40>)
 800aac8:	210c      	movs	r1, #12
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 f99c 	bl	800ae08 <SDMMC_GetCmdResp1>
 800aad0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aad2:	69fb      	ldr	r3, [r7, #28]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3720      	adds	r7, #32
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	05f5e100 	.word	0x05f5e100

0800aae0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b08a      	sub	sp, #40	; 0x28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aaf0:	2307      	movs	r3, #7
 800aaf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aaf4:	2340      	movs	r3, #64	; 0x40
 800aaf6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aafc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab00:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab02:	f107 0310 	add.w	r3, r7, #16
 800ab06:	4619      	mov	r1, r3
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f7ff fea7 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ab0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab12:	2107      	movs	r1, #7
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f000 f977 	bl	800ae08 <SDMMC_GetCmdResp1>
 800ab1a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ab1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3728      	adds	r7, #40	; 0x28
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b088      	sub	sp, #32
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ab32:	2300      	movs	r3, #0
 800ab34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ab36:	2300      	movs	r3, #0
 800ab38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab44:	f107 0308 	add.w	r3, r7, #8
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7ff fe86 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f92d 	bl	800adb0 <SDMMC_GetCmdError>
 800ab56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab58:	69fb      	ldr	r3, [r7, #28]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3720      	adds	r7, #32
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b088      	sub	sp, #32
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ab6a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ab6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ab70:	2308      	movs	r3, #8
 800ab72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab74:	2340      	movs	r3, #64	; 0x40
 800ab76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab82:	f107 0308 	add.w	r3, r7, #8
 800ab86:	4619      	mov	r1, r3
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f7ff fe67 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fb24 	bl	800b1dc <SDMMC_GetCmdResp7>
 800ab94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab96:	69fb      	ldr	r3, [r7, #28]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3720      	adds	r7, #32
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800abae:	2337      	movs	r3, #55	; 0x37
 800abb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abb2:	2340      	movs	r3, #64	; 0x40
 800abb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abb6:	2300      	movs	r3, #0
 800abb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abc0:	f107 0308 	add.w	r3, r7, #8
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7ff fe48 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800abcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800abd0:	2137      	movs	r1, #55	; 0x37
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f918 	bl	800ae08 <SDMMC_GetCmdResp1>
 800abd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abda:	69fb      	ldr	r3, [r7, #28]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3720      	adds	r7, #32
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b088      	sub	sp, #32
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800abfa:	2329      	movs	r3, #41	; 0x29
 800abfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abfe:	2340      	movs	r3, #64	; 0x40
 800ac00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac02:	2300      	movs	r3, #0
 800ac04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac0c:	f107 0308 	add.w	r3, r7, #8
 800ac10:	4619      	mov	r1, r3
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7ff fe22 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fa2b 	bl	800b074 <SDMMC_GetCmdResp3>
 800ac1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac20:	69fb      	ldr	r3, [r7, #28]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3720      	adds	r7, #32
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b088      	sub	sp, #32
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ac38:	2306      	movs	r3, #6
 800ac3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac3c:	2340      	movs	r3, #64	; 0x40
 800ac3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac40:	2300      	movs	r3, #0
 800ac42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac4a:	f107 0308 	add.w	r3, r7, #8
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7ff fe03 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ac56:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac5a:	2106      	movs	r1, #6
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f8d3 	bl	800ae08 <SDMMC_GetCmdResp1>
 800ac62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac64:	69fb      	ldr	r3, [r7, #28]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3720      	adds	r7, #32
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b088      	sub	sp, #32
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ac76:	2300      	movs	r3, #0
 800ac78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ac7a:	2333      	movs	r3, #51	; 0x33
 800ac7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac7e:	2340      	movs	r3, #64	; 0x40
 800ac80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac82:	2300      	movs	r3, #0
 800ac84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac8c:	f107 0308 	add.w	r3, r7, #8
 800ac90:	4619      	mov	r1, r3
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7ff fde2 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ac98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac9c:	2133      	movs	r1, #51	; 0x33
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f8b2 	bl	800ae08 <SDMMC_GetCmdResp1>
 800aca4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aca6:	69fb      	ldr	r3, [r7, #28]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3720      	adds	r7, #32
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b088      	sub	sp, #32
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800acb8:	2300      	movs	r3, #0
 800acba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800acbc:	2302      	movs	r3, #2
 800acbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800acc0:	23c0      	movs	r3, #192	; 0xc0
 800acc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acc4:	2300      	movs	r3, #0
 800acc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800accc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acce:	f107 0308 	add.w	r3, r7, #8
 800acd2:	4619      	mov	r1, r3
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f7ff fdc1 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f982 	bl	800afe4 <SDMMC_GetCmdResp2>
 800ace0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ace2:	69fb      	ldr	r3, [r7, #28]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3720      	adds	r7, #32
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b088      	sub	sp, #32
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800acfa:	2309      	movs	r3, #9
 800acfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800acfe:	23c0      	movs	r3, #192	; 0xc0
 800ad00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad02:	2300      	movs	r3, #0
 800ad04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad0c:	f107 0308 	add.w	r3, r7, #8
 800ad10:	4619      	mov	r1, r3
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f7ff fda2 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f963 	bl	800afe4 <SDMMC_GetCmdResp2>
 800ad1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad20:	69fb      	ldr	r3, [r7, #28]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3720      	adds	r7, #32
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b088      	sub	sp, #32
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ad34:	2300      	movs	r3, #0
 800ad36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad3c:	2340      	movs	r3, #64	; 0x40
 800ad3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad40:	2300      	movs	r3, #0
 800ad42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad4a:	f107 0308 	add.w	r3, r7, #8
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7ff fd83 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ad56:	683a      	ldr	r2, [r7, #0]
 800ad58:	2103      	movs	r1, #3
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f9c8 	bl	800b0f0 <SDMMC_GetCmdResp6>
 800ad60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad62:	69fb      	ldr	r3, [r7, #28]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3720      	adds	r7, #32
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b088      	sub	sp, #32
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ad7a:	230d      	movs	r3, #13
 800ad7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad7e:	2340      	movs	r3, #64	; 0x40
 800ad80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad82:	2300      	movs	r3, #0
 800ad84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad8c:	f107 0308 	add.w	r3, r7, #8
 800ad90:	4619      	mov	r1, r3
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7ff fd62 	bl	800a85c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ad98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad9c:	210d      	movs	r1, #13
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 f832 	bl	800ae08 <SDMMC_GetCmdResp1>
 800ada4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ada6:	69fb      	ldr	r3, [r7, #28]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3720      	adds	r7, #32
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800adb8:	4b11      	ldr	r3, [pc, #68]	; (800ae00 <SDMMC_GetCmdError+0x50>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a11      	ldr	r2, [pc, #68]	; (800ae04 <SDMMC_GetCmdError+0x54>)
 800adbe:	fba2 2303 	umull	r2, r3, r2, r3
 800adc2:	0a5b      	lsrs	r3, r3, #9
 800adc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc8:	fb02 f303 	mul.w	r3, r2, r3
 800adcc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	1e5a      	subs	r2, r3, #1
 800add2:	60fa      	str	r2, [r7, #12]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d102      	bne.n	800adde <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800add8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800addc:	e009      	b.n	800adf2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d0f1      	beq.n	800adce <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	22c5      	movs	r2, #197	; 0xc5
 800adee:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3714      	adds	r7, #20
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	20000000 	.word	0x20000000
 800ae04:	10624dd3 	.word	0x10624dd3

0800ae08 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b088      	sub	sp, #32
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	460b      	mov	r3, r1
 800ae12:	607a      	str	r2, [r7, #4]
 800ae14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ae16:	4b70      	ldr	r3, [pc, #448]	; (800afd8 <SDMMC_GetCmdResp1+0x1d0>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a70      	ldr	r2, [pc, #448]	; (800afdc <SDMMC_GetCmdResp1+0x1d4>)
 800ae1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae20:	0a5a      	lsrs	r2, r3, #9
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	fb02 f303 	mul.w	r3, r2, r3
 800ae28:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	1e5a      	subs	r2, r3, #1
 800ae2e:	61fa      	str	r2, [r7, #28]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d102      	bne.n	800ae3a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae38:	e0c9      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae3e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d0ef      	beq.n	800ae2a <SDMMC_GetCmdResp1+0x22>
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1ea      	bne.n	800ae2a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae58:	f003 0304 	and.w	r3, r3, #4
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d004      	beq.n	800ae6a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2204      	movs	r2, #4
 800ae64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae66:	2304      	movs	r3, #4
 800ae68:	e0b1      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae6e:	f003 0301 	and.w	r3, r3, #1
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d004      	beq.n	800ae80 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e0a6      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	22c5      	movs	r2, #197	; 0xc5
 800ae84:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f7ff fd12 	bl	800a8b0 <SDIO_GetCommandResponse>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	461a      	mov	r2, r3
 800ae90:	7afb      	ldrb	r3, [r7, #11]
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d001      	beq.n	800ae9a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae96:	2301      	movs	r3, #1
 800ae98:	e099      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f7ff fd14 	bl	800a8ca <SDIO_GetResponse>
 800aea2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	4b4e      	ldr	r3, [pc, #312]	; (800afe0 <SDMMC_GetCmdResp1+0x1d8>)
 800aea8:	4013      	ands	r3, r2
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	e08d      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	da02      	bge.n	800aebe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aeb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aebc:	e087      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d001      	beq.n	800aecc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aec8:	2340      	movs	r3, #64	; 0x40
 800aeca:	e080      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d001      	beq.n	800aeda <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aed6:	2380      	movs	r3, #128	; 0x80
 800aed8:	e079      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aee8:	e071      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d002      	beq.n	800aefa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aef8:	e069      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af00:	2b00      	cmp	r3, #0
 800af02:	d002      	beq.n	800af0a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800af04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af08:	e061      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af10:	2b00      	cmp	r3, #0
 800af12:	d002      	beq.n	800af1a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800af14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af18:	e059      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af20:	2b00      	cmp	r3, #0
 800af22:	d002      	beq.n	800af2a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800af24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af28:	e051      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af30:	2b00      	cmp	r3, #0
 800af32:	d002      	beq.n	800af3a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800af34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af38:	e049      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af40:	2b00      	cmp	r3, #0
 800af42:	d002      	beq.n	800af4a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800af44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800af48:	e041      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af50:	2b00      	cmp	r3, #0
 800af52:	d002      	beq.n	800af5a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800af54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af58:	e039      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d002      	beq.n	800af6a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800af64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800af68:	e031      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800af74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800af78:	e029      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af80:	2b00      	cmp	r3, #0
 800af82:	d002      	beq.n	800af8a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800af84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800af88:	e021      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af90:	2b00      	cmp	r3, #0
 800af92:	d002      	beq.n	800af9a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800af94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800af98:	e019      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d002      	beq.n	800afaa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800afa4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800afa8:	e011      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d002      	beq.n	800afba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800afb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800afb8:	e009      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	f003 0308 	and.w	r3, r3, #8
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d002      	beq.n	800afca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800afc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800afc8:	e001      	b.n	800afce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800afca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3720      	adds	r7, #32
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	20000000 	.word	0x20000000
 800afdc:	10624dd3 	.word	0x10624dd3
 800afe0:	fdffe008 	.word	0xfdffe008

0800afe4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800afec:	4b1f      	ldr	r3, [pc, #124]	; (800b06c <SDMMC_GetCmdResp2+0x88>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a1f      	ldr	r2, [pc, #124]	; (800b070 <SDMMC_GetCmdResp2+0x8c>)
 800aff2:	fba2 2303 	umull	r2, r3, r2, r3
 800aff6:	0a5b      	lsrs	r3, r3, #9
 800aff8:	f241 3288 	movw	r2, #5000	; 0x1388
 800affc:	fb02 f303 	mul.w	r3, r2, r3
 800b000:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	1e5a      	subs	r2, r3, #1
 800b006:	60fa      	str	r2, [r7, #12]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d102      	bne.n	800b012 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b00c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b010:	e026      	b.n	800b060 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b016:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d0ef      	beq.n	800b002 <SDMMC_GetCmdResp2+0x1e>
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1ea      	bne.n	800b002 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b030:	f003 0304 	and.w	r3, r3, #4
 800b034:	2b00      	cmp	r3, #0
 800b036:	d004      	beq.n	800b042 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2204      	movs	r2, #4
 800b03c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b03e:	2304      	movs	r3, #4
 800b040:	e00e      	b.n	800b060 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b046:	f003 0301 	and.w	r3, r3, #1
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d004      	beq.n	800b058 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b054:	2301      	movs	r3, #1
 800b056:	e003      	b.n	800b060 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	22c5      	movs	r2, #197	; 0xc5
 800b05c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr
 800b06c:	20000000 	.word	0x20000000
 800b070:	10624dd3 	.word	0x10624dd3

0800b074 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b07c:	4b1a      	ldr	r3, [pc, #104]	; (800b0e8 <SDMMC_GetCmdResp3+0x74>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a1a      	ldr	r2, [pc, #104]	; (800b0ec <SDMMC_GetCmdResp3+0x78>)
 800b082:	fba2 2303 	umull	r2, r3, r2, r3
 800b086:	0a5b      	lsrs	r3, r3, #9
 800b088:	f241 3288 	movw	r2, #5000	; 0x1388
 800b08c:	fb02 f303 	mul.w	r3, r2, r3
 800b090:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	1e5a      	subs	r2, r3, #1
 800b096:	60fa      	str	r2, [r7, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d102      	bne.n	800b0a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b09c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0a0:	e01b      	b.n	800b0da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d0ef      	beq.n	800b092 <SDMMC_GetCmdResp3+0x1e>
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1ea      	bne.n	800b092 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0c0:	f003 0304 	and.w	r3, r3, #4
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d004      	beq.n	800b0d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2204      	movs	r2, #4
 800b0cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0ce:	2304      	movs	r3, #4
 800b0d0:	e003      	b.n	800b0da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	22c5      	movs	r2, #197	; 0xc5
 800b0d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	20000000 	.word	0x20000000
 800b0ec:	10624dd3 	.word	0x10624dd3

0800b0f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	607a      	str	r2, [r7, #4]
 800b0fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0fe:	4b35      	ldr	r3, [pc, #212]	; (800b1d4 <SDMMC_GetCmdResp6+0xe4>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a35      	ldr	r2, [pc, #212]	; (800b1d8 <SDMMC_GetCmdResp6+0xe8>)
 800b104:	fba2 2303 	umull	r2, r3, r2, r3
 800b108:	0a5b      	lsrs	r3, r3, #9
 800b10a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b10e:	fb02 f303 	mul.w	r3, r2, r3
 800b112:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	1e5a      	subs	r2, r3, #1
 800b118:	61fa      	str	r2, [r7, #28]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d102      	bne.n	800b124 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b11e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b122:	e052      	b.n	800b1ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b128:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b130:	2b00      	cmp	r3, #0
 800b132:	d0ef      	beq.n	800b114 <SDMMC_GetCmdResp6+0x24>
 800b134:	69bb      	ldr	r3, [r7, #24]
 800b136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d1ea      	bne.n	800b114 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b142:	f003 0304 	and.w	r3, r3, #4
 800b146:	2b00      	cmp	r3, #0
 800b148:	d004      	beq.n	800b154 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2204      	movs	r2, #4
 800b14e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b150:	2304      	movs	r3, #4
 800b152:	e03a      	b.n	800b1ca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b158:	f003 0301 	and.w	r3, r3, #1
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d004      	beq.n	800b16a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2201      	movs	r2, #1
 800b164:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b166:	2301      	movs	r3, #1
 800b168:	e02f      	b.n	800b1ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	f7ff fba0 	bl	800a8b0 <SDIO_GetCommandResponse>
 800b170:	4603      	mov	r3, r0
 800b172:	461a      	mov	r2, r3
 800b174:	7afb      	ldrb	r3, [r7, #11]
 800b176:	4293      	cmp	r3, r2
 800b178:	d001      	beq.n	800b17e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b17a:	2301      	movs	r3, #1
 800b17c:	e025      	b.n	800b1ca <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	22c5      	movs	r2, #197	; 0xc5
 800b182:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b184:	2100      	movs	r1, #0
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f7ff fb9f 	bl	800a8ca <SDIO_GetResponse>
 800b18c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b194:	2b00      	cmp	r3, #0
 800b196:	d106      	bne.n	800b1a6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	0c1b      	lsrs	r3, r3, #16
 800b19c:	b29a      	uxth	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	e011      	b.n	800b1ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d002      	beq.n	800b1b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b1b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b1b4:	e009      	b.n	800b1ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b1c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1c4:	e001      	b.n	800b1ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b1c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3720      	adds	r7, #32
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	20000000 	.word	0x20000000
 800b1d8:	10624dd3 	.word	0x10624dd3

0800b1dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1e4:	4b22      	ldr	r3, [pc, #136]	; (800b270 <SDMMC_GetCmdResp7+0x94>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a22      	ldr	r2, [pc, #136]	; (800b274 <SDMMC_GetCmdResp7+0x98>)
 800b1ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ee:	0a5b      	lsrs	r3, r3, #9
 800b1f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1f4:	fb02 f303 	mul.w	r3, r2, r3
 800b1f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	1e5a      	subs	r2, r3, #1
 800b1fe:	60fa      	str	r2, [r7, #12]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d102      	bne.n	800b20a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b204:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b208:	e02c      	b.n	800b264 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b20e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b216:	2b00      	cmp	r3, #0
 800b218:	d0ef      	beq.n	800b1fa <SDMMC_GetCmdResp7+0x1e>
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1ea      	bne.n	800b1fa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b228:	f003 0304 	and.w	r3, r3, #4
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d004      	beq.n	800b23a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2204      	movs	r2, #4
 800b234:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b236:	2304      	movs	r3, #4
 800b238:	e014      	b.n	800b264 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b23e:	f003 0301 	and.w	r3, r3, #1
 800b242:	2b00      	cmp	r3, #0
 800b244:	d004      	beq.n	800b250 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b24c:	2301      	movs	r3, #1
 800b24e:	e009      	b.n	800b264 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2240      	movs	r2, #64	; 0x40
 800b260:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b262:	2300      	movs	r3, #0
  
}
 800b264:	4618      	mov	r0, r3
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr
 800b270:	20000000 	.word	0x20000000
 800b274:	10624dd3 	.word	0x10624dd3

0800b278 <main>:




int main(void)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	af00      	add	r7, sp, #0
  hwInit();
 800b27c:	f7f6 ff32 	bl	80020e4 <hwInit>
  apInit();
 800b280:	f7f5 f97a 	bl	8000578 <apInit>



// apBoardLedTest();
// apUartTest();
   apSDCardTest();
 800b284:	f7f5 f9da 	bl	800063c <apSDCardTest>

  return 0;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	bd80      	pop	{r7, pc}
	...

0800b290 <__errno>:
 800b290:	4b01      	ldr	r3, [pc, #4]	; (800b298 <__errno+0x8>)
 800b292:	6818      	ldr	r0, [r3, #0]
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	20000024 	.word	0x20000024

0800b29c <__libc_init_array>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	4d0d      	ldr	r5, [pc, #52]	; (800b2d4 <__libc_init_array+0x38>)
 800b2a0:	4c0d      	ldr	r4, [pc, #52]	; (800b2d8 <__libc_init_array+0x3c>)
 800b2a2:	1b64      	subs	r4, r4, r5
 800b2a4:	10a4      	asrs	r4, r4, #2
 800b2a6:	2600      	movs	r6, #0
 800b2a8:	42a6      	cmp	r6, r4
 800b2aa:	d109      	bne.n	800b2c0 <__libc_init_array+0x24>
 800b2ac:	4d0b      	ldr	r5, [pc, #44]	; (800b2dc <__libc_init_array+0x40>)
 800b2ae:	4c0c      	ldr	r4, [pc, #48]	; (800b2e0 <__libc_init_array+0x44>)
 800b2b0:	f000 fc68 	bl	800bb84 <_init>
 800b2b4:	1b64      	subs	r4, r4, r5
 800b2b6:	10a4      	asrs	r4, r4, #2
 800b2b8:	2600      	movs	r6, #0
 800b2ba:	42a6      	cmp	r6, r4
 800b2bc:	d105      	bne.n	800b2ca <__libc_init_array+0x2e>
 800b2be:	bd70      	pop	{r4, r5, r6, pc}
 800b2c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2c4:	4798      	blx	r3
 800b2c6:	3601      	adds	r6, #1
 800b2c8:	e7ee      	b.n	800b2a8 <__libc_init_array+0xc>
 800b2ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ce:	4798      	blx	r3
 800b2d0:	3601      	adds	r6, #1
 800b2d2:	e7f2      	b.n	800b2ba <__libc_init_array+0x1e>
 800b2d4:	0800c5f8 	.word	0x0800c5f8
 800b2d8:	0800c5f8 	.word	0x0800c5f8
 800b2dc:	0800c5f8 	.word	0x0800c5f8
 800b2e0:	0800c5fc 	.word	0x0800c5fc

0800b2e4 <memset>:
 800b2e4:	4402      	add	r2, r0
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d100      	bne.n	800b2ee <memset+0xa>
 800b2ec:	4770      	bx	lr
 800b2ee:	f803 1b01 	strb.w	r1, [r3], #1
 800b2f2:	e7f9      	b.n	800b2e8 <memset+0x4>

0800b2f4 <_vsniprintf_r>:
 800b2f4:	b530      	push	{r4, r5, lr}
 800b2f6:	1e14      	subs	r4, r2, #0
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	b09b      	sub	sp, #108	; 0x6c
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	da05      	bge.n	800b30c <_vsniprintf_r+0x18>
 800b300:	238b      	movs	r3, #139	; 0x8b
 800b302:	602b      	str	r3, [r5, #0]
 800b304:	f04f 30ff 	mov.w	r0, #4294967295
 800b308:	b01b      	add	sp, #108	; 0x6c
 800b30a:	bd30      	pop	{r4, r5, pc}
 800b30c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b310:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b314:	bf14      	ite	ne
 800b316:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b31a:	4623      	moveq	r3, r4
 800b31c:	9302      	str	r3, [sp, #8]
 800b31e:	9305      	str	r3, [sp, #20]
 800b320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b324:	9100      	str	r1, [sp, #0]
 800b326:	9104      	str	r1, [sp, #16]
 800b328:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b32c:	4602      	mov	r2, r0
 800b32e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b330:	4669      	mov	r1, sp
 800b332:	4628      	mov	r0, r5
 800b334:	f000 f874 	bl	800b420 <_svfiprintf_r>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	bfbc      	itt	lt
 800b33c:	238b      	movlt	r3, #139	; 0x8b
 800b33e:	602b      	strlt	r3, [r5, #0]
 800b340:	2c00      	cmp	r4, #0
 800b342:	d0e1      	beq.n	800b308 <_vsniprintf_r+0x14>
 800b344:	9b00      	ldr	r3, [sp, #0]
 800b346:	2200      	movs	r2, #0
 800b348:	701a      	strb	r2, [r3, #0]
 800b34a:	e7dd      	b.n	800b308 <_vsniprintf_r+0x14>

0800b34c <vsniprintf>:
 800b34c:	b507      	push	{r0, r1, r2, lr}
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	4613      	mov	r3, r2
 800b352:	460a      	mov	r2, r1
 800b354:	4601      	mov	r1, r0
 800b356:	4803      	ldr	r0, [pc, #12]	; (800b364 <vsniprintf+0x18>)
 800b358:	6800      	ldr	r0, [r0, #0]
 800b35a:	f7ff ffcb 	bl	800b2f4 <_vsniprintf_r>
 800b35e:	b003      	add	sp, #12
 800b360:	f85d fb04 	ldr.w	pc, [sp], #4
 800b364:	20000024 	.word	0x20000024

0800b368 <__ssputs_r>:
 800b368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b36c:	688e      	ldr	r6, [r1, #8]
 800b36e:	429e      	cmp	r6, r3
 800b370:	4682      	mov	sl, r0
 800b372:	460c      	mov	r4, r1
 800b374:	4690      	mov	r8, r2
 800b376:	461f      	mov	r7, r3
 800b378:	d838      	bhi.n	800b3ec <__ssputs_r+0x84>
 800b37a:	898a      	ldrh	r2, [r1, #12]
 800b37c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b380:	d032      	beq.n	800b3e8 <__ssputs_r+0x80>
 800b382:	6825      	ldr	r5, [r4, #0]
 800b384:	6909      	ldr	r1, [r1, #16]
 800b386:	eba5 0901 	sub.w	r9, r5, r1
 800b38a:	6965      	ldr	r5, [r4, #20]
 800b38c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b390:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b394:	3301      	adds	r3, #1
 800b396:	444b      	add	r3, r9
 800b398:	106d      	asrs	r5, r5, #1
 800b39a:	429d      	cmp	r5, r3
 800b39c:	bf38      	it	cc
 800b39e:	461d      	movcc	r5, r3
 800b3a0:	0553      	lsls	r3, r2, #21
 800b3a2:	d531      	bpl.n	800b408 <__ssputs_r+0xa0>
 800b3a4:	4629      	mov	r1, r5
 800b3a6:	f000 fb47 	bl	800ba38 <_malloc_r>
 800b3aa:	4606      	mov	r6, r0
 800b3ac:	b950      	cbnz	r0, 800b3c4 <__ssputs_r+0x5c>
 800b3ae:	230c      	movs	r3, #12
 800b3b0:	f8ca 3000 	str.w	r3, [sl]
 800b3b4:	89a3      	ldrh	r3, [r4, #12]
 800b3b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ba:	81a3      	strh	r3, [r4, #12]
 800b3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c4:	6921      	ldr	r1, [r4, #16]
 800b3c6:	464a      	mov	r2, r9
 800b3c8:	f000 fabe 	bl	800b948 <memcpy>
 800b3cc:	89a3      	ldrh	r3, [r4, #12]
 800b3ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3d6:	81a3      	strh	r3, [r4, #12]
 800b3d8:	6126      	str	r6, [r4, #16]
 800b3da:	6165      	str	r5, [r4, #20]
 800b3dc:	444e      	add	r6, r9
 800b3de:	eba5 0509 	sub.w	r5, r5, r9
 800b3e2:	6026      	str	r6, [r4, #0]
 800b3e4:	60a5      	str	r5, [r4, #8]
 800b3e6:	463e      	mov	r6, r7
 800b3e8:	42be      	cmp	r6, r7
 800b3ea:	d900      	bls.n	800b3ee <__ssputs_r+0x86>
 800b3ec:	463e      	mov	r6, r7
 800b3ee:	4632      	mov	r2, r6
 800b3f0:	6820      	ldr	r0, [r4, #0]
 800b3f2:	4641      	mov	r1, r8
 800b3f4:	f000 fab6 	bl	800b964 <memmove>
 800b3f8:	68a3      	ldr	r3, [r4, #8]
 800b3fa:	6822      	ldr	r2, [r4, #0]
 800b3fc:	1b9b      	subs	r3, r3, r6
 800b3fe:	4432      	add	r2, r6
 800b400:	60a3      	str	r3, [r4, #8]
 800b402:	6022      	str	r2, [r4, #0]
 800b404:	2000      	movs	r0, #0
 800b406:	e7db      	b.n	800b3c0 <__ssputs_r+0x58>
 800b408:	462a      	mov	r2, r5
 800b40a:	f000 fb6f 	bl	800baec <_realloc_r>
 800b40e:	4606      	mov	r6, r0
 800b410:	2800      	cmp	r0, #0
 800b412:	d1e1      	bne.n	800b3d8 <__ssputs_r+0x70>
 800b414:	6921      	ldr	r1, [r4, #16]
 800b416:	4650      	mov	r0, sl
 800b418:	f000 fabe 	bl	800b998 <_free_r>
 800b41c:	e7c7      	b.n	800b3ae <__ssputs_r+0x46>
	...

0800b420 <_svfiprintf_r>:
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	4698      	mov	r8, r3
 800b426:	898b      	ldrh	r3, [r1, #12]
 800b428:	061b      	lsls	r3, r3, #24
 800b42a:	b09d      	sub	sp, #116	; 0x74
 800b42c:	4607      	mov	r7, r0
 800b42e:	460d      	mov	r5, r1
 800b430:	4614      	mov	r4, r2
 800b432:	d50e      	bpl.n	800b452 <_svfiprintf_r+0x32>
 800b434:	690b      	ldr	r3, [r1, #16]
 800b436:	b963      	cbnz	r3, 800b452 <_svfiprintf_r+0x32>
 800b438:	2140      	movs	r1, #64	; 0x40
 800b43a:	f000 fafd 	bl	800ba38 <_malloc_r>
 800b43e:	6028      	str	r0, [r5, #0]
 800b440:	6128      	str	r0, [r5, #16]
 800b442:	b920      	cbnz	r0, 800b44e <_svfiprintf_r+0x2e>
 800b444:	230c      	movs	r3, #12
 800b446:	603b      	str	r3, [r7, #0]
 800b448:	f04f 30ff 	mov.w	r0, #4294967295
 800b44c:	e0d1      	b.n	800b5f2 <_svfiprintf_r+0x1d2>
 800b44e:	2340      	movs	r3, #64	; 0x40
 800b450:	616b      	str	r3, [r5, #20]
 800b452:	2300      	movs	r3, #0
 800b454:	9309      	str	r3, [sp, #36]	; 0x24
 800b456:	2320      	movs	r3, #32
 800b458:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b45c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b460:	2330      	movs	r3, #48	; 0x30
 800b462:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b60c <_svfiprintf_r+0x1ec>
 800b466:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b46a:	f04f 0901 	mov.w	r9, #1
 800b46e:	4623      	mov	r3, r4
 800b470:	469a      	mov	sl, r3
 800b472:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b476:	b10a      	cbz	r2, 800b47c <_svfiprintf_r+0x5c>
 800b478:	2a25      	cmp	r2, #37	; 0x25
 800b47a:	d1f9      	bne.n	800b470 <_svfiprintf_r+0x50>
 800b47c:	ebba 0b04 	subs.w	fp, sl, r4
 800b480:	d00b      	beq.n	800b49a <_svfiprintf_r+0x7a>
 800b482:	465b      	mov	r3, fp
 800b484:	4622      	mov	r2, r4
 800b486:	4629      	mov	r1, r5
 800b488:	4638      	mov	r0, r7
 800b48a:	f7ff ff6d 	bl	800b368 <__ssputs_r>
 800b48e:	3001      	adds	r0, #1
 800b490:	f000 80aa 	beq.w	800b5e8 <_svfiprintf_r+0x1c8>
 800b494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b496:	445a      	add	r2, fp
 800b498:	9209      	str	r2, [sp, #36]	; 0x24
 800b49a:	f89a 3000 	ldrb.w	r3, [sl]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f000 80a2 	beq.w	800b5e8 <_svfiprintf_r+0x1c8>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4ae:	f10a 0a01 	add.w	sl, sl, #1
 800b4b2:	9304      	str	r3, [sp, #16]
 800b4b4:	9307      	str	r3, [sp, #28]
 800b4b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4ba:	931a      	str	r3, [sp, #104]	; 0x68
 800b4bc:	4654      	mov	r4, sl
 800b4be:	2205      	movs	r2, #5
 800b4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c4:	4851      	ldr	r0, [pc, #324]	; (800b60c <_svfiprintf_r+0x1ec>)
 800b4c6:	f7f4 fe8b 	bl	80001e0 <memchr>
 800b4ca:	9a04      	ldr	r2, [sp, #16]
 800b4cc:	b9d8      	cbnz	r0, 800b506 <_svfiprintf_r+0xe6>
 800b4ce:	06d0      	lsls	r0, r2, #27
 800b4d0:	bf44      	itt	mi
 800b4d2:	2320      	movmi	r3, #32
 800b4d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4d8:	0711      	lsls	r1, r2, #28
 800b4da:	bf44      	itt	mi
 800b4dc:	232b      	movmi	r3, #43	; 0x2b
 800b4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b4e8:	d015      	beq.n	800b516 <_svfiprintf_r+0xf6>
 800b4ea:	9a07      	ldr	r2, [sp, #28]
 800b4ec:	4654      	mov	r4, sl
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	f04f 0c0a 	mov.w	ip, #10
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4fa:	3b30      	subs	r3, #48	; 0x30
 800b4fc:	2b09      	cmp	r3, #9
 800b4fe:	d94e      	bls.n	800b59e <_svfiprintf_r+0x17e>
 800b500:	b1b0      	cbz	r0, 800b530 <_svfiprintf_r+0x110>
 800b502:	9207      	str	r2, [sp, #28]
 800b504:	e014      	b.n	800b530 <_svfiprintf_r+0x110>
 800b506:	eba0 0308 	sub.w	r3, r0, r8
 800b50a:	fa09 f303 	lsl.w	r3, r9, r3
 800b50e:	4313      	orrs	r3, r2
 800b510:	9304      	str	r3, [sp, #16]
 800b512:	46a2      	mov	sl, r4
 800b514:	e7d2      	b.n	800b4bc <_svfiprintf_r+0x9c>
 800b516:	9b03      	ldr	r3, [sp, #12]
 800b518:	1d19      	adds	r1, r3, #4
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	9103      	str	r1, [sp, #12]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	bfbb      	ittet	lt
 800b522:	425b      	neglt	r3, r3
 800b524:	f042 0202 	orrlt.w	r2, r2, #2
 800b528:	9307      	strge	r3, [sp, #28]
 800b52a:	9307      	strlt	r3, [sp, #28]
 800b52c:	bfb8      	it	lt
 800b52e:	9204      	strlt	r2, [sp, #16]
 800b530:	7823      	ldrb	r3, [r4, #0]
 800b532:	2b2e      	cmp	r3, #46	; 0x2e
 800b534:	d10c      	bne.n	800b550 <_svfiprintf_r+0x130>
 800b536:	7863      	ldrb	r3, [r4, #1]
 800b538:	2b2a      	cmp	r3, #42	; 0x2a
 800b53a:	d135      	bne.n	800b5a8 <_svfiprintf_r+0x188>
 800b53c:	9b03      	ldr	r3, [sp, #12]
 800b53e:	1d1a      	adds	r2, r3, #4
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	9203      	str	r2, [sp, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	bfb8      	it	lt
 800b548:	f04f 33ff 	movlt.w	r3, #4294967295
 800b54c:	3402      	adds	r4, #2
 800b54e:	9305      	str	r3, [sp, #20]
 800b550:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b61c <_svfiprintf_r+0x1fc>
 800b554:	7821      	ldrb	r1, [r4, #0]
 800b556:	2203      	movs	r2, #3
 800b558:	4650      	mov	r0, sl
 800b55a:	f7f4 fe41 	bl	80001e0 <memchr>
 800b55e:	b140      	cbz	r0, 800b572 <_svfiprintf_r+0x152>
 800b560:	2340      	movs	r3, #64	; 0x40
 800b562:	eba0 000a 	sub.w	r0, r0, sl
 800b566:	fa03 f000 	lsl.w	r0, r3, r0
 800b56a:	9b04      	ldr	r3, [sp, #16]
 800b56c:	4303      	orrs	r3, r0
 800b56e:	3401      	adds	r4, #1
 800b570:	9304      	str	r3, [sp, #16]
 800b572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b576:	4826      	ldr	r0, [pc, #152]	; (800b610 <_svfiprintf_r+0x1f0>)
 800b578:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b57c:	2206      	movs	r2, #6
 800b57e:	f7f4 fe2f 	bl	80001e0 <memchr>
 800b582:	2800      	cmp	r0, #0
 800b584:	d038      	beq.n	800b5f8 <_svfiprintf_r+0x1d8>
 800b586:	4b23      	ldr	r3, [pc, #140]	; (800b614 <_svfiprintf_r+0x1f4>)
 800b588:	bb1b      	cbnz	r3, 800b5d2 <_svfiprintf_r+0x1b2>
 800b58a:	9b03      	ldr	r3, [sp, #12]
 800b58c:	3307      	adds	r3, #7
 800b58e:	f023 0307 	bic.w	r3, r3, #7
 800b592:	3308      	adds	r3, #8
 800b594:	9303      	str	r3, [sp, #12]
 800b596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b598:	4433      	add	r3, r6
 800b59a:	9309      	str	r3, [sp, #36]	; 0x24
 800b59c:	e767      	b.n	800b46e <_svfiprintf_r+0x4e>
 800b59e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5a2:	460c      	mov	r4, r1
 800b5a4:	2001      	movs	r0, #1
 800b5a6:	e7a5      	b.n	800b4f4 <_svfiprintf_r+0xd4>
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	3401      	adds	r4, #1
 800b5ac:	9305      	str	r3, [sp, #20]
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	f04f 0c0a 	mov.w	ip, #10
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ba:	3a30      	subs	r2, #48	; 0x30
 800b5bc:	2a09      	cmp	r2, #9
 800b5be:	d903      	bls.n	800b5c8 <_svfiprintf_r+0x1a8>
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d0c5      	beq.n	800b550 <_svfiprintf_r+0x130>
 800b5c4:	9105      	str	r1, [sp, #20]
 800b5c6:	e7c3      	b.n	800b550 <_svfiprintf_r+0x130>
 800b5c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e7f0      	b.n	800b5b4 <_svfiprintf_r+0x194>
 800b5d2:	ab03      	add	r3, sp, #12
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	462a      	mov	r2, r5
 800b5d8:	4b0f      	ldr	r3, [pc, #60]	; (800b618 <_svfiprintf_r+0x1f8>)
 800b5da:	a904      	add	r1, sp, #16
 800b5dc:	4638      	mov	r0, r7
 800b5de:	f3af 8000 	nop.w
 800b5e2:	1c42      	adds	r2, r0, #1
 800b5e4:	4606      	mov	r6, r0
 800b5e6:	d1d6      	bne.n	800b596 <_svfiprintf_r+0x176>
 800b5e8:	89ab      	ldrh	r3, [r5, #12]
 800b5ea:	065b      	lsls	r3, r3, #25
 800b5ec:	f53f af2c 	bmi.w	800b448 <_svfiprintf_r+0x28>
 800b5f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5f2:	b01d      	add	sp, #116	; 0x74
 800b5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f8:	ab03      	add	r3, sp, #12
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	462a      	mov	r2, r5
 800b5fe:	4b06      	ldr	r3, [pc, #24]	; (800b618 <_svfiprintf_r+0x1f8>)
 800b600:	a904      	add	r1, sp, #16
 800b602:	4638      	mov	r0, r7
 800b604:	f000 f87a 	bl	800b6fc <_printf_i>
 800b608:	e7eb      	b.n	800b5e2 <_svfiprintf_r+0x1c2>
 800b60a:	bf00      	nop
 800b60c:	0800c5bc 	.word	0x0800c5bc
 800b610:	0800c5c6 	.word	0x0800c5c6
 800b614:	00000000 	.word	0x00000000
 800b618:	0800b369 	.word	0x0800b369
 800b61c:	0800c5c2 	.word	0x0800c5c2

0800b620 <_printf_common>:
 800b620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b624:	4616      	mov	r6, r2
 800b626:	4699      	mov	r9, r3
 800b628:	688a      	ldr	r2, [r1, #8]
 800b62a:	690b      	ldr	r3, [r1, #16]
 800b62c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b630:	4293      	cmp	r3, r2
 800b632:	bfb8      	it	lt
 800b634:	4613      	movlt	r3, r2
 800b636:	6033      	str	r3, [r6, #0]
 800b638:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b63c:	4607      	mov	r7, r0
 800b63e:	460c      	mov	r4, r1
 800b640:	b10a      	cbz	r2, 800b646 <_printf_common+0x26>
 800b642:	3301      	adds	r3, #1
 800b644:	6033      	str	r3, [r6, #0]
 800b646:	6823      	ldr	r3, [r4, #0]
 800b648:	0699      	lsls	r1, r3, #26
 800b64a:	bf42      	ittt	mi
 800b64c:	6833      	ldrmi	r3, [r6, #0]
 800b64e:	3302      	addmi	r3, #2
 800b650:	6033      	strmi	r3, [r6, #0]
 800b652:	6825      	ldr	r5, [r4, #0]
 800b654:	f015 0506 	ands.w	r5, r5, #6
 800b658:	d106      	bne.n	800b668 <_printf_common+0x48>
 800b65a:	f104 0a19 	add.w	sl, r4, #25
 800b65e:	68e3      	ldr	r3, [r4, #12]
 800b660:	6832      	ldr	r2, [r6, #0]
 800b662:	1a9b      	subs	r3, r3, r2
 800b664:	42ab      	cmp	r3, r5
 800b666:	dc26      	bgt.n	800b6b6 <_printf_common+0x96>
 800b668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b66c:	1e13      	subs	r3, r2, #0
 800b66e:	6822      	ldr	r2, [r4, #0]
 800b670:	bf18      	it	ne
 800b672:	2301      	movne	r3, #1
 800b674:	0692      	lsls	r2, r2, #26
 800b676:	d42b      	bmi.n	800b6d0 <_printf_common+0xb0>
 800b678:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b67c:	4649      	mov	r1, r9
 800b67e:	4638      	mov	r0, r7
 800b680:	47c0      	blx	r8
 800b682:	3001      	adds	r0, #1
 800b684:	d01e      	beq.n	800b6c4 <_printf_common+0xa4>
 800b686:	6823      	ldr	r3, [r4, #0]
 800b688:	68e5      	ldr	r5, [r4, #12]
 800b68a:	6832      	ldr	r2, [r6, #0]
 800b68c:	f003 0306 	and.w	r3, r3, #6
 800b690:	2b04      	cmp	r3, #4
 800b692:	bf08      	it	eq
 800b694:	1aad      	subeq	r5, r5, r2
 800b696:	68a3      	ldr	r3, [r4, #8]
 800b698:	6922      	ldr	r2, [r4, #16]
 800b69a:	bf0c      	ite	eq
 800b69c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6a0:	2500      	movne	r5, #0
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	bfc4      	itt	gt
 800b6a6:	1a9b      	subgt	r3, r3, r2
 800b6a8:	18ed      	addgt	r5, r5, r3
 800b6aa:	2600      	movs	r6, #0
 800b6ac:	341a      	adds	r4, #26
 800b6ae:	42b5      	cmp	r5, r6
 800b6b0:	d11a      	bne.n	800b6e8 <_printf_common+0xc8>
 800b6b2:	2000      	movs	r0, #0
 800b6b4:	e008      	b.n	800b6c8 <_printf_common+0xa8>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	4652      	mov	r2, sl
 800b6ba:	4649      	mov	r1, r9
 800b6bc:	4638      	mov	r0, r7
 800b6be:	47c0      	blx	r8
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	d103      	bne.n	800b6cc <_printf_common+0xac>
 800b6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6cc:	3501      	adds	r5, #1
 800b6ce:	e7c6      	b.n	800b65e <_printf_common+0x3e>
 800b6d0:	18e1      	adds	r1, r4, r3
 800b6d2:	1c5a      	adds	r2, r3, #1
 800b6d4:	2030      	movs	r0, #48	; 0x30
 800b6d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6da:	4422      	add	r2, r4
 800b6dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6e4:	3302      	adds	r3, #2
 800b6e6:	e7c7      	b.n	800b678 <_printf_common+0x58>
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	4622      	mov	r2, r4
 800b6ec:	4649      	mov	r1, r9
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	47c0      	blx	r8
 800b6f2:	3001      	adds	r0, #1
 800b6f4:	d0e6      	beq.n	800b6c4 <_printf_common+0xa4>
 800b6f6:	3601      	adds	r6, #1
 800b6f8:	e7d9      	b.n	800b6ae <_printf_common+0x8e>
	...

0800b6fc <_printf_i>:
 800b6fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b700:	460c      	mov	r4, r1
 800b702:	4691      	mov	r9, r2
 800b704:	7e27      	ldrb	r7, [r4, #24]
 800b706:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b708:	2f78      	cmp	r7, #120	; 0x78
 800b70a:	4680      	mov	r8, r0
 800b70c:	469a      	mov	sl, r3
 800b70e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b712:	d807      	bhi.n	800b724 <_printf_i+0x28>
 800b714:	2f62      	cmp	r7, #98	; 0x62
 800b716:	d80a      	bhi.n	800b72e <_printf_i+0x32>
 800b718:	2f00      	cmp	r7, #0
 800b71a:	f000 80d8 	beq.w	800b8ce <_printf_i+0x1d2>
 800b71e:	2f58      	cmp	r7, #88	; 0x58
 800b720:	f000 80a3 	beq.w	800b86a <_printf_i+0x16e>
 800b724:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b72c:	e03a      	b.n	800b7a4 <_printf_i+0xa8>
 800b72e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b732:	2b15      	cmp	r3, #21
 800b734:	d8f6      	bhi.n	800b724 <_printf_i+0x28>
 800b736:	a001      	add	r0, pc, #4	; (adr r0, 800b73c <_printf_i+0x40>)
 800b738:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b73c:	0800b795 	.word	0x0800b795
 800b740:	0800b7a9 	.word	0x0800b7a9
 800b744:	0800b725 	.word	0x0800b725
 800b748:	0800b725 	.word	0x0800b725
 800b74c:	0800b725 	.word	0x0800b725
 800b750:	0800b725 	.word	0x0800b725
 800b754:	0800b7a9 	.word	0x0800b7a9
 800b758:	0800b725 	.word	0x0800b725
 800b75c:	0800b725 	.word	0x0800b725
 800b760:	0800b725 	.word	0x0800b725
 800b764:	0800b725 	.word	0x0800b725
 800b768:	0800b8b5 	.word	0x0800b8b5
 800b76c:	0800b7d9 	.word	0x0800b7d9
 800b770:	0800b897 	.word	0x0800b897
 800b774:	0800b725 	.word	0x0800b725
 800b778:	0800b725 	.word	0x0800b725
 800b77c:	0800b8d7 	.word	0x0800b8d7
 800b780:	0800b725 	.word	0x0800b725
 800b784:	0800b7d9 	.word	0x0800b7d9
 800b788:	0800b725 	.word	0x0800b725
 800b78c:	0800b725 	.word	0x0800b725
 800b790:	0800b89f 	.word	0x0800b89f
 800b794:	680b      	ldr	r3, [r1, #0]
 800b796:	1d1a      	adds	r2, r3, #4
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	600a      	str	r2, [r1, #0]
 800b79c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b7a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e0a3      	b.n	800b8f0 <_printf_i+0x1f4>
 800b7a8:	6825      	ldr	r5, [r4, #0]
 800b7aa:	6808      	ldr	r0, [r1, #0]
 800b7ac:	062e      	lsls	r6, r5, #24
 800b7ae:	f100 0304 	add.w	r3, r0, #4
 800b7b2:	d50a      	bpl.n	800b7ca <_printf_i+0xce>
 800b7b4:	6805      	ldr	r5, [r0, #0]
 800b7b6:	600b      	str	r3, [r1, #0]
 800b7b8:	2d00      	cmp	r5, #0
 800b7ba:	da03      	bge.n	800b7c4 <_printf_i+0xc8>
 800b7bc:	232d      	movs	r3, #45	; 0x2d
 800b7be:	426d      	negs	r5, r5
 800b7c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7c4:	485e      	ldr	r0, [pc, #376]	; (800b940 <_printf_i+0x244>)
 800b7c6:	230a      	movs	r3, #10
 800b7c8:	e019      	b.n	800b7fe <_printf_i+0x102>
 800b7ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b7ce:	6805      	ldr	r5, [r0, #0]
 800b7d0:	600b      	str	r3, [r1, #0]
 800b7d2:	bf18      	it	ne
 800b7d4:	b22d      	sxthne	r5, r5
 800b7d6:	e7ef      	b.n	800b7b8 <_printf_i+0xbc>
 800b7d8:	680b      	ldr	r3, [r1, #0]
 800b7da:	6825      	ldr	r5, [r4, #0]
 800b7dc:	1d18      	adds	r0, r3, #4
 800b7de:	6008      	str	r0, [r1, #0]
 800b7e0:	0628      	lsls	r0, r5, #24
 800b7e2:	d501      	bpl.n	800b7e8 <_printf_i+0xec>
 800b7e4:	681d      	ldr	r5, [r3, #0]
 800b7e6:	e002      	b.n	800b7ee <_printf_i+0xf2>
 800b7e8:	0669      	lsls	r1, r5, #25
 800b7ea:	d5fb      	bpl.n	800b7e4 <_printf_i+0xe8>
 800b7ec:	881d      	ldrh	r5, [r3, #0]
 800b7ee:	4854      	ldr	r0, [pc, #336]	; (800b940 <_printf_i+0x244>)
 800b7f0:	2f6f      	cmp	r7, #111	; 0x6f
 800b7f2:	bf0c      	ite	eq
 800b7f4:	2308      	moveq	r3, #8
 800b7f6:	230a      	movne	r3, #10
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7fe:	6866      	ldr	r6, [r4, #4]
 800b800:	60a6      	str	r6, [r4, #8]
 800b802:	2e00      	cmp	r6, #0
 800b804:	bfa2      	ittt	ge
 800b806:	6821      	ldrge	r1, [r4, #0]
 800b808:	f021 0104 	bicge.w	r1, r1, #4
 800b80c:	6021      	strge	r1, [r4, #0]
 800b80e:	b90d      	cbnz	r5, 800b814 <_printf_i+0x118>
 800b810:	2e00      	cmp	r6, #0
 800b812:	d04d      	beq.n	800b8b0 <_printf_i+0x1b4>
 800b814:	4616      	mov	r6, r2
 800b816:	fbb5 f1f3 	udiv	r1, r5, r3
 800b81a:	fb03 5711 	mls	r7, r3, r1, r5
 800b81e:	5dc7      	ldrb	r7, [r0, r7]
 800b820:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b824:	462f      	mov	r7, r5
 800b826:	42bb      	cmp	r3, r7
 800b828:	460d      	mov	r5, r1
 800b82a:	d9f4      	bls.n	800b816 <_printf_i+0x11a>
 800b82c:	2b08      	cmp	r3, #8
 800b82e:	d10b      	bne.n	800b848 <_printf_i+0x14c>
 800b830:	6823      	ldr	r3, [r4, #0]
 800b832:	07df      	lsls	r7, r3, #31
 800b834:	d508      	bpl.n	800b848 <_printf_i+0x14c>
 800b836:	6923      	ldr	r3, [r4, #16]
 800b838:	6861      	ldr	r1, [r4, #4]
 800b83a:	4299      	cmp	r1, r3
 800b83c:	bfde      	ittt	le
 800b83e:	2330      	movle	r3, #48	; 0x30
 800b840:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b844:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b848:	1b92      	subs	r2, r2, r6
 800b84a:	6122      	str	r2, [r4, #16]
 800b84c:	f8cd a000 	str.w	sl, [sp]
 800b850:	464b      	mov	r3, r9
 800b852:	aa03      	add	r2, sp, #12
 800b854:	4621      	mov	r1, r4
 800b856:	4640      	mov	r0, r8
 800b858:	f7ff fee2 	bl	800b620 <_printf_common>
 800b85c:	3001      	adds	r0, #1
 800b85e:	d14c      	bne.n	800b8fa <_printf_i+0x1fe>
 800b860:	f04f 30ff 	mov.w	r0, #4294967295
 800b864:	b004      	add	sp, #16
 800b866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b86a:	4835      	ldr	r0, [pc, #212]	; (800b940 <_printf_i+0x244>)
 800b86c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	680e      	ldr	r6, [r1, #0]
 800b874:	061f      	lsls	r7, r3, #24
 800b876:	f856 5b04 	ldr.w	r5, [r6], #4
 800b87a:	600e      	str	r6, [r1, #0]
 800b87c:	d514      	bpl.n	800b8a8 <_printf_i+0x1ac>
 800b87e:	07d9      	lsls	r1, r3, #31
 800b880:	bf44      	itt	mi
 800b882:	f043 0320 	orrmi.w	r3, r3, #32
 800b886:	6023      	strmi	r3, [r4, #0]
 800b888:	b91d      	cbnz	r5, 800b892 <_printf_i+0x196>
 800b88a:	6823      	ldr	r3, [r4, #0]
 800b88c:	f023 0320 	bic.w	r3, r3, #32
 800b890:	6023      	str	r3, [r4, #0]
 800b892:	2310      	movs	r3, #16
 800b894:	e7b0      	b.n	800b7f8 <_printf_i+0xfc>
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	f043 0320 	orr.w	r3, r3, #32
 800b89c:	6023      	str	r3, [r4, #0]
 800b89e:	2378      	movs	r3, #120	; 0x78
 800b8a0:	4828      	ldr	r0, [pc, #160]	; (800b944 <_printf_i+0x248>)
 800b8a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8a6:	e7e3      	b.n	800b870 <_printf_i+0x174>
 800b8a8:	065e      	lsls	r6, r3, #25
 800b8aa:	bf48      	it	mi
 800b8ac:	b2ad      	uxthmi	r5, r5
 800b8ae:	e7e6      	b.n	800b87e <_printf_i+0x182>
 800b8b0:	4616      	mov	r6, r2
 800b8b2:	e7bb      	b.n	800b82c <_printf_i+0x130>
 800b8b4:	680b      	ldr	r3, [r1, #0]
 800b8b6:	6826      	ldr	r6, [r4, #0]
 800b8b8:	6960      	ldr	r0, [r4, #20]
 800b8ba:	1d1d      	adds	r5, r3, #4
 800b8bc:	600d      	str	r5, [r1, #0]
 800b8be:	0635      	lsls	r5, r6, #24
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	d501      	bpl.n	800b8c8 <_printf_i+0x1cc>
 800b8c4:	6018      	str	r0, [r3, #0]
 800b8c6:	e002      	b.n	800b8ce <_printf_i+0x1d2>
 800b8c8:	0671      	lsls	r1, r6, #25
 800b8ca:	d5fb      	bpl.n	800b8c4 <_printf_i+0x1c8>
 800b8cc:	8018      	strh	r0, [r3, #0]
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	6123      	str	r3, [r4, #16]
 800b8d2:	4616      	mov	r6, r2
 800b8d4:	e7ba      	b.n	800b84c <_printf_i+0x150>
 800b8d6:	680b      	ldr	r3, [r1, #0]
 800b8d8:	1d1a      	adds	r2, r3, #4
 800b8da:	600a      	str	r2, [r1, #0]
 800b8dc:	681e      	ldr	r6, [r3, #0]
 800b8de:	6862      	ldr	r2, [r4, #4]
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	4630      	mov	r0, r6
 800b8e4:	f7f4 fc7c 	bl	80001e0 <memchr>
 800b8e8:	b108      	cbz	r0, 800b8ee <_printf_i+0x1f2>
 800b8ea:	1b80      	subs	r0, r0, r6
 800b8ec:	6060      	str	r0, [r4, #4]
 800b8ee:	6863      	ldr	r3, [r4, #4]
 800b8f0:	6123      	str	r3, [r4, #16]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8f8:	e7a8      	b.n	800b84c <_printf_i+0x150>
 800b8fa:	6923      	ldr	r3, [r4, #16]
 800b8fc:	4632      	mov	r2, r6
 800b8fe:	4649      	mov	r1, r9
 800b900:	4640      	mov	r0, r8
 800b902:	47d0      	blx	sl
 800b904:	3001      	adds	r0, #1
 800b906:	d0ab      	beq.n	800b860 <_printf_i+0x164>
 800b908:	6823      	ldr	r3, [r4, #0]
 800b90a:	079b      	lsls	r3, r3, #30
 800b90c:	d413      	bmi.n	800b936 <_printf_i+0x23a>
 800b90e:	68e0      	ldr	r0, [r4, #12]
 800b910:	9b03      	ldr	r3, [sp, #12]
 800b912:	4298      	cmp	r0, r3
 800b914:	bfb8      	it	lt
 800b916:	4618      	movlt	r0, r3
 800b918:	e7a4      	b.n	800b864 <_printf_i+0x168>
 800b91a:	2301      	movs	r3, #1
 800b91c:	4632      	mov	r2, r6
 800b91e:	4649      	mov	r1, r9
 800b920:	4640      	mov	r0, r8
 800b922:	47d0      	blx	sl
 800b924:	3001      	adds	r0, #1
 800b926:	d09b      	beq.n	800b860 <_printf_i+0x164>
 800b928:	3501      	adds	r5, #1
 800b92a:	68e3      	ldr	r3, [r4, #12]
 800b92c:	9903      	ldr	r1, [sp, #12]
 800b92e:	1a5b      	subs	r3, r3, r1
 800b930:	42ab      	cmp	r3, r5
 800b932:	dcf2      	bgt.n	800b91a <_printf_i+0x21e>
 800b934:	e7eb      	b.n	800b90e <_printf_i+0x212>
 800b936:	2500      	movs	r5, #0
 800b938:	f104 0619 	add.w	r6, r4, #25
 800b93c:	e7f5      	b.n	800b92a <_printf_i+0x22e>
 800b93e:	bf00      	nop
 800b940:	0800c5cd 	.word	0x0800c5cd
 800b944:	0800c5de 	.word	0x0800c5de

0800b948 <memcpy>:
 800b948:	440a      	add	r2, r1
 800b94a:	4291      	cmp	r1, r2
 800b94c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b950:	d100      	bne.n	800b954 <memcpy+0xc>
 800b952:	4770      	bx	lr
 800b954:	b510      	push	{r4, lr}
 800b956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b95a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b95e:	4291      	cmp	r1, r2
 800b960:	d1f9      	bne.n	800b956 <memcpy+0xe>
 800b962:	bd10      	pop	{r4, pc}

0800b964 <memmove>:
 800b964:	4288      	cmp	r0, r1
 800b966:	b510      	push	{r4, lr}
 800b968:	eb01 0402 	add.w	r4, r1, r2
 800b96c:	d902      	bls.n	800b974 <memmove+0x10>
 800b96e:	4284      	cmp	r4, r0
 800b970:	4623      	mov	r3, r4
 800b972:	d807      	bhi.n	800b984 <memmove+0x20>
 800b974:	1e43      	subs	r3, r0, #1
 800b976:	42a1      	cmp	r1, r4
 800b978:	d008      	beq.n	800b98c <memmove+0x28>
 800b97a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b97e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b982:	e7f8      	b.n	800b976 <memmove+0x12>
 800b984:	4402      	add	r2, r0
 800b986:	4601      	mov	r1, r0
 800b988:	428a      	cmp	r2, r1
 800b98a:	d100      	bne.n	800b98e <memmove+0x2a>
 800b98c:	bd10      	pop	{r4, pc}
 800b98e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b996:	e7f7      	b.n	800b988 <memmove+0x24>

0800b998 <_free_r>:
 800b998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b99a:	2900      	cmp	r1, #0
 800b99c:	d048      	beq.n	800ba30 <_free_r+0x98>
 800b99e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9a2:	9001      	str	r0, [sp, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	f1a1 0404 	sub.w	r4, r1, #4
 800b9aa:	bfb8      	it	lt
 800b9ac:	18e4      	addlt	r4, r4, r3
 800b9ae:	f000 f8d3 	bl	800bb58 <__malloc_lock>
 800b9b2:	4a20      	ldr	r2, [pc, #128]	; (800ba34 <_free_r+0x9c>)
 800b9b4:	9801      	ldr	r0, [sp, #4]
 800b9b6:	6813      	ldr	r3, [r2, #0]
 800b9b8:	4615      	mov	r5, r2
 800b9ba:	b933      	cbnz	r3, 800b9ca <_free_r+0x32>
 800b9bc:	6063      	str	r3, [r4, #4]
 800b9be:	6014      	str	r4, [r2, #0]
 800b9c0:	b003      	add	sp, #12
 800b9c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9c6:	f000 b8cd 	b.w	800bb64 <__malloc_unlock>
 800b9ca:	42a3      	cmp	r3, r4
 800b9cc:	d90b      	bls.n	800b9e6 <_free_r+0x4e>
 800b9ce:	6821      	ldr	r1, [r4, #0]
 800b9d0:	1862      	adds	r2, r4, r1
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	bf04      	itt	eq
 800b9d6:	681a      	ldreq	r2, [r3, #0]
 800b9d8:	685b      	ldreq	r3, [r3, #4]
 800b9da:	6063      	str	r3, [r4, #4]
 800b9dc:	bf04      	itt	eq
 800b9de:	1852      	addeq	r2, r2, r1
 800b9e0:	6022      	streq	r2, [r4, #0]
 800b9e2:	602c      	str	r4, [r5, #0]
 800b9e4:	e7ec      	b.n	800b9c0 <_free_r+0x28>
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	b10b      	cbz	r3, 800b9f0 <_free_r+0x58>
 800b9ec:	42a3      	cmp	r3, r4
 800b9ee:	d9fa      	bls.n	800b9e6 <_free_r+0x4e>
 800b9f0:	6811      	ldr	r1, [r2, #0]
 800b9f2:	1855      	adds	r5, r2, r1
 800b9f4:	42a5      	cmp	r5, r4
 800b9f6:	d10b      	bne.n	800ba10 <_free_r+0x78>
 800b9f8:	6824      	ldr	r4, [r4, #0]
 800b9fa:	4421      	add	r1, r4
 800b9fc:	1854      	adds	r4, r2, r1
 800b9fe:	42a3      	cmp	r3, r4
 800ba00:	6011      	str	r1, [r2, #0]
 800ba02:	d1dd      	bne.n	800b9c0 <_free_r+0x28>
 800ba04:	681c      	ldr	r4, [r3, #0]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	6053      	str	r3, [r2, #4]
 800ba0a:	4421      	add	r1, r4
 800ba0c:	6011      	str	r1, [r2, #0]
 800ba0e:	e7d7      	b.n	800b9c0 <_free_r+0x28>
 800ba10:	d902      	bls.n	800ba18 <_free_r+0x80>
 800ba12:	230c      	movs	r3, #12
 800ba14:	6003      	str	r3, [r0, #0]
 800ba16:	e7d3      	b.n	800b9c0 <_free_r+0x28>
 800ba18:	6825      	ldr	r5, [r4, #0]
 800ba1a:	1961      	adds	r1, r4, r5
 800ba1c:	428b      	cmp	r3, r1
 800ba1e:	bf04      	itt	eq
 800ba20:	6819      	ldreq	r1, [r3, #0]
 800ba22:	685b      	ldreq	r3, [r3, #4]
 800ba24:	6063      	str	r3, [r4, #4]
 800ba26:	bf04      	itt	eq
 800ba28:	1949      	addeq	r1, r1, r5
 800ba2a:	6021      	streq	r1, [r4, #0]
 800ba2c:	6054      	str	r4, [r2, #4]
 800ba2e:	e7c7      	b.n	800b9c0 <_free_r+0x28>
 800ba30:	b003      	add	sp, #12
 800ba32:	bd30      	pop	{r4, r5, pc}
 800ba34:	20000300 	.word	0x20000300

0800ba38 <_malloc_r>:
 800ba38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3a:	1ccd      	adds	r5, r1, #3
 800ba3c:	f025 0503 	bic.w	r5, r5, #3
 800ba40:	3508      	adds	r5, #8
 800ba42:	2d0c      	cmp	r5, #12
 800ba44:	bf38      	it	cc
 800ba46:	250c      	movcc	r5, #12
 800ba48:	2d00      	cmp	r5, #0
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	db01      	blt.n	800ba52 <_malloc_r+0x1a>
 800ba4e:	42a9      	cmp	r1, r5
 800ba50:	d903      	bls.n	800ba5a <_malloc_r+0x22>
 800ba52:	230c      	movs	r3, #12
 800ba54:	6033      	str	r3, [r6, #0]
 800ba56:	2000      	movs	r0, #0
 800ba58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba5a:	f000 f87d 	bl	800bb58 <__malloc_lock>
 800ba5e:	4921      	ldr	r1, [pc, #132]	; (800bae4 <_malloc_r+0xac>)
 800ba60:	680a      	ldr	r2, [r1, #0]
 800ba62:	4614      	mov	r4, r2
 800ba64:	b99c      	cbnz	r4, 800ba8e <_malloc_r+0x56>
 800ba66:	4f20      	ldr	r7, [pc, #128]	; (800bae8 <_malloc_r+0xb0>)
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	b923      	cbnz	r3, 800ba76 <_malloc_r+0x3e>
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f000 f862 	bl	800bb38 <_sbrk_r>
 800ba74:	6038      	str	r0, [r7, #0]
 800ba76:	4629      	mov	r1, r5
 800ba78:	4630      	mov	r0, r6
 800ba7a:	f000 f85d 	bl	800bb38 <_sbrk_r>
 800ba7e:	1c43      	adds	r3, r0, #1
 800ba80:	d123      	bne.n	800baca <_malloc_r+0x92>
 800ba82:	230c      	movs	r3, #12
 800ba84:	6033      	str	r3, [r6, #0]
 800ba86:	4630      	mov	r0, r6
 800ba88:	f000 f86c 	bl	800bb64 <__malloc_unlock>
 800ba8c:	e7e3      	b.n	800ba56 <_malloc_r+0x1e>
 800ba8e:	6823      	ldr	r3, [r4, #0]
 800ba90:	1b5b      	subs	r3, r3, r5
 800ba92:	d417      	bmi.n	800bac4 <_malloc_r+0x8c>
 800ba94:	2b0b      	cmp	r3, #11
 800ba96:	d903      	bls.n	800baa0 <_malloc_r+0x68>
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	441c      	add	r4, r3
 800ba9c:	6025      	str	r5, [r4, #0]
 800ba9e:	e004      	b.n	800baaa <_malloc_r+0x72>
 800baa0:	6863      	ldr	r3, [r4, #4]
 800baa2:	42a2      	cmp	r2, r4
 800baa4:	bf0c      	ite	eq
 800baa6:	600b      	streq	r3, [r1, #0]
 800baa8:	6053      	strne	r3, [r2, #4]
 800baaa:	4630      	mov	r0, r6
 800baac:	f000 f85a 	bl	800bb64 <__malloc_unlock>
 800bab0:	f104 000b 	add.w	r0, r4, #11
 800bab4:	1d23      	adds	r3, r4, #4
 800bab6:	f020 0007 	bic.w	r0, r0, #7
 800baba:	1ac2      	subs	r2, r0, r3
 800babc:	d0cc      	beq.n	800ba58 <_malloc_r+0x20>
 800babe:	1a1b      	subs	r3, r3, r0
 800bac0:	50a3      	str	r3, [r4, r2]
 800bac2:	e7c9      	b.n	800ba58 <_malloc_r+0x20>
 800bac4:	4622      	mov	r2, r4
 800bac6:	6864      	ldr	r4, [r4, #4]
 800bac8:	e7cc      	b.n	800ba64 <_malloc_r+0x2c>
 800baca:	1cc4      	adds	r4, r0, #3
 800bacc:	f024 0403 	bic.w	r4, r4, #3
 800bad0:	42a0      	cmp	r0, r4
 800bad2:	d0e3      	beq.n	800ba9c <_malloc_r+0x64>
 800bad4:	1a21      	subs	r1, r4, r0
 800bad6:	4630      	mov	r0, r6
 800bad8:	f000 f82e 	bl	800bb38 <_sbrk_r>
 800badc:	3001      	adds	r0, #1
 800bade:	d1dd      	bne.n	800ba9c <_malloc_r+0x64>
 800bae0:	e7cf      	b.n	800ba82 <_malloc_r+0x4a>
 800bae2:	bf00      	nop
 800bae4:	20000300 	.word	0x20000300
 800bae8:	20000304 	.word	0x20000304

0800baec <_realloc_r>:
 800baec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baee:	4607      	mov	r7, r0
 800baf0:	4614      	mov	r4, r2
 800baf2:	460e      	mov	r6, r1
 800baf4:	b921      	cbnz	r1, 800bb00 <_realloc_r+0x14>
 800baf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bafa:	4611      	mov	r1, r2
 800bafc:	f7ff bf9c 	b.w	800ba38 <_malloc_r>
 800bb00:	b922      	cbnz	r2, 800bb0c <_realloc_r+0x20>
 800bb02:	f7ff ff49 	bl	800b998 <_free_r>
 800bb06:	4625      	mov	r5, r4
 800bb08:	4628      	mov	r0, r5
 800bb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb0c:	f000 f830 	bl	800bb70 <_malloc_usable_size_r>
 800bb10:	42a0      	cmp	r0, r4
 800bb12:	d20f      	bcs.n	800bb34 <_realloc_r+0x48>
 800bb14:	4621      	mov	r1, r4
 800bb16:	4638      	mov	r0, r7
 800bb18:	f7ff ff8e 	bl	800ba38 <_malloc_r>
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d0f2      	beq.n	800bb08 <_realloc_r+0x1c>
 800bb22:	4631      	mov	r1, r6
 800bb24:	4622      	mov	r2, r4
 800bb26:	f7ff ff0f 	bl	800b948 <memcpy>
 800bb2a:	4631      	mov	r1, r6
 800bb2c:	4638      	mov	r0, r7
 800bb2e:	f7ff ff33 	bl	800b998 <_free_r>
 800bb32:	e7e9      	b.n	800bb08 <_realloc_r+0x1c>
 800bb34:	4635      	mov	r5, r6
 800bb36:	e7e7      	b.n	800bb08 <_realloc_r+0x1c>

0800bb38 <_sbrk_r>:
 800bb38:	b538      	push	{r3, r4, r5, lr}
 800bb3a:	4d06      	ldr	r5, [pc, #24]	; (800bb54 <_sbrk_r+0x1c>)
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	4604      	mov	r4, r0
 800bb40:	4608      	mov	r0, r1
 800bb42:	602b      	str	r3, [r5, #0]
 800bb44:	f7f5 f92c 	bl	8000da0 <_sbrk>
 800bb48:	1c43      	adds	r3, r0, #1
 800bb4a:	d102      	bne.n	800bb52 <_sbrk_r+0x1a>
 800bb4c:	682b      	ldr	r3, [r5, #0]
 800bb4e:	b103      	cbz	r3, 800bb52 <_sbrk_r+0x1a>
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	bd38      	pop	{r3, r4, r5, pc}
 800bb54:	20000890 	.word	0x20000890

0800bb58 <__malloc_lock>:
 800bb58:	4801      	ldr	r0, [pc, #4]	; (800bb60 <__malloc_lock+0x8>)
 800bb5a:	f000 b811 	b.w	800bb80 <__retarget_lock_acquire_recursive>
 800bb5e:	bf00      	nop
 800bb60:	20000898 	.word	0x20000898

0800bb64 <__malloc_unlock>:
 800bb64:	4801      	ldr	r0, [pc, #4]	; (800bb6c <__malloc_unlock+0x8>)
 800bb66:	f000 b80c 	b.w	800bb82 <__retarget_lock_release_recursive>
 800bb6a:	bf00      	nop
 800bb6c:	20000898 	.word	0x20000898

0800bb70 <_malloc_usable_size_r>:
 800bb70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb74:	1f18      	subs	r0, r3, #4
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	bfbc      	itt	lt
 800bb7a:	580b      	ldrlt	r3, [r1, r0]
 800bb7c:	18c0      	addlt	r0, r0, r3
 800bb7e:	4770      	bx	lr

0800bb80 <__retarget_lock_acquire_recursive>:
 800bb80:	4770      	bx	lr

0800bb82 <__retarget_lock_release_recursive>:
 800bb82:	4770      	bx	lr

0800bb84 <_init>:
 800bb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb86:	bf00      	nop
 800bb88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb8a:	bc08      	pop	{r3}
 800bb8c:	469e      	mov	lr, r3
 800bb8e:	4770      	bx	lr

0800bb90 <_fini>:
 800bb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb92:	bf00      	nop
 800bb94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb96:	bc08      	pop	{r3}
 800bb98:	469e      	mov	lr, r3
 800bb9a:	4770      	bx	lr
